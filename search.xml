<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java中的 Arrays.asList() 方法是什么</title>
      <link href="/posts/11122.html"/>
      <url>/posts/11122.html</url>
      
        <content type="html"><![CDATA[<h1 id="java中的-Arrays-asList-方法是什么"><a href="#java中的-Arrays-asList-方法是什么" class="headerlink" title="java中的 Arrays.asList() 方法是什么"></a>java中的 Arrays.asList() 方法是什么</h1><p>Arrays.asList() 方法将数组转换为 List。它允许将数组作为列表来操作。</p><p>语法是:</p><p><code>Arrays.asList(T... a)</code></p><p>它接收可变数量的参数,并将它们作为数组,然后转换为 List。</p><p>例如:</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在 list 是一个 List,包含 [“a”, “b”, “c”]。</p><p>需要注意的是:</p><ol><li>返回的 List 是Arrays类的内部类,并不是 ArrayList。它基本上只是数组的view,所以修改这个List也会修改原数组。</li><li>由于1,asList返回的List的size是固定的,不支持add&#x2F;remove等方法。如果需要这些方法,可以这样写:</li></ol><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>asList只能用于对象数组,对于原始类型的数组如int[],应使用Arrays.stream()或IntStream等。</li></ol><p>Arrays.asList()是将数组快速转换为列表的好方法,但是返回的列表不是一个完整的列表实现,有一定的限制,需要注意。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 中的 :: 是什么符号</title>
      <link href="/posts/16752.html"/>
      <url>/posts/16752.html</url>
      
        <content type="html"><![CDATA[<h1 id="java-中的-是什么符号"><a href="#java-中的-是什么符号" class="headerlink" title="java 中的 :: 是什么符号"></a>java 中的 :: 是什么符号</h1><p><code>::</code> 是 Java 中的方法引用操作符。它可以用来引用类方法或实例方法。</p><p>方法引用使得开发者可以直接引用已经存在的方法,而不是定义新的匿名方法。它使代码更简洁,更容易理解。</p><p>方法引用有三种形式:</p><ul><li>类名::静态方法名</li><li>实例名::实例方法名</li><li>类名::实例方法名</li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 类名::静态方法名</span>Math<span class="token operator">:</span><span class="token operator">:</span>sqrt <span class="token comment" spellcheck="true">// 实例名::实例方法名</span>list<span class="token operator">:</span><span class="token operator">:</span>add <span class="token comment" spellcheck="true">// 类名::实例方法名</span>String<span class="token operator">:</span><span class="token operator">:</span>length这些方法引用等价于使用lambda表达式的函数<span class="token operator">:</span>java<span class="token comment" spellcheck="true">// 等价于 x -> Math.sqrt(x) </span>Math<span class="token operator">:</span><span class="token operator">:</span>sqrt  <span class="token comment" spellcheck="true">// 等价于 x -> list.add(x)</span>list<span class="token operator">:</span><span class="token operator">:</span>add   <span class="token comment" spellcheck="true">// 等价于 x -> x.length() </span>String<span class="token operator">:</span><span class="token operator">:</span>length</code></pre><p>方法引用可以使代码简洁很多,特别是当函数接口的抽象方法与已有方法的签名完全匹配的情况下。</p><p>一个更完整的例子:</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> String<span class="token operator">></span> getName <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">;</span>String name <span class="token operator">=</span> getName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于 </span>Function<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> String<span class="token operator">></span> getName <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以,:: 是 Java 8 中引入的方法引用操作符,它可以用来引用已有的方法,使代码更简洁。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 设置博客部署至阿里云oss对象存储</title>
      <link href="/posts/54864.html"/>
      <url>/posts/54864.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客-设置一键部署至阿里云oss对象存储"><a href="#hexo博客-设置一键部署至阿里云oss对象存储" class="headerlink" title="hexo博客 设置一键部署至阿里云oss对象存储"></a>hexo博客 设置一键部署至阿里云oss对象存储</h1><p>现在使用Hexo 构建静态网站的人数日益增加,许多人会选择Github Pages 服务来部署自己的静态网站,但是Github Pages 在中国的访问速度实在难以接受。本文介绍如何一键使用阿里云OSS 对象存储服务部署Hexo网站,同时解决浏览器缓存的一个问题。<br>通过阿里云OSS 对象存储服务部署Hexo静态网站,不仅部署速度和稳定性有了质的飞跃,而且国内访问速度大大提升。阿里云OSS 也提供了丰富的CDN加速和安全防护功能,这些都使阿里云OSS 成为部署Hexo静态网站的理想选择。此外,通过修改Hexo的配置,还可以解决Hexo生成的HTML页面被浏览器过度缓存的问题,提供更好的用户体验。<br>总之,使用阿里云OSS 对象存储服务部署Hexo静态网站,既解决了Github Pages 国内速度慢的问题,也避免了浏览器缓存过度的弊端。希望本文能为更多的Hexo用户提供参考,快速搭建高速稳定的Hexo静态网站。</p><h2 id="借助阿里云oss部署静态页面功能挂载我们的hexo博客"><a href="#借助阿里云oss部署静态页面功能挂载我们的hexo博客" class="headerlink" title="借助阿里云oss部署静态页面功能挂载我们的hexo博客"></a>借助阿里云oss部署静态页面功能挂载我们的hexo博客</h2><h3 id="计费标准"><a href="#计费标准" class="headerlink" title="计费标准"></a><strong>计费标准</strong></h3><ul><li><p>存储空间费用（标准类型）：0.12元&#x2F;GB&#x2F;月</p></li><li><p>访问流量费用（外网访问）：闲时：0.25元&#x2F;GB，忙时：0.50元&#x2F;GB</p></li><li><p>请求费用（所有类型）：0.01元&#x2F;万次</p></li></ul><blockquote><p>此为国内存储空间按量付费计费标准，海外地域会有略微调整。小型站点建议使用按量付费，大型站点建议购买流量包套餐。点击这里查看详情。</p></blockquote><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h2><p><img src="/../images/blogImg/alioss/createBucket.png" alt="创建数据桶"></p><ol><li>存储桶名称:随意取,只要不重复即可</li><li>地域:根据您的需求,阿里云的节点国内访问速度都可以满足,如果您不打算使用CDN服务的话,可以选择华东节点,全国访问速度都能符合要求。如果使用CDN服务的话,地域选择哪个都行。 </li><li>存储类型:一般选择标准存储就足够了,当然如果访问量很小的话,选择低频访问存储也可以,可以省一点费用。</li><li>同城冗余存储:不需要</li><li>版本控制:不需要 </li><li>读写权限:这里要注意,我们选择<strong>公共读</strong>,切记不能选择私有,一方面如果不开启CDN的话,私有权限无法在公网访问。另一方面,如果开启CDN,阿里云的CDN私有回源功能与OSS的静态页面功能冲突(别问我是怎么知道的,都是坑)。</li><li>服务端加密方式:无 </li><li>实时日志查询:看需求,有免费7天的实时日志查询,但有900GB&#x2F;天的限制。 </li><li>定时备份:不开通</li></ol><h2 id="开启静态页面功能"><a href="#开启静态页面功能" class="headerlink" title="开启静态页面功能"></a>开启静态页面功能</h2><p>进入Bucket 右边菜单栏选择 <code>数据管理</code> -&gt; <code>静态页面</code></p><p><img src="/../images/blogImg/alioss/staticPage.png" alt="进入静态页面"></p><p>配置默认首页为index.html、子目录首页<code>开通</code>、文件404根据指示进行配置</p><h2 id="创建AccessKey并授权"><a href="#创建AccessKey并授权" class="headerlink" title="创建AccessKey并授权"></a>创建AccessKey并授权</h2><p>我们需要通过hexo d 进行一键部署，所以我们这一步需要创建一个子账号并创建AccessKey：</p><ol><li>右上角进入<code>AccessKey管理</code></li></ol><p><img src="/../images/blogImg/alioss/createAccess.png" alt="createAccess"></p><ol start="2"><li>创建子用户并获取到<strong>AccessKey Id</strong>和<strong>AccessKey Secret</strong></li></ol><p><img src="/../images/blogImg/alioss/createSun.png" alt="创建子用户"></p><p>创建子用户并勾选OpenApi 调用，暂存创建后的<code>AccessKey Id</code>和<code>AccessKey Secret</code>,我们稍后使用</p><blockquote><p>若开通 OpenAPI 调用访问，请及时保存 AccessKey 信息，页面关闭后将无法再次获取信息。</p></blockquote><p><img src="/../images/blogImg/alioss/createSun2.png" alt="创建子用户2"></p><ol start="3"><li>授权访问OSS</li></ol><p>返回之后，点击刚刚创建的用户的<code>添加权限</code></p><p>搜索“OSS”，选择添加AliyunOSSFullAccess权限</p><p><img src="/../images/blogImg/alioss/addLimit.png" alt="子用户添加oss控制权限"></p><h2 id="安装一键部署脚本"><a href="#安装一键部署脚本" class="headerlink" title="安装一键部署脚本"></a>安装一键部署脚本</h2><p>这里需要用到一个上传博客文件的cli：<a href="https://github.com/huzhanfei/hexo-deployer-ali-oss-extend">hexo-deployer-ali-oss-extend</a></p><p>在hexo博客目录通过npm安装该脚本:</p><pre class=" language-cmd"><code class="language-cmd">npm i hexo-deployer-ali-oss-extend</code></pre><p>在hexo项目的配置文件_config.yml中添加相关配置：</p><pre class=" language-yml"><code class="language-yml">deploy:- type: git  repo:     github: git@github.com:Clov614/Clov614.github.io.git    # coding: git@e.coding.net:aisakataiga/taiga/taiga.git    gitee: git@gitee.com:osp2333/osp2333.git  branch: master# 阿里云 oss 同步- type: ali-oss  region: oss-cn-shanghai  accessKeyId: <您的oss  accessKeyId>  accessKeySecret: <您的oss accessKeySecret>  bucket: blog614  cacheControl:    images: public, max-age=31536000      css: public, max-age=604800         js: public, max-age=86400            html: public, max-age=86400         other: no-cache</code></pre><p><code>cacheControl</code>缓存解释:</p><ul><li>images:图片资源变化不频繁,设置 max-age&#x3D;31536000,缓存 1 年</li><li>css:CSS 资源更新可能比较频繁,设置 max-age&#x3D;604800,缓存 1 周</li><li>js&#x2F;html:JS&#x2F;HTML 资源更新频率中等,设置 max-age&#x3D;86400,缓存 1 天</li><li>other:其他资源更新频率未知,设置 no-cache,不缓存</li></ul><p>这里需要将type设置为同级的列表</p><p>阿里云oss同步的配置解释：</p><pre class=" language-yml"><code class="language-yml">deploy:- type: ali-oss  region: <您的oss 区域代码>  accessKeyId: <您的oss  accessKeyId>  accessKeySecret: <您的oss accessKeySecret>  bucket: <您的bucket name>  cacheControl:    images: <图片文件HTTP响应头Cache-Control>，留空为no-cache    css: <CSS文件HTTP响应头Cache-Control>，留空为no-cache    js: <JS文件HTTP响应头Cache-Control>，留空为no-cache    html: <HTML文件HTTP响应头Cache-Control>，留空为no-cache    other: <其它文件HTTP响应头Cache-Control>，留空为no-cache</code></pre><p>其中区域代码，可以在OSS的Bucket概览当中找到，如下图所示：</p><p><img src="/../images/blogImg/alioss/viewRegion.png" alt="概览中查看区域代码"></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>在菜单栏中进入<code>数据处理</code> -&gt; <code>域名管理</code> 中绑定域名以及配置相关证书开启https</p><h2 id="关于CDN"><a href="#关于CDN" class="headerlink" title="关于CDN"></a>关于CDN</h2><p>CDN我使用的是腾讯云，腾讯云的话配置应该可以单独写一篇文章</p><p>如果对访问速度有要求的话可以在自定义域名中超链接到阿里云CDN中按照指示进行配置</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>阿里云oss可以很好的解决国内访问速度不佳的问题，oss胜在很便宜，如果你的博客访问量不大，<br>可以在oss中配置博客页面来达到国内流畅访问，如果用gitee page 的话也不是不行，但是审核略微麻烦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云校园数据库申请指南</title>
      <link href="/posts/24147.html"/>
      <url>/posts/24147.html</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯云校园mySql数据库使用"><a href="#腾讯云校园mySql数据库使用" class="headerlink" title="腾讯云校园mySql数据库使用"></a>腾讯云校园mySql数据库使用</h1><h2 id="使用的初衷"><a href="#使用的初衷" class="headerlink" title="使用的初衷"></a>使用的初衷</h2><h3 id="选择使用云数据库的好处有很多："><a href="#选择使用云数据库的好处有很多：" class="headerlink" title="选择使用云数据库的好处有很多："></a>选择使用云数据库的好处有很多：</h3><ul><li><ol><li>稳定</li></ol></li><li><ol start="2"><li>高效</li></ol></li><li><ol start="3"><li>使用简单</li></ol></li><li><ol start="4"><li>重置方便</li></ol></li></ul><p>腾讯云的TDSQL-C MySQL<br>是100%支持MySQL和PostgreSQL</p><h3 id="本地安装占用了过多c盘"><a href="#本地安装占用了过多c盘" class="headerlink" title="本地安装占用了过多c盘"></a>本地安装占用了过多c盘</h3><p>在本地使用mySql服务默认会占用掉不小的C盘空间，并且迁移很困难，而且作为学生党，尚在学习和摸索的阶段，重置和重装会耗费掉大量的事件和精力，故选择了云数据库</p><h2 id="活动规则"><a href="#活动规则" class="headerlink" title="活动规则"></a>活动规则</h2><ol><li>活动对象：</li></ol><p>仅限腾讯云官网通过个人认证的35岁以下学生用户参与（协作者除外）</p><ol start="2"><li>活动时间：</li></ol><p>2022年11月1日–2023年5月31日</p><ol start="3"><li>活动规则：</li></ol><p>3.1 符合条件的用户可购买校园优惠云数据库，包含100%分别兼容 MySQL 和 PostgreSQL的分布式云原生数据库TDSQL-C</p><p>3.2 同一个身份证号码、手机号对应的多个账号仅限一个帐号购买</p><p>3.3 每种规格每个用户限购1台，不同规格的优惠套餐可同时购买</p><p>3.4 购买后不支持配置调整，若发起退款将不再保留购买资格</p><p>3.5 购买产品若发生退款，参照官网退款规则</p><p>3.6 本次活动不支持代金券支付</p><h2 id="学生认证"><a href="#学生认证" class="headerlink" title="学生认证"></a>学生认证</h2><blockquote><p>腾讯云的学生优惠25岁以下不需要进行认证就可以享受优惠，</p><p>这点还是很好的。所以如果你满足这个条件可以跳过此节阅读下节内容。</p></blockquote><p>点击访问<a href="https://cloud.tencent.com/act/campus/student-verify">云+校园</a>，填写相关信息进行学生认证。</p><p><img src="/../images/blogImg/tencentCloud/student_verify.png" alt="student_verify"></p><h2 id="申请学生云数据库"><a href="#申请学生云数据库" class="headerlink" title="申请学生云数据库"></a>申请学生云数据库</h2><p><a href="https://cloud.tencent.com/act/campus#step1"><strong>https://cloud.tencent.com/act/campus#step1</strong></a></p><p>点击此链接跳转至腾讯云校园优惠套餐页面进行购买</p><p>上面也有云主机也是非常大的折扣推荐选购，<br>2c2g4m 一年仅需 112r，<br>4c6g8m 一年446r</p><h3 id="我们下滑选择TDSQL-C-MySQL这个套餐"><a href="#我们下滑选择TDSQL-C-MySQL这个套餐" class="headerlink" title="我们下滑选择TDSQL-C MySQL这个套餐"></a>我们下滑选择TDSQL-C MySQL这个套餐</h3><p>这个套餐一年是26r，约等于白嫖</p><blockquote><p>注意这些套餐都是仅有三次购买机会，我建议直接购买一年</p></blockquote><p><img src="/../images/blogImg/tencentCloud/campus.png" alt="campus.png"></p><h3 id="选择1年套餐，点击购买"><a href="#选择1年套餐，点击购买" class="headerlink" title="选择1年套餐，点击购买"></a>选择1年套餐，点击购买</h3><p>购买页面默认就行<br>可以根据需求扩展内存，当然这也是要多费用，一般10G学习和开发使用应该足以。</p><p><img src="/../images/blogImg/tencentCloud/buyPage.png" alt="buyPage.png"></p><p><img src="/../images/blogImg/tencentCloud/buyPage2.png" alt="buyPage2.png"></p><p><img src="/../images/blogImg/tencentCloud/buyDetail.png" alt="buyDetail.png"></p><h3 id="购买成功后进入控制台开始使用"><a href="#购买成功后进入控制台开始使用" class="headerlink" title="购买成功后进入控制台开始使用"></a>购买成功后进入控制台开始使用</h3><p>开启外网地址后可以根据此地址访问数据库</p><p><img src="/../images/blogImg/tencentCloud/openOutside.png" alt="openOutside.png"></p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="这里以idea来示例"><a href="#这里以idea来示例" class="headerlink" title="这里以idea来示例"></a>这里以idea来示例</h3><h4 id="step1-在腾讯云数据库控制台开启外网访问并配置好root用户的密码"><a href="#step1-在腾讯云数据库控制台开启外网访问并配置好root用户的密码" class="headerlink" title="step1 在腾讯云数据库控制台开启外网访问并配置好root用户的密码"></a>step1 在腾讯云数据库控制台开启外网访问并配置好root用户的密码</h4><p><img src="/../images/blogImg/tencentCloud/outsideNet.png" alt="outsideNet.png"></p><p><img src="/../images/blogImg/tencentCloud/pwd.png" alt="pwd"></p><h4 id="step2-打开idea中控制台栏，点击-号新建数据库连接选择MySql"><a href="#step2-打开idea中控制台栏，点击-号新建数据库连接选择MySql" class="headerlink" title="step2 打开idea中控制台栏，点击+号新建数据库连接选择MySql"></a>step2 打开idea中控制台栏，点击+号新建数据库连接选择MySql</h4><p><img src="/../images/blogImg/tencentCloud/ideaLink.png" alt="ideaLink"></p><h4 id="step3-在连接中依次填入-数据库访问地址（就是刚刚在云端开启的外网地址）、端口、账号密码、测试连接（可选）、开始连接"><a href="#step3-在连接中依次填入-数据库访问地址（就是刚刚在云端开启的外网地址）、端口、账号密码、测试连接（可选）、开始连接" class="headerlink" title="step3 在连接中依次填入 数据库访问地址（就是刚刚在云端开启的外网地址）、端口、账号密码、测试连接（可选）、开始连接"></a>step3 在连接中依次填入 数据库访问地址（就是刚刚在云端开启的外网地址）、端口、账号密码、测试连接（可选）、开始连接</h4><p><img src="/../images/blogImg/tencentCloud/doConn.png" alt="doConn"></p><p><img src="/../images/blogImg/tencentCloud/textConn.png" alt="textConn"></p><h4 id="step4-打开该数据库的console，开始愉快的使用吧"><a href="#step4-打开该数据库的console，开始愉快的使用吧" class="headerlink" title="step4 打开该数据库的console，开始愉快的使用吧"></a>step4 打开该数据库的console，开始愉快的使用吧</h4><p><img src="/../images/blogImg/tencentCloud/ideaConsole.png" alt="ideaConsole"></p><p><img src="/../images/blogImg/tencentCloud/showDB.png" alt="在腾讯云数据库中查看到新建的数据库"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 云数据库 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sakuracat樱花猫食用指南</title>
      <link href="/posts/63747.html"/>
      <url>/posts/63747.html</url>
      
        <content type="html"><![CDATA[<h1 id="SakuraCat-樱花猫使用教程"><a href="#SakuraCat-樱花猫使用教程" class="headerlink" title="SakuraCat 樱花猫使用教程"></a>SakuraCat 樱花猫使用教程</h1><!-- ![主页面](../images/blogImg/sakura-cat/homePage.png) --><h3 id="注册URL如下："><a href="#注册URL如下：" class="headerlink" title="注册URL如下："></a><strong>注册URL如下：</strong></h3><pre class=" language-copy"><code class="language-copy">https://sakuracat.world/#/register?code=7GzZRxtV</code></pre><blockquote><p>如无法访问请尝试以下备用地址：</p></blockquote><pre class=" language-copy"><code class="language-copy">https://sakuracat.link/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakuracat.club/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakura-cat.net/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakuracat.one/#/register?code=7GzZRxtV</code></pre><blockquote><p><strong>Tips:</strong>  如无法访问，请尝试更换网络环境，尝试刷新页面。</p></blockquote><h2 id="注册步骤"><a href="#注册步骤" class="headerlink" title="注册步骤"></a>注册步骤</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><code>注册账号：</code>填入邮箱地址，获取邮箱验证码后填入，设置密码，注册完成</p><blockquote><p>如果未收到邮件，请查看垃圾信箱</p></blockquote><p><img src="/../images/blogImg/sakura-cat/regist.png"></p><h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>登录并查看使用文档，下载对应的客户端<code>推荐使用第三方客户端</code>（官方客户端存在登录不上问题<code>因网络环境</code>）</p><h3 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h3><p>购买订阅后，参照文档导入订阅链接更新订阅</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="为什么推荐"><a href="#为什么推荐" class="headerlink" title="为什么推荐"></a>为什么推荐</h3><p>✨SakuraCat✨ 是一个<code>不打广告</code>的网络加速小铺🚀</p><p>仅仅通过朋友间的分享来增加新用户</p><p>关于SakuraCat：</p><blockquote><p>我们精选的高速节点，帮助用户省去了反复选择节点的步骤，操作更加简洁，到手就能用！并且我们承诺保障节点质量，采用分期销售的方式，保证每个节点都不会超售，从而为用户提供稳定高速加速服务！</p></blockquote><h4 id="节点丰富速度稳定"><a href="#节点丰富速度稳定" class="headerlink" title="节点丰富速度稳定"></a>节点丰富速度稳定</h4><p>实测<code>8.8r套餐</code>能稳定观看4K视频</p><h4 id="价格实惠"><a href="#价格实惠" class="headerlink" title="价格实惠"></a><strong>价格实惠</strong></h4><blockquote><p>拥有多个月付套餐以及<code>不限时永久定量套餐</code></p></blockquote><blockquote><p>适合学生党轻度上网，以及观看4k视频</p></blockquote><!-- ![](../images/blogImg/sakura-cat/2022-11-06%20203209.png) --><!-- ![](../images/blogImg/sakura-cat/2022-11-06%20203237.png) --><h4 id="文档详细"><a href="#文档详细" class="headerlink" title="文档详细"></a>文档详细</h4><p><img src="/../images/blogImg/sakura-cat/2022-11-06%20203620.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sakura </tag>
            
            <tag> 加速 </tag>
            
            <tag> 订阅 </tag>
            
            <tag> 客户端 </tag>
            
            <tag> 注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf语法</title>
      <link href="/posts/62783.html"/>
      <url>/posts/62783.html</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot整合Thymeleaf"><a href="#Springboot整合Thymeleaf" class="headerlink" title="Springboot整合Thymeleaf"></a>Springboot整合Thymeleaf</h2><h3 id="1、添加Thymeleaf依赖"><a href="#1、添加Thymeleaf依赖" class="headerlink" title="1、添加Thymeleaf依赖"></a>1、添加Thymeleaf依赖</h3><p>要想使用Thhymeleaf，首先要在pom.xml文件中单独添加Thymeleaf依赖。</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="2、自定义Thymeleaf文件配置"><a href="#2、自定义Thymeleaf文件配置" class="headerlink" title="2、自定义Thymeleaf文件配置"></a>2、自定义Thymeleaf文件配置</h3><blockquote><p>注： Spring Boot默认存放模板页面的路径在src&#x2F;main&#x2F;resources&#x2F;templates或者src&#x2F;main&#x2F;view&#x2F;templates，</p><p>这个无论是使用什么模板语言都一样，当然默认路径是可以自定义的，不过一般不推荐这样做。另外Thymeleaf默认的页面文件后缀是.html。</p></blockquote><p>也可以在配置文件中指定自己的模板，这里通过yml配置修改：</p><pre><code>spring:  thymeleaf:    prefix: classpath:/templates/    check-template-location: true    cache: false    suffix: .html    encoding: UTF-8    content-type: text/html    mode: HTML5</code></pre><blockquote><p>prefix：指定模板所在的目录</p><p>check-tempate-location: 检查模板路径是否存在</p><p>cache: 是否缓存，开发模式下设置为false，避免改了模板还要重启服务器，线上设置为true，可以提高性能。</p><p>encoding&amp;content-type：这个大家应该比较熟悉了，与Servlet中设置输出对应属性效果一致。</p><p>mode：这个还是参考官网的说明吧，并且这个是2.X与3.0不同。</p></blockquote><h2 id="Thymeleaf基本语法介绍"><a href="#Thymeleaf基本语法介绍" class="headerlink" title="Thymeleaf基本语法介绍"></a>Thymeleaf基本语法介绍</h2><p>Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何解析model中的数据。</p><h3 id="1、属性介绍"><a href="#1、属性介绍" class="headerlink" title="1、属性介绍"></a>1、属性介绍</h3><blockquote><p>在使用Thymeleaf时页面要引入名称空间： xmlns:th&#x3D;“<a href="http://www.thymeleaf.org”/">http://www.thymeleaf.org”</a></p></blockquote><p>html有的属性，Thymeleaf基本都有，而常用的属性大概有七八个。其中th属性执行的优先级从1~8，数字越低优先级越高。</p><blockquote><p>1）th:text：设置当前元素的文本内容，相同功能的还有th:utext，两者的区别在于前者不会转义html标签，后者会。优先级不高：</p><p>order&#x3D;7</p><p>2）th:value：设置当前元素的value值，类似修改指定属性的还有th:src，th:href。优先级不高：order&#x3D;6</p><p>3）th:each：遍历循环元素，和th:text或th:value一起使用。注意该属性修饰的标签位置，详细往后看。优先级很高：order&#x3D;2</p><p>4）th:if：条件判断，类似的还有th:unless，th:switch，th:case。优先级较高：order&#x3D;3</p><p>5）th:insert：代码块引入，类似的还有th:replace，th:include，三者的区别较大，若使用不恰当会破坏html结构，常用于公共代</p><p>码块提取的场景。优先级最高：order&#x3D;1</p><p>6）th:fragment：定义代码块，方便被th:insert引用。优先级最低：order&#x3D;8</p><p>7）th:object：声明变量，一般和*{}一起配合使用，达到偷懒的效果。优先级一般：order&#x3D;4</p><p>8）th:attr：修改任意属性，实际开发中用的较少，因为有丰富的其他th属性帮忙，类似的还有th:attrappend，th:attrprepend。优</p><p>先级一般：order&#x3D;5</p></blockquote><h3 id="2、表达式介绍"><a href="#2、表达式介绍" class="headerlink" title="2、表达式介绍"></a>2、表达式介绍</h3><pre><code>$&#123;...&#125; 变量表达式，Variable Expressions@&#123;...&#125; 链接表达式，Link URL Expressions#&#123;...&#125; 消息表达式，Message Expressions~&#123;...&#125; 代码块表达式，Fragment Expressions*&#123;...&#125; 选择变量表达式，Selection Variable Expressions</code></pre><h4 id="2-1-…-代码块表达式："><a href="#2-1-…-代码块表达式：" class="headerlink" title="2.1 ~{…} 代码块表达式："></a>2.1 ~{…} 代码块表达式：</h4><p><strong>作用：用代码块片段操作页面代码。</strong></p><p>代码块表达式需要配合th属性（th:insert，th:replace，th:include）一起使用。</p><blockquote><p>th:insert：将代码块片段整个插入到使用了th:insert的HTML标签中</p><p>th:replace：将代码块片段整个替换使用了th:replace的HTML标签中</p><p>th:include：将代码块片段包含的内容插入到使用了th:include的HTML标签中</p></blockquote><h4 id="2-1-…-代码块表达式：-1"><a href="#2-1-…-代码块表达式：-1" class="headerlink" title="2.1 ~{…} 代码块表达式："></a>2.1 ~{…} 代码块表达式：</h4><p><strong>作用：用代码块片段操作页面代码。</strong></p><h4 id="2-2-…-链接表达式"><a href="#2-2-…-链接表达式" class="headerlink" title="2.2 @{…} 链接表达式"></a>2.2 @{…} 链接表达式</h4><p><strong>作用：提交请求，访问资源。</strong></p><p>链接表达式好处：不管是静态资源的引用，form表单的请求，凡是链接都可以用@{…} 。这样可以动态获取项目路径，即便项目名变了，依然可以正常访问。</p><pre><code>案例：&lt;!--引入内部图片资源--&gt;th:src=&quot;@&#123;/images/weChatInn.jpg&#125;&quot; &lt;!--引入外部资源--&gt;&lt;link th:href=&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot; rel=&quot;stylesheet&quot;&gt;&lt;!--引入本地资源--&gt;&lt;link th:href=&quot;@&#123;/main/css/itdragon.css&#125;&quot; rel=&quot;stylesheet&quot;&gt;&lt;!--表单提交路径--&gt;&lt;form class=&quot;form-login&quot; th:action=&quot;@&#123;/user/login&#125;&quot; th:method=&quot;post&quot; &gt;&lt;!--超链接跳转路径附带参数--&gt;&lt;a class=&quot;btn btn-sm&quot; th:href=&quot;@&#123;/login.html(l=&#39;zh_CN&#39;)&#125;&quot;&gt;中文&lt;/a&gt;&lt;a class=&quot;btn btn-sm&quot; th:href=&quot;@&#123;/login.html(l=&#39;en_US&#39;)&#125;&quot;&gt;English&lt;/a&gt;</code></pre><h4 id="2-3-…-变量表达式（最常用）"><a href="#2-3-…-变量表达式（最常用）" class="headerlink" title="2.3 ${…}变量表达式（最常用）"></a>2.3 ${…}变量表达式（最常用）</h4><p><strong>作用：从web作用域里面取到对应的值，作用域包括 request、session、application。</strong></p><p>变量表达式有丰富的内置方法（request，response，session等），使其更强大，更方便。</p><blockquote><p>1、后台代码 ：返回不同作用域的数据到前端。</p></blockquote><pre><code>@GetMapping(&quot;/index&quot;)public String showPage(HttpServletRequest request, HttpSession session) &#123;    User user1 = new User(1L, &quot;zhangsan&quot;, &quot;333333&quot;);    request.setAttribute(&quot;user1&quot;, user1);    User user2 = new User(2L, &quot;lisi&quot;, &quot;444444&quot;);    session.setAttribute(&quot;user2&quot;, user2);    User user3 = new User(3L, &quot;wangwu&quot;, &quot;555555&quot;);    ServletContext application = request.getServletContext();    application.setAttribute(&quot;user3&quot;, user3);    return &quot;index&quot;;&#125;</code></pre><blockquote><p>2、 页面代码：接收后台传回来不同作用域的数据。</p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org/&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;request： &lt;br/&gt;&lt;div&gt;    编号： &lt;label th:text=&quot;$&#123;user1.id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;$&#123;user1.username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;$&#123;user1.password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;session：&lt;br/&gt;&lt;div&gt;    编号： &lt;label th:text=&quot;$&#123;session.user2.id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;$&#123;session.user2.username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;$&#123;session.user2.password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;application：&lt;br/&gt;&lt;div&gt;    编号：&lt;label th:text=&quot;$&#123;application.user3.id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;$&#123;application.user3.username&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    密码：&lt;label th:text=&quot;$&#123;application.user3.password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-4-…-选择变量表达式"><a href="#2-4-…-选择变量表达式" class="headerlink" title="2.4 *{…} 选择变量表达式"></a>2.4 *{…} 选择变量表达式</h4><p><strong>作用：避免书写重复引用代码，指定对象的方式获取变量。</strong></p><p>问题：使用变量表达式来取request、session、application作用域上的属性时，可以发现，我们需要重复编写user1、session.user2和application.use3三次，如果user对象的属性有十几个怎么办？<br>显然写十几次相同的代码不是我们想要解决方案。针对这种问题，Thymeleaf提供了选择变量表达式来解决。</p><blockquote><p>th:object&#x3D;”${user1}：指定对象为user1</p><p>th:text&#x3D;”*{id}：获取user1中的id</p><p>*就代表对象object</p></blockquote><pre><code>使用前：request： &lt;br/&gt;&lt;div&gt;    编号： &lt;label th:text=&quot;$&#123;user1.id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;$&#123;user1.username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;$&#123;user1.password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;session：&lt;br/&gt;&lt;div&gt;    编号： &lt;label th:text=&quot;$&#123;session.user2.id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;$&#123;session.user2.username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;$&#123;session.user2.password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;</code></pre><p>等用于：</p><pre><code>使用后： request： &lt;br/&gt;&lt;div th:object=&quot;$&#123;user1&#125;&quot;&gt;    编号： &lt;label th:text=&quot;*&#123;id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;*&#123;username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;*&#123;password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;session：&lt;br/&gt;&lt;div th:object=&quot;$&#123;session.user2&#125;&quot;&gt;    编号： &lt;label th:text=&quot;*&#123;id&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;    用户名：&lt;label th:text=&quot;*&#123;username&#125;&quot;&gt;&lt;/label&gt; &lt;br/&gt;    密码：&lt;label th:text=&quot;*&#123;password&#125;&quot;&gt;&lt;/label&gt;&lt;br/&gt;&lt;/div&gt;</code></pre><h4 id="2-5-…-消息表达式"><a href="#2-5-…-消息表达式" class="headerlink" title="2.5 #{…} 消息表达式"></a>2.5 #{…} 消息表达式</h4><p><strong>作用：就是用于对国际化功能的支持。所谓的国际化功能就是指，根据浏览器的编码，返回对应编码的内容的支持。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓动态添加Fragment如何获取Fragment中的控件</title>
      <link href="/posts/29712.html"/>
      <url>/posts/29712.html</url>
      
        <content type="html"><![CDATA[<h2 id="动态添加多个Fragment-获取Fragment控件并监听"><a href="#动态添加多个Fragment-获取Fragment控件并监听" class="headerlink" title="动态添加多个Fragment 获取Fragment控件并监听"></a>动态添加多个Fragment 获取Fragment控件并监听</h2><blockquote><p>动态添加fragment 获取fragment的解决思路<br>（<br>将所有fragment添加到activity中<br>必须在onCreate中初始化所有fragment<br>再在onStart中getView (否则空指针警告)<br>）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itach<span class="token punctuation">.</span>telegram<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span>app<span class="token punctuation">.</span>FragmentManager<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span>app<span class="token punctuation">.</span>FragmentTransaction<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>LinearLayout<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itach<span class="token punctuation">.</span>telegram<span class="token punctuation">.</span>LoginUi<span class="token punctuation">.</span>LoginFragment<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itach<span class="token punctuation">.</span>telegram<span class="token punctuation">.</span>LoginUi<span class="token punctuation">.</span>LoginedFragment<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Button login_btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button back_login_btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> Fragment loginFragment<span class="token punctuation">;</span>    <span class="token keyword">private</span> Fragment loginedFragment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在onCreate初始化Fragment</span>        loginFragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginedFragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginedFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将所有fragment添加到MainActivity中</span>        <span class="token function">addAllLoginFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initFragmentListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initFragmentListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在onStart中获取到所有fragment的控件</span>        login_btn <span class="token operator">=</span> loginFragment<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>login_btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        back_login_btn <span class="token operator">=</span> loginedFragment<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>back_login<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听fragmenet中控件的点击事件</span>        login_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        back_login_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将所有fragment添加到MainActivity中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAllLoginFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FragmentManager fragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FragmentTransaction transaction <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>login_body<span class="token punctuation">,</span>loginFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>login_body<span class="token punctuation">,</span>loginedFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 控制两个fragment的隐藏与显示</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FragmentManager fragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FragmentTransaction transaction <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>loginedFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>loginFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 控制两个fragment的隐藏与显示</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showLogined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FragmentManager fragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FragmentTransaction transaction <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>loginFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>loginedFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听点击事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>login_btn<span class="token operator">:</span>                <span class="token function">showLogined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>back_login<span class="token operator">:</span>                <span class="token function">showLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/../images/blogImg/Android/asFragment.gif"></p><h3 id="放假后更新布局代码以及其他java代码…"><a href="#放假后更新布局代码以及其他java代码…" class="headerlink" title="放假后更新布局代码以及其他java代码…"></a>放假后更新布局代码以及其他java代码…</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali学习之路</title>
      <link href="/posts/33001.html"/>
      <url>/posts/33001.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作与隐写"><a href="#文件操作与隐写" class="headerlink" title="文件操作与隐写"></a>文件操作与隐写</h1><h3 id="场景一：不知道文件的类型-x2F-没有显示文件后缀名"><a href="#场景一：不知道文件的类型-x2F-没有显示文件后缀名" class="headerlink" title="场景一：不知道文件的类型&#x2F;没有显示文件后缀名"></a>场景一：不知道文件的类型&#x2F;没有显示文件后缀名</h3><ul><li><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4></li></ul><p>file + 文件名 (kali输入)-用于识别文件类型</p><ul><li><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4></li></ul><p>winhex&#x2F;010-editor:可以通过文件头类型去识别&#x2F;判断文件</p><h3 id="场景2：文件头缺失-x2F-被修改，导致无法打开文件"><a href="#场景2：文件头缺失-x2F-被修改，导致无法打开文件" class="headerlink" title="场景2：文件头缺失&#x2F;被修改，导致无法打开文件"></a>场景2：文件头缺失&#x2F;被修改，导致无法打开文件</h3><ul><li><h4 id="方法1：winhex-x2F-010-editor将缺失的文件头添上-x2F-修改"><a href="#方法1：winhex-x2F-010-editor将缺失的文件头添上-x2F-修改" class="headerlink" title="方法1：winhex&#x2F;010-editor将缺失的文件头添上&#x2F;修改"></a>方法1：winhex&#x2F;010-editor将缺失的文件头添上&#x2F;修改</h4></li></ul><p>fireworks:用于gif图片，可以看出不同帧&#x2F;不同图层的内容</p><h3 id="场景3：一个文件中多个文件组成，需要进行分离"><a href="#场景3：一个文件中多个文件组成，需要进行分离" class="headerlink" title="场景3：一个文件中多个文件组成，需要进行分离"></a>场景3：一个文件中多个文件组成，需要进行分离</h3><blockquote><p>步骤一：<br>识别文件<br><br><br><b>方法：binwalk+文件名</b><br><br><br>(kali输入)</p></blockquote><blockquote><p>步骤二：分离文件<br><br><br><b>方法1：binwalk-e+文件名</b><br><br><br>比如：1.jpg<br>(生成一个1jpg.extracted目录，分离文件就在这个目录中)<br><br><br><b>方法2：foremost+文件名-o自定义目录名指定分离后的文件放置在33的目录下</b><br><br><br><b>方法3：ddf&#x3D;源文件of&#x3D;目标文件名bs&#x3D;块大小count&#x3D;块数量skip&#x3D;跳过<br>块数量（手动分离）</b></p></blockquote><h2 id="常见头文件"><a href="#常见头文件" class="headerlink" title="常见头文件"></a>常见头文件</h2><blockquote><p>47494638L</br><br>TIFF (tif)</br><br>49492A00</br><br>Windows Bitmap (bmp)</br><br>424DC001</br><br>ZIP Archive (zip)</br><br>504B0304</br><br>RAR Archive (rar)</br><br>52617221</br><br>Adobe Photoshop (psd)</br><br>38425053</br><br>Rich Text Format (rtf)</br><br>7B5C727466</br><br>XML (xml)</br><br>3C3F786D6C</br><br>HTML (html)</br><br>68746D6C3E</br><br>Adobe Acrobat (pdf)</br><br>255044462D312E</br><br>Wave (vav)</br><br>57415645</br><br>pcap (peap)</br><br>4D3C2B1A</br></p></blockquote><p><img src="/../images/blogImg/kaliStudy/head.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z-library访问教程</title>
      <link href="/posts/10813.html"/>
      <url>/posts/10813.html</url>
      
        <content type="html"><![CDATA[<h1 id="Z-library-Tor访问指南"><a href="#Z-library-Tor访问指南" class="headerlink" title="Z-library Tor访问指南"></a>Z-library Tor访问指南</h1><blockquote><p>通过洋葱网络(<code>tor链接</code>)访问Z-library</p></blockquote><p>Z-Library 又号称影子图书馆，他提供了使用Tor链接访问的方式</p><p>Z-Library临时下载方案：下载安装Tor，大陆用户需要设置Tor的代理服务器，如V2ray的本地代理端口，然后使用Tor访问下面的地址，登录原有Z-Library用户即可下载。</p><p>安装Tor浏览器，在地址栏中输入维基百科里Z-Library临时地址，即可打开Z-Library首页，然后登录自己原有用户，即可下载书籍。</p><h2 id="详细指南如下"><a href="#详细指南如下" class="headerlink" title="详细指南如下"></a>详细指南如下</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>到Tor官网下载Tor浏览器</p><blockquote><p>官网链接： <code>https://tor-browser.app/zh-CN/index.html</code></p></blockquote><blockquote><p>备用下载地址: <code>https://nas.iaimi.cn/s/aSpeD8psqQTAa66</code></p></blockquote><pre><code>https://nas.iaimi.cn/s/aSpeD8psqQTAa66</code></pre><p>安装好打开</p><p>按照步骤配置好网络连接</p><p><img src="/../images/blogImg/zlib/2022-11-06%20212044.png"></p><p><img src="/../images/blogImg/zlib/2022-11-06%20212106.png"></p><p>特殊网络环境可能需要配置代理 如无VPN可前往本站之前的<strong>SakuraCat使用教程</strong><br><img src="/../images/blogImg/zlib/2022-11-06-212114.png"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>通过Tor链接访问Z-library</p><p>1. </p><blockquote><p>zlibrary​24tuxziyiyfr7​zd46ytefdqbqd2axkmxm​4o5374ptpc52fad.onion<br>2.<br>bookszlibb74ugqojhzhg2​a63w5i2atv5bqarulgcz​awnbmsb6s6qead.onion</p></blockquote><pre><code>zlibrary​24tuxziyiyfr7​zd46ytefdqbqd2axkmxm​4o5374ptpc52fad.onion</code></pre><p>复制链接在tor浏览器中访问</p><p><img src="/../images/blogImg/zlib/2022-11-06%20214823.png"></p><p><img src="/../images/blogImg/zlib/2022-11-06%20212954.png"></p><blockquote><p>维基百科： <a href="https://zh.wikipedia.org/wiki/Z-Library">https://zh.wikipedia.org/wiki/Z-Library</a></p></blockquote><h2 id="为什么需要此教程"><a href="#为什么需要此教程" class="headerlink" title="为什么需要此教程"></a>为什么需要此教程</h2><blockquote><p>很遗憾，最大的电子书网站近期被FBI封禁了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 黑域 </tag>
            
            <tag> Black field </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sakura-Cat樱花猫食用指南</title>
      <link href="/posts/23115.html"/>
      <url>/posts/23115.html</url>
      
        <content type="html"><![CDATA[<h1 id="SakuraCat-樱花猫使用教程"><a href="#SakuraCat-樱花猫使用教程" class="headerlink" title="SakuraCat 樱花猫使用教程"></a>SakuraCat 樱花猫使用教程</h1><!-- ![主页面](../images/blogImg/sakura-cat/homePage.png) --><h3 id="注册URL如下："><a href="#注册URL如下：" class="headerlink" title="注册URL如下："></a><strong>注册URL如下：</strong></h3><pre class=" language-copy"><code class="language-copy">https://sakuracat.world/#/register?code=7GzZRxtV</code></pre><blockquote><p>如无法访问请尝试以下备用地址：</p></blockquote><pre class=" language-copy"><code class="language-copy">https://sakuracat.link/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakuracat.club/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakura-cat.net/#/register?code=7GzZRxtV</code></pre><pre class=" language-copy"><code class="language-copy">https://sakuracat.one/#/register?code=7GzZRxtV</code></pre><blockquote><p><strong>Tips:</strong>  如无法访问，请尝试更换网络环境，尝试刷新页面。</p></blockquote><h2 id="注册步骤"><a href="#注册步骤" class="headerlink" title="注册步骤"></a>注册步骤</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><code>注册账号：</code>填入邮箱地址，获取邮箱验证码后填入，设置密码，注册完成</p><blockquote><p>如果未收到邮件，请查看垃圾信箱</p></blockquote><p><img src="/../images/blogImg/sakura-cat/regist.png"></p><h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>登录并查看使用文档，下载对应的客户端<code>推荐使用第三方客户端</code>（官方客户端存在登录不上问题<code>因网络环境</code>）</p><h3 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h3><p>购买订阅后，参照文档导入订阅链接更新订阅</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="为什么推荐"><a href="#为什么推荐" class="headerlink" title="为什么推荐"></a>为什么推荐</h3><p>✨SakuraCat✨ 是一个<code>不打广告</code>的网络加速小铺🚀</p><p>仅仅通过朋友间的分享来增加新用户</p><p>关于SakuraCat：</p><blockquote><p>我们精选的高速节点，帮助用户省去了反复选择节点的步骤，操作更加简洁，到手就能用！并且我们承诺保障节点质量，采用分期销售的方式，保证每个节点都不会超售，从而为用户提供稳定高速加速服务！</p></blockquote><h4 id="节点丰富速度稳定"><a href="#节点丰富速度稳定" class="headerlink" title="节点丰富速度稳定"></a>节点丰富速度稳定</h4><p>实测<code>8.8r套餐</code>能稳定观看4K视频</p><h4 id="价格实惠"><a href="#价格实惠" class="headerlink" title="价格实惠"></a><strong>价格实惠</strong></h4><blockquote><p>拥有多个月付套餐以及<code>不限时永久定量套餐</code></p></blockquote><blockquote><p>适合学生党轻度上网，以及观看4k视频</p></blockquote><!-- ![](../images/blogImg/sakura-cat/2022-11-06%20203209.png) --><!-- ![](../images/blogImg/sakura-cat/2022-11-06%20203237.png) --><h4 id="文档详细"><a href="#文档详细" class="headerlink" title="文档详细"></a>文档详细</h4><p><img src="/../images/blogImg/sakura-cat/2022-11-06%20203620.png"></p><h3 id="链接失效请在下方留言板附带邮箱地址留言看到后第一时间回复"><a href="#链接失效请在下方留言板附带邮箱地址留言看到后第一时间回复" class="headerlink" title="链接失效请在下方留言板附带邮箱地址留言看到后第一时间回复"></a>链接失效请在下方留言板附带邮箱地址留言看到后第一时间回复</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> sakura </tag>
            
            <tag> cat </tag>
            
            <tag> 加速 </tag>
            
            <tag> 订阅 </tag>
            
            <tag> 客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode做题之路</title>
      <link href="/posts/18998.html"/>
      <url>/posts/18998.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode刷题之路"><a href="#leetcode刷题之路" class="headerlink" title="leetcode刷题之路"></a>leetcode刷题之路</h1><h2 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a>904. 水果成篮</h2><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。<br>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：<br>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p><blockquote><p>动窗口，维护left和right，每次取两个数作为基准，right向右滑动 ··如果fruits[right]不是其中的就更新新的数为基准将left直接移动到right前面一格，然后再向前找left相等的最前面的定位left。 ··如果fruits[right]是其中的就更新res</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">totalFruit</span><span class="token punctuation">(</span>fruits <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cnt <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    left <span class="token operator">:=</span> <span class="token number">0</span>    res <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> right<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> fruits <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            y <span class="token operator">:=</span> fruits<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">--</span>            <span class="token keyword">if</span> cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">delete</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            left<span class="token operator">++</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">MAX</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[前端开发学习之路]实现js轮播图</title>
      <link href="/posts/62678.html"/>
      <url>/posts/62678.html</url>
      
        <content type="html"><![CDATA[<h1 id="js轮播图"><a href="#js轮播图" class="headerlink" title="js轮播图"></a>js轮播图</h1><p>很简单的入门前端实践</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/jpg<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img/favicon.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MyHoney<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #banner&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #imglist&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #imglist img&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #imglist li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        <span class="token number">.</span>prev&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        <span class="token number">.</span>next&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #icolist&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #icolist li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">2.5</span>px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        body&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFE4B5</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #bg&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        h<span class="token number">2</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF82AB</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        #kawayi&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFBBFF</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是我的宝贝女朋友<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>banner<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imglist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/cqy1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/cqy2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/cqy3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/cqy4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/cqy1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icolist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>《<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kawayi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>她没有失踪 只是觉得她很可爱 想让大家认识一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> eprev <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> enext <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> esico <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'icolist'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> eicolist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#icolist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> eimglist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#imglist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timer<span class="token punctuation">;</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">1600</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span>left <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// m 为小圆点的index</span>            imglist<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加变量n 滚完一张照片停1200毫秒</span>            <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1200</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">;</span>            left <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">icoChange</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将对应小圆点变红</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 图片定位函数</span>        <span class="token keyword">function</span> <span class="token function">imgChange</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> lt <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imglist<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> lt <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> lt<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        eprev<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> prevgo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span>left <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prevgo <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                prevgo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">imgChange</span><span class="token punctuation">(</span>prevgo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        enext<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> nextgo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span>left <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextgo <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nextgo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">imgChange</span><span class="token punctuation">(</span>nextgo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">icoChange</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> esico<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                esico<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> esico<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                esico<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        eicolist<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> tg <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>            <span class="token keyword">let</span> ico <span class="token operator">=</span> tg<span class="token punctuation">.</span>innerHTML <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">imgChange</span><span class="token punctuation">(</span>ico<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">icoChange</span><span class="token punctuation">(</span>ico<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        eimglist<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        eimglist<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公益性Minecraft Java版1.18.2纯净生存食用指南</title>
      <link href="/posts/138.html"/>
      <url>/posts/138.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过前几次失败，积累到了宝贵的经验。从多方面考虑，这种线上的多人联机沙盒还是回归到纯净生存比较符合minecraft的本质(休闲、温馨、愉快、友好)。  </p><p>建这个<code>1.18.2纯净服</code>的初衷就是希望大家在工作生活之余能<code>上线唠唠嗑</code>，在<code>游戏中能收获友谊、成就感</code>。</p><p>不希望，也不提倡<code>冷暴力</code>、<code>网络攻击他人</code>。如果只是<code>追求成就的达成，速通之类的</code>，那么请绕路，这里<code>不适合你</code>。</p><p>本服务器只有唯一一个OP(本人),不存在权限狗，并且忙于各种琐事，上线时间注定不长，</p><p>请牢记一点：玩游戏是为了开心，<code>但是你的开心不是建立在贬低/恶心他人之上</code></p><hr><h1 id="服务器详细说明："><a href="#服务器详细说明：" class="headerlink" title="服务器详细说明："></a>服务器详细说明：</h1><h2 id="服务器地址："><a href="#服务器地址：" class="headerlink" title="服务器地址："></a>服务器地址：</h2><pre><code>mc.aisakataiga.cn</code></pre><h2 id="服务器介绍"><a href="#服务器介绍" class="headerlink" title="服务器介绍"></a>服务器介绍</h2><p>服务器是搭建在一台百度云(2G4C6M)</p><p>采用的是Java版1.18.2-Forge40.1.0服务端</p><pre><code>Q: 为什么不采用Fabric服务端A: Fabric我也测试过，但是总觉得对于一些模组的兼容性没有Forge来的好(不是很流畅)，可惜了一些在Fabric上才有的效能模组和投影模组</code></pre><p>使用的光影:</p><p><a href="https://www.aliyundrive.com/s/Y7Le2Y6zPaB">下载地址：https://www.aliyundrive.com/s/Y7Le2Y6zPaB</a></p><pre><code>ComplementaryReimagined_r1.0</code></pre><p>使用的材质包:</p><p><a href="https://www.aliyundrive.com/s/hCF5tvRt6ZM">下载地址：https://www.aliyundrive.com/s/hCF5tvRt6ZM</a></p><pre><code>Yuushya Foliage Addon 1.1彩虹像素☆细节扩展包彩虹像素RainbowPixel_☆v2.5奶油萌块v1.5  (备选)</code></pre><p>使用的辅助性模组:</p><p><a href="https://www.aliyundrive.com/s/q11X2E9DhuD">下载地址：https://www.aliyundrive.com/s/q11X2E9DhuD</a></p><pre><code>[JEI附魔信息] JEIEnchantmentInfo-1.17.1-2.0.0[JEI扩展] jeiintegration_1.18.2-9.0.0.37[JEI物品管理器] jei-1.18.2-forge-10.1.0.208[Xaero的世界地图] XaerosWorldMap_1.23.3_Forge_1.18.2[Xaero的小地图] Xaeros_Minimap_22.9.3_Forge_1.18.2[更好的进度] BetterAdvancements-1.18.2-0.2.1.132[简单的语音聊天] voicechat-forge-1.18.2-2.2.45[建筑之杖] constructionwand-1.18.2-2.7[经验机制改革] Clumps-forge-1.18.2-8.0.0+10[镁：动态光源] dynamiclightsreforged-1.18.2_v1.3.3[水产养殖2] Aquaculture-1.18.2-2.3.7[一键背包整理Next] InventoryProfilesNext-forge-1.18.2-1.5.3whats-that-slot-forge-1.2.3+1.18.1</code></pre><p>测试截图:</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-06-28-140419.png"></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-06-28-132951.png"></p><hr><h2 id="开始游玩"><a href="#开始游玩" class="headerlink" title="开始游玩"></a>开始游玩</h2><p><strong>注意：以下所有下载地址使用的是阿里云盘，由于限制，不能分享压缩包，所以所有的压缩包都转成了<code>.exe自解程序</code></strong></p><h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h3><p>Java版是需要安装JDK的，不过不用担心，这很简单</p><h4 id="1-首先下载JDK18"><a href="#1-首先下载JDK18" class="headerlink" title="1. 首先下载JDK18"></a>1. 首先下载JDK18</h4><p><a href="https://www.aliyundrive.com/s/psZPoq8FLtc">下载地址：https://www.aliyundrive.com/s/psZPoq8FLtc</a></p><p>或者前往Oracle下载： <a href="https://www.oracle.com/java/technologies/downloads/#jdk18-windows">https://www.oracle.com/java/technologies/downloads/#jdk18-windows</a></p><h4 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2. 安装JDK"></a>2. 安装JDK</h4><p>执行下载下来的JDK安装程序无脑下一步安装</p><p>安装的路径稍微记一下，稍后会用到</p><p><strong>注意:路径可以选择C盘以外的磁盘</strong></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130321.png"></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130345.png"></p><h4 id="3-给JDK配置环境变量"><a href="#3-给JDK配置环境变量" class="headerlink" title="3. 给JDK配置环境变量"></a>3. 给JDK配置环境变量</h4><p>1）在win10中的搜索栏中搜索<code>环境变量</code>，打开编辑系统环境变量(实在不懂打开请百度)</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130744.png"></p><p>2）打开环境变量</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130808.png"></p><p>3）在系统变量一栏新建一个JAVA_HOME的变量，变量值就是你的安装路径</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130926.png"></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-130949.png"></p><p>4）编辑系统变量path，点击新建，输入%JAVA_HOME%bin确定即可</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-131013.png"></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-131056.png"></p><p>5）测试是否成功安装JDK18</p><p>win + R 打开启动，键入cmd，打开cmd输入<code>java -version</code>,查看是否有正常输出版本信息，则配置环境变量成功。</p><p>如未正常显示版本信息，请检查是否配置环境变量失误</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-131119.png"></p><h5 id="参考文章：-https-blog-csdn-net-sebeefe-article-details-124121294"><a href="#参考文章：-https-blog-csdn-net-sebeefe-article-details-124121294" class="headerlink" title="参考文章： https://blog.csdn.net/sebeefe/article/details/124121294"></a>参考文章： <a href="https://blog.csdn.net/sebeefe/article/details/124121294">https://blog.csdn.net/sebeefe/article/details/124121294</a></h5><h4 id="4-下载PCL2启动器"><a href="#4-下载PCL2启动器" class="headerlink" title="4. 下载PCL2启动器"></a>4. 下载PCL2启动器</h4><p>java版mc是需要启动器的，使用第三方启动器并不（必要）需要购买正版。</p><p><a href="https://www.aliyundrive.com/s/ZYwTJPxN3WT">下载地址（包含游戏文件无需手动配置）: 「minecraftShareV1.18.2.exe」https://www.aliyundrive.com/s/ZYwTJPxN3WT</a></p><p>如已经拥有PCL2，可以单独下载版本游戏文件放置于<code>\.minecraft\versions</code>目录即可</p><p><a href="https://www.aliyundrive.com/s/KqEhZYCAmxD">下载地址： 「1.18.2-Forge_40.1.0-OptiFine_H7.exe」https://www.aliyundrive.com/s/KqEhZYCAmxD</a></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-132932.png"></p><p>没有PCL2直接下载第一个<code>minecraftShareV1.18.2.exe</code>双击解包后运行<code>Plain Craft Launcher 2.exe</code>即可</p><p><strong>注意：不要随便移动目录中的文件，如需在桌面启动请创建快捷方式，或者右击固定到开始屏幕</strong></p><p>解压后的目录结构：</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-133300.png"></p><h4 id="5-开始游玩"><a href="#5-开始游玩" class="headerlink" title="5. 开始游玩"></a>5. 开始游玩</h4><p>检查PCL2启动器的设置，<code>请确保JDK版本正确选择，以及开启版本隔离</code></p><p>这里给出一张图作为参考：</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-112849.png"></p><p>启动后如有提示mod更新请选择否</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-134126.png"></p><h2 id="关于无线通话-简单的语音聊天-voicechat-forge-1-18-2-2-2-45"><a href="#关于无线通话-简单的语音聊天-voicechat-forge-1-18-2-2-2-45" class="headerlink" title="关于无线通话 [简单的语音聊天] voicechat-forge-1.18.2-2.2.45"></a>关于无线通话 <code>[简单的语音聊天] voicechat-forge-1.18.2-2.2.45</code></h2><p>需要在材质包中启用模组有关的材质，才能显示图标</p><p>游戏内语音通话的按键配置：</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-06-28-135208.png"></p><p><code>注意：麦克风静音可能与地图模组的键位产生冲突，请前往**控制**/**按键绑定**更改相应模组的键位</code></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-135420.png"></p><h2 id="一些光影包、材质包的配置"><a href="#一些光影包、材质包的配置" class="headerlink" title="一些光影包、材质包的配置"></a>一些光影包、材质包的配置</h2><p>请将语音通话的材质包启用（否则无法看见语音图标）</p><p>材质包的优先级为从上到下是高优先级到低</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-134326.png"></p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-134354.png"></p><p>光影包的相关设置是在视频设置内（如帧数过低请手动调整光影等级）</p><p><img src="https://iaimi.cn/images/2022/07/01/2022-07-01-134416.png"></p><h2 id="以上如此解释"><a href="#以上如此解释" class="headerlink" title="以上如此解释"></a>以上如此解释</h2><p>如有疑问可以积极提问，只要是抱着问题来的，能力范围内的我都非常乐意解答</p>]]></content>
      
      
      
        <tags>
            
            <tag> MC </tag>
            
            <tag> 自建服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moe counter!</title>
      <link href="/posts/22140.html"/>
      <url>/posts/22140.html</url>
      
        <content type="html"><![CDATA[<h1 id="一个萌萌的计时器"><a href="#一个萌萌的计时器" class="headerlink" title="一个萌萌的计时器"></a>一个萌萌的计时器</h1><h2 id=""><a href="#" class="headerlink" title=""></a><a href="https://count.getloli.com/"><img src="https://img.shields.io/badge/Moe-Counter-FFF121"></a><a href="https://github.com/journey-ad/Moe-counter"><img src="https://img.shields.io/badge/github-Moecounter-00FF9F"></a></h2><p><a href="https://count.getloli.com/get/@Kirino?theme=gelbooru"><img src="https://count.getloli.com/get/@Kirino?theme=gelbooru"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> share </tag>
            
            <tag> おもしろい </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github_Notes</title>
      <link href="/posts/37503.html"/>
      <url>/posts/37503.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习github编程的初衷时能接触到目前主流的新技术，并且在未来能对此做出贡献。<br><img src="/../images/cover/107717428_p0_master1200.jpg">    </p><hr><h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><h2 id="git-init-—-初始化仓库"><a href="#git-init-—-初始化仓库" class="headerlink" title="git init — 初始化仓库"></a>git init — 初始化仓库</h2><p>进行版本管理<br>需要实际建立一个目录并初始化仓库<br>这个目录一般称为工作树  </p><h2 id="git-status-—-查看仓库的状态"><a href="#git-status-—-查看仓库的状态" class="headerlink" title="git status — 查看仓库的状态"></a>git status — 查看仓库的状态</h2><h2 id="git-add-—-向暂存区中添加文件"><a href="#git-add-—-向暂存区中添加文件" class="headerlink" title="git add — 向暂存区中添加文件"></a>git add — 向暂存区中添加文件</h2><p>要想让文件成为Git仓库的管理对象，就需要用git add 命令将其加入暂存区。<br>暂存区是提交之前的一个临时区域  </p><h2 id="git-commit-—-保存仓库的历史纪录"><a href="#git-commit-—-保存仓库的历史纪录" class="headerlink" title="git commit — 保存仓库的历史纪录"></a>git commit — 保存仓库的历史纪录</h2><ul><li><h3 id="记述一行提交信息"><a href="#记述一行提交信息" class="headerlink" title="记述一行提交信息"></a>记述一行提交信息</h3></li></ul><pre><code>$git commit -m &quot;First commit&quot;  </code></pre><p>-m 后面的 <code>&quot;First commit&quot;</code>称作提交信息，是对这个提交的概述  </p><ul><li><h3 id="记述详细提交信息"><a href="#记述详细提交信息" class="headerlink" title="记述详细提交信息"></a>记述详细提交信息</h3></li></ul><p>不加 -m ，直接执行 git commit </p><pre><code>$git commit </code></pre><p>执行后编辑器就会启动  </p><p>在编译器中记述提交信息的格式如下。<br>    - 第一行：用一行文字简述提交的更改内容<br>    - 第二行：空行<br>    - 第三行以后：记述更改的原因和详细内容  </p><h4 id="vi文件编辑命令"><a href="#vi文件编辑命令" class="headerlink" title="vi文件编辑命令 "></a><a href="https://blog.csdn.net/zimao_/article/details/109132471">vi文件编辑命令 </a></h4><pre><code>- v --- 插入模式  - esc --- 退出  - dd --- 删除光标所在行  - yy --- 复制当前行  - #yy --- 复制从光标处开始的若干行  - P --- 粘贴到光标处前，这一行    - p --- 粘贴到光标处后，下一行    - :wq --- 保存并关闭  - :q --- 退出  - :q！ --- 强制退出   </code></pre><ul><li><h3 id="终止提交"><a href="#终止提交" class="headerlink" title="终止提交"></a>终止提交</h3></li></ul><p>留空保存即可  </p><h2 id="git-push-—-push到Git仓库"><a href="#git-push-—-push到Git仓库" class="headerlink" title="git push — push到Git仓库"></a>git push — push到Git仓库</h2><h2 id="git-log-—-查看提交日志"><a href="#git-log-—-查看提交日志" class="headerlink" title="git log — 查看提交日志"></a>git log — 查看提交日志</h2><p>查看仓库提交或者合并，以及操作前后又怎样的差别  </p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> logcommit 7cde66287340cff7185abf02d078762e3e582725 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> main, origin/main<span class="token punctuation">)</span>Author: Kirino <span class="token operator">&lt;</span>541982545@qq.com<span class="token operator">></span>Date:   Wed Apr 13 16:07:39 2022 +0800    Second commit    Test commit to Git Storecommit ff90974ef7da534f3d3d507a507745a307a94868Author: Kirino <span class="token operator">&lt;</span>541982545@qq.com<span class="token operator">></span>Date:   Wed Apr 13 15:40:51 2022 +0800    Add hello world script by phpcommit 17c60fa1141c629102661d6313cb73f231e08c90Author: Kirino <span class="token operator">&lt;</span>541982545@qq.com<span class="token operator">></span>Date:   Wed Apr 13 15:33:36 2022 +0800    first commit</code></pre><p>commit栏旁边显示的<code>7cde66...</code>指的是这个提交的哈希值，git的其他命令会用到这个哈希值  </p><h3 id="只显示提交信息的第一行"><a href="#只显示提交信息的第一行" class="headerlink" title="只显示提交信息的第一行"></a>只显示提交信息的第一行</h3><p>如果只想显示第一行简述信息，可以加 <code>--pretty=short</code>  </p><pre><code>$ git log --pretty=shortcommit 7cde66287340cff7185abf02d078762e3e582725 (HEAD -&gt; main, origin/main)Author: Kirino &lt;541982545@qq.com&gt;    Second commitcommit ff90974ef7da534f3d3d507a507745a307a94868Author: Kirino &lt;541982545@qq.com&gt;    Add hello world script by phpcommit 17c60fa1141c629102661d6313cb73f231e08c90Author: Kirino &lt;541982545@qq.com&gt;    first commit</code></pre><h3 id="只显示指定目录、文件的日志"><a href="#只显示指定目录、文件的日志" class="headerlink" title="只显示指定目录、文件的日志"></a>只显示指定目录、文件的日志</h3><p>在 git log 命令后加上目录名，便会只显示该目录下的日志。（文件亦是如此）  </p><pre><code>$ git log README.mdcommit 7cde66287340cff7185abf02d078762e3e582725 (HEAD -&gt; main, origin/main)Author: Kirino &lt;541982545@qq.com&gt;Date:   Wed Apr 13 16:07:39 2022 +0800    Second commit    Test commit to Git Storecommit 17c60fa1141c629102661d6313cb73f231e08c90Author: Kirino &lt;541982545@qq.com&gt;Date:   Wed Apr 13 15:33:36 2022 +0800    first commit</code></pre><h3 id="显示文件的改动"><a href="#显示文件的改动" class="headerlink" title="显示文件的改动"></a>显示文件的改动</h3><p>查看提交所带来的改动<br>加上<code>-p</code>参数</p><pre><code>$ git log -pcommit 7cde66287340cff7185abf02d078762e3e582725 (HEAD -&gt; main, origin/main)Author: Kirino &lt;541982545@qq.com&gt;Date:   Wed Apr 13 16:07:39 2022 +0800    Second commit    Test commit to Git Storediff --git a/README.md b/README.mdindex e9168db..80898e7 100644--- a/README.md+++ b/README.md@@ -1 +1,3 @@-# Hello World\ No newline at end of file+# Hello World++## T1\ No newline at end of file</code></pre><p>只查看<code>README.md</code>文件的提交日志以及提交的前后差别  </p><pre><code>$ git log -p README.md</code></pre><h2 id="git-diff-—-查看更改前后的差别"><a href="#git-diff-—-查看更改前后的差别" class="headerlink" title="git diff — 查看更改前后的差别"></a>git diff — 查看更改前后的差别</h2><h3 id="查看工作树和暂存区的区别"><a href="#查看工作树和暂存区的区别" class="headerlink" title="查看工作树和暂存区的区别"></a>查看工作树和暂存区的区别</h3><p>执行<code>git diff</code>命令，查看当前工作树与暂存区的差别  </p><pre><code>$ git diffdiff --git a/README.md b/README.mdindex 80898e7..e8ba8b5 100644--- a/README.md+++ b/README.md@@ -1,3 +1,4 @@ # Hello World-## T1\ No newline at end of file+## T1+write something\ No newline at end of file</code></pre><p>由于没有使用<code>git add</code>命令向暂存区添加任何东西<br>所以程序只会显示工作树与最新提交状态之间的差别   </p><h3 id="查看工作树和最新提交的差别"><a href="#查看工作树和最新提交的差别" class="headerlink" title="查看工作树和最新提交的差别"></a>查看工作树和最新提交的差别</h3><p>用git add 命令将README.md文件加入暂存区  </p><pre><code>$ git add README.md</code></pre><p>如果现在执行git diff命令、由于工作树和暂存区的状态并无差别，结果什么都不会显示。<br>要查看与最新提交的差别，请执行以下命令。  </p><pre><code>$ git diff HEADdiff --git a/README.md b/README.mdindex 80898e7..e8ba8b5 100644--- a/README.md+++ b/README.md@@ -1,3 +1,4 @@ # Hello World-## T1\ No newline at end of file+## T1+write something\ No newline at end of file</code></pre><p>应养成在执行git commit命令之前先执行git diff HEAD命令，查看本次提交与上次提交之间有什么差别。  </p><pre><code>$ git commit -m &quot;Add content&quot;[main ac781f6] Add content 1 file changed, 2 insertions(+), 1 deletion(-)$ git logcommit ac781f6adb641c856a921f342a4c86f29feca8fd (HEAD -&gt; main)Author: Kirino &lt;541982545@qq.com&gt;Date:   Wed Apr 13 18:53:32 2022 +0800    Add content</code></pre><h1 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h1><p>特点：<br>    master分支时Git默认创建的分支<br>    多个并行作业 存在多个最新代码状态<br>    各个分支开发完后合并到master分支<br>    实现：<br>    让多人同时高效地进行开发  </p><h2 id="git-branch-—-显示分支一览表"><a href="#git-branch-—-显示分支一览表" class="headerlink" title="git branch — 显示分支一览表"></a>git branch — 显示分支一览表</h2><pre><code>$ git branch* main</code></pre><p>这里的main是github推荐初始化的名字正常情况下应该是master<br><img src="https://iaimi.cn/images/2022/04/13/2022-04-13-190347.png">  </p><pre><code>$ git branch* master</code></pre><p>默认主分支应该是master<br>星号(<code>*</code>)表示我们在当前分支进行开发<br>这里暂时只存在一个分支<code>main(master)</code>  </p><h2 id="git-checkout-b-—-创建、切换分支"><a href="#git-checkout-b-—-创建、切换分支" class="headerlink" title="git checkout -b — 创建、切换分支"></a>git checkout -b — 创建、切换分支</h2><h3 id="切换到-feature-A-分支并进行提交"><a href="#切换到-feature-A-分支并进行提交" class="headerlink" title="切换到 feature-A 分支并进行提交"></a>切换到 feature-A 分支并进行提交</h3><p>创建名为 feature-A 的分支。</p><pre><code>$ git checkout -b feature-ASwitched to a new branch &#39;feature-A&#39;</code></pre><p>或者连续执行下面两条指令也可  </p><pre><code>$ git branch feature-A$ git checkout feature-A</code></pre><p>创建feature-A分支并切换到feature-A分支。<br>查看分支列表  </p><pre><code>$ git branch* feature-A  main</code></pre><p>培育分支:<br>    在feature-A分支下正常开发修改代码，执行git add命令并进行提交(push)的话，代码就会提交至feature-A分支。<br>    像这样进行提交的操作，称为“培育分支”  </p><pre><code>$ git add README.md$ git commit -m &quot;Add feature-A&quot;[feature-A a0b67c1] Add feature-A 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre><p>push以后就添加到了feature-A分支了<br>注意:<br>    这里push需要注意设置上游分支结点  </p><pre><code>$ git push origin main feature-AEnter passphrase for key &#39;/c/Users/Hongyi/.ssh/id_rsa&#39;:Enumerating objects: 5, done.Counting objects: 100% (5/5), done.Delta compression using up to 16 threadsCompressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 327 bytes | 327.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0remote:remote: Create a pull request for &#39;feature-A&#39; on GitHub by visiting:remote:      https://github.com/OneSidePass/Hello-World/pull/new/feature-Aremote:To github.com:OneSidePass/Hello-World.git * [new branch]      feature-A -&gt; feature-A</code></pre><h3 id="切换到-master-分支"><a href="#切换到-master-分支" class="headerlink" title="切换到 master 分支"></a>切换到 master 分支</h3><p>回到main(master)分支，master分支并未受到影响<br>切换到master分支  </p><pre><code>$ git checkout mainSwitched to branch &#39;main&#39;Your branch is up to date with &#39;origin/main&#39;.</code></pre><h3 id="切换回上一个分支"><a href="#切换回上一个分支" class="headerlink" title="切换回上一个分支"></a>切换回上一个分支</h3><pre><code>$git checkout -# 或者  $git checkout feature-A</code></pre><h2 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h2><p>是集中实现单一特性(主题),除此之外不进行任何作业的分支<br>在日常开发中，往往会创建数个特性分支，同时在此之外再保留一个随时可以发布软件的稳定分支。稳定分支的角色通常由master分支担任  </p><p>开发过程中发现BUG，也需要再创建新的分支，在新的分支中进行修正。  </p><p>基于特定主题的作业在特性分支中进行，主题完成后再与master分支合并。只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者 也可以放心大胆地从master分支创建新的特性分支。  </p><h2 id="主干分支"><a href="#主干分支" class="headerlink" title="主干分支"></a>主干分支</h2><p>主干分支是特性分支的原点，同时也是合并的终点<br>特点:   </p><ul><li>是特性分支的原点  </li><li>合并的终点  </li><li>没有开发到一半的代码  </li><li>通常是main(master)  </li><li>拥有多个发布版本时，主干分支通常也有多个</li></ul><h2 id="git-merge-—-合并分支"><a href="#git-merge-—-合并分支" class="headerlink" title="git merge — 合并分支"></a>git merge — 合并分支</h2><p>想要将feature-A合并到主干分支master中。<br>首先切换到master(main)分支。  </p><pre><code>$ git checkout mainSwitched to branch &#39;main&#39;Your branch is up to date with &#39;origin/main&#39;.</code></pre><p>然后合并分支<br>为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交。<br>因此，在合并时加上 <code>--no-ff</code>参数。<br>随后编译器会启动，用于录入合并提交的信息。<br>默认信息中已经包含了是从feature-A分支合并过来的相关内容，所以可以不必做任何修改。将编译器显示的内容保存关闭。  </p><pre><code>$ git merge --no-ff feature-AMerge made by the &#39;recursive&#39; strategy. README.md | 3 ++- 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre><h2 id="git-log-–graph-—-以图表形式查看分支"><a href="#git-log-–graph-—-以图表形式查看分支" class="headerlink" title="git log –graph — 以图表形式查看分支"></a>git log –graph — 以图表形式查看分支</h2><pre><code>$ git log --graph*   commit 08415098d22fd1cb2ed99069eae6279a4848b53f (HEAD -&gt; main, origin/main)|\  Merge: ac781f6 a0b67c1| | Author: Kirino &lt;541982545@qq.com&gt;| | Date:   Wed Apr 13 20:23:45 2022 +0800| || |     Merge branch &#39;feature-A&#39;| || * commit a0b67c1a69c109d62c9990b56a6c25d0a9bb595a (origin/feature-A, feature-A)|/  Author: Kirino &lt;541982545@qq.com&gt;|   Date:   Wed Apr 13 19:24:39 2022 +0800||       Add feature-A|* commit ac781f6adb641c856a921f342a4c86f29feca8fd| Author: Kirino &lt;541982545@qq.com&gt;| Date:   Wed Apr 13 18:53:32 2022 +0800||     Add content|* commit 7cde66287340cff7185abf02d078762e3e582725| Author: Kirino &lt;541982545@qq.com&gt;| Date:   Wed Apr 13 16:07:39 2022 +0800||     Second commit||     Test commit to Git Store|* commit ff90974ef7da534f3d3d507a507745a307a94868| Author: Kirino &lt;541982545@qq.com&gt;| Date:   Wed Apr 13 15:40:51 2022 +0800||     Add hello world script by php|* commit 17c60fa1141c629102661d6313cb73f231e08c90  Author: Kirino &lt;541982545@qq.com&gt;</code></pre><h1 id="更改提交的操作"><a href="#更改提交的操作" class="headerlink" title="更改提交的操作"></a>更改提交的操作</h1><h2 id="git-reset-—-回溯历史版本"><a href="#git-reset-—-回溯历史版本" class="headerlink" title="git reset — 回溯历史版本"></a>git reset — 回溯历史版本</h2><h3 id="回溯到feature-A创建之前的状态"><a href="#回溯到feature-A创建之前的状态" class="headerlink" title="回溯到feature-A创建之前的状态"></a>回溯到feature-A创建之前的状态</h3><pre><code>$ git reset --hard ac781f6adb641c856a921f342a4c86f29feca8fdHEAD is now at ac781f6 Add content</code></pre><h3 id="创建-fix-B-分支"><a href="#创建-fix-B-分支" class="headerlink" title="创建 fix-B 分支"></a>创建 fix-B 分支</h3><pre><code>$ git checkout -b fix-BSwitched to a new branch &#39;fix-B&#39;</code></pre><p>然后提交 README.md 文件   </p><pre><code>$ git add README.md$ git commit -m &quot;Fix B&quot;[fix-B 5a75383] Fix B 1 file changed, 3 insertions(+), 1 deletion(-)</code></pre><h3 id="推进至-feature-A-分支合并后的状态"><a href="#推进至-feature-A-分支合并后的状态" class="headerlink" title="推进至 feature-A 分支合并后的状态"></a>推进至 feature-A 分支合并后的状态</h3><p><code>git reflog</code>命令 查看当前仓库的操作日志。<br>在日志中找出回溯历史之前的哈希值，通过<code>git reset --hard</code>恢复到回溯之前   </p><pre><code>$ git reflog5a75383 (HEAD -&gt; fix-B) HEAD@&#123;0&#125;: commit: Fix Bac781f6 (main) HEAD@&#123;1&#125;: checkout: moving from main to fix-Bac781f6 (main) HEAD@&#123;2&#125;: reset: moving to ac781f6adb641c856a921f342a4c86f29feca8fdbade3c3 (origin/main) HEAD@&#123;3&#125;: commit: One test0841509 HEAD@&#123;4&#125;: merge feature-A: Merge made by the &#39;recursive&#39; strategy.ac781f6 (main) HEAD@&#123;5&#125;: checkout: moving from feature-A to maina0b67c1 (origin/feature-A, feature-A) HEAD@&#123;6&#125;: checkout: moving from main to feature-Aac781f6 (main) HEAD@&#123;7&#125;: checkout: moving from feature-A to maina0b67c1 (origin/feature-A, feature-A) HEAD@&#123;8&#125;: checkout: moving from main to feature-Aac781f6 (main) HEAD@&#123;9&#125;: checkout: moving from feature-A to maina0b67c1 (origin/feature-A, feature-A) HEAD@&#123;10&#125;: checkout: moving from main to feature-Aac781f6 (main) HEAD@&#123;11&#125;: checkout: moving from feature-A to maina0b67c1 (origin/feature-A, feature-A) HEAD@&#123;12&#125;: commit: Add feature-Aac781f6 (main) HEAD@&#123;13&#125;: checkout: moving from main to feature-Aac781f6 (main) HEAD@&#123;14&#125;: commit: Add content7cde662 HEAD@&#123;15&#125;: commit: Second commitff90974 HEAD@&#123;16&#125;: commit: Add hello world script by php17c60fa HEAD@&#123;17&#125;: Branch: renamed refs/heads/master to refs/heads/main17c60fa HEAD@&#123;19&#125;: commit (initial): first commit</code></pre><p>回到回溯之前  </p><pre><code>$ git reset --hard bade3c3HEAD is now at bade3c3 One test</code></pre><h2 id="消除冲突"><a href="#消除冲突" class="headerlink" title="消除冲突"></a>消除冲突</h2><p>合并<code>fix-B</code>分支  </p><pre><code>git merge --no-ff fix-B  </code></pre><h2 id="git-commit-—-修改提交信息"><a href="#git-commit-—-修改提交信息" class="headerlink" title="git commit — 修改提交信息"></a>git commit — 修改提交信息</h2><p>修改上一条提交信息  </p><pre><code>$git commit --amend</code></pre><h2 id="git-rebase-i-—-压缩历史"><a href="#git-rebase-i-—-压缩历史" class="headerlink" title="git rebase -i — 压缩历史"></a>git rebase -i — 压缩历史</h2><p>发现已提交的内容中有错误，可以提交一个修改，然后将这个修改包含到之前的一个提交之中，压缩成一个历史记录  </p><h3 id="创建一个feature-C分支"><a href="#创建一个feature-C分支" class="headerlink" title="创建一个feature-C分支"></a>创建一个feature-C分支</h3><pre><code>$ git checkout -b feature-CSwitched to a new branch &#39;feature-C&#39;</code></pre><p>故意拼错，以便之后修正<br>提交这部分内容，这个小小的变更就没必要先执行git add命令再执行git commit命令了。我们用git commit -am来完成两步操作  </p><pre><code>$ git commit -am &quot;Add feature-C&quot;[feature-C 26d1810] Add feature-C 1 file changed, 2 insertions(+)</code></pre><h3 id="修正拼写错误"><a href="#修正拼写错误" class="headerlink" title="修正拼写错误"></a>修正拼写错误</h3><p>修正后的差别如下  </p><pre><code>diff --git a/README.md b/README.mdindex 4114025..c57b693 100644--- a/README.md+++ b/README.md@@ -7,4 +7,4 @@ feature -A ##  fix-B fix-B content-faeture-C+feature-C</code></pre><p>然后进行提交  </p><pre><code>$ git commit -am &quot;Fix typo&quot;[feature-C 9f57689] Fix typo 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p><strong>错字漏字等失误称作<code>typo</code></strong>  </p><h3 id="更改历史"><a href="#更改历史" class="headerlink" title="更改历史"></a>更改历史</h3><p>将“Fix typo”修正的内容与之前一次的提交合并<br>将 Fix typo 修改为 fixup  </p><pre><code>$ git rebase -i HEAD~2Successfully rebased and updated refs/heads/feature-C.</code></pre><p>以下为编译器内容  </p><pre><code>pick 26d1810 Add feature-Cfixup 9f57689 Fix typo...  </code></pre><p>显示rebase成功<br>这时Add feature-C的哈希值已经改变<br>Fix typo就从历史中被抹去  </p><h3 id="合并至-master-main-分支"><a href="#合并至-master-main-分支" class="headerlink" title="合并至 master(main)分支"></a>合并至 master(main)分支</h3><pre><code>$ git checkout mainSwitched to branch &#39;main&#39;Your branch is up to date with &#39;origin/main&#39;.$ git merge --no-ff feature-CMerge made by the &#39;recursive&#39; strategy. README.md | 2 ++ 1 file changed, 2 insertions(+)</code></pre><p>master分支整合了feature-C分支。开发进展顺利  </p><h1 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h1><p>在GitHub上创建一个新的仓库git-tutorial<br>建议不要勾选添加README.md文件，这样会导致从创建初便于本地仓库失去了整合性。虽然到时候也可以强制覆盖  </p><h2 id="git-remote-add-—-添加远程仓库"><a href="#git-remote-add-—-添加远程仓库" class="headerlink" title="git remote add — 添加远程仓库"></a>git remote add — 添加远程仓库</h2><pre><code>$ git remote add origin git@github.com:Clov614/git-tutorial.git</code></pre><p>执行后Git会将<code>git@github.com:Clov614/git-tutorial.git</code>远程仓库的名称设置为origin(标识符)</p><h2 id="git-push-—-推送至远程仓库"><a href="#git-push-—-推送至远程仓库" class="headerlink" title="git push — 推送至远程仓库"></a>git push — 推送至远程仓库</h2><h3 id="推送至-master-分支"><a href="#推送至-master-分支" class="headerlink" title="推送至 master 分支"></a>推送至 master 分支</h3><pre><code>$ git push -u origin masterEnumerating objects: 8, done.Counting objects: 100% (8/8), done.Delta compression using up to 16 threadsCompressing objects: 100% (6/6), done.Writing objects: 100% (8/8), 1.64 KiB | 838.00 KiB/s, done.Total 8 (delta 0), reused 0 (delta 0), pack-reused 0To github.com:Clov614/git-tutorial.git * [new branch]      master -&gt; masterBranch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</code></pre><p><strong>像这样执行git push，当前分支的内容就会被推送给远程仓库origin的master分支。-u参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从origin的master分支获取内容，省去了另外添加参数的麻烦。</strong>  </p><h3 id="推送至master以外的分支"><a href="#推送至master以外的分支" class="headerlink" title="推送至master以外的分支"></a>推送至master以外的分支</h3><pre><code>$ git checkout -b feature-DSwitched to a new branch &#39;feature-D&#39;</code></pre><pre><code>$ git push -u origin feature-DEnter passphrase for key &#39;/c/Users/Hongyi/.ssh/id_rsa&#39;:Total 0 (delta 0), reused 0 (delta 0), pack-reused 0remote:remote: Create a pull request for &#39;feature-D&#39; on GitHub by visiting:remote:      https://github.com/Clov614/git-tutorial/pull/new/feature-Dremote:To github.com:Clov614/git-tutorial.git * [new branch]      feature-D -&gt; feature-DBranch &#39;feature-D&#39; set up to track remote branch &#39;feature-D&#39; from &#39;origin&#39;.</code></pre><p>现在，在远程仓库的Github页面就可以查看到feature-D分支了。  </p><h1 id="从远程仓库获取"><a href="#从远程仓库获取" class="headerlink" title="从远程仓库获取"></a>从远程仓库获取</h1><p>一般适用于此项目又有一名新开发者来共同开发<br>这就需要clone这个仓库  </p><h2 id="git-clone-—-获取远程仓库"><a href="#git-clone-—-获取远程仓库" class="headerlink" title="git clone — 获取远程仓库"></a>git clone — 获取远程仓库</h2><h3 id="获取远程仓库"><a href="#获取远程仓库" class="headerlink" title="获取远程仓库"></a>获取远程仓库</h3><p>新建一个目录<br>将Github上的仓库clone到本地。  </p><pre><code>$ git clone git@github.com:Clov614/git-tutorial.gitCloning into &#39;git-tutorial&#39;...remote: Enumerating objects: 8, done.remote: Counting objects: 100% (8/8), done.remote: Compressing objects: 100% (6/6), done.remote: Total 8 (delta 0), reused 8 (delta 0), pack-reused 0Receiving objects: 100% (8/8), done.$ cd git-tutorial</code></pre><p>执行git clone 后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。  </p><pre><code>$ git branch -a* master  remotes/origin/HEAD -&gt; origin/master  remotes/origin/feature-D  remotes/origin/master</code></pre><p>添加 -a 参数可以同时显示本地仓库和远程仓库的分支信息。  </p><h3 id="获取远程的feature-D分支"><a href="#获取远程的feature-D分支" class="headerlink" title="获取远程的feature-D分支"></a>获取远程的feature-D分支</h3><p>我们试着将feature-D分支获取至本地仓库  </p><pre><code>$ git checkout -b feature-D origin/feature-DSwitched to a new branch &#39;feature-D&#39;Branch &#39;feature-D&#39; set up to track remote branch &#39;feature-D&#39; from &#39;origin&#39;.</code></pre><p>-b 参数的后面是本地仓库中新建分支的名称。为了便于理解，还是取名为feature-D,让他与远程仓库的对应分支保持同名。新建分支名称后面是获取来源的分支名称。<br>例子中指定了origin&#x2F;feature-D.就是说以名为origin的仓库(这里指Github端的仓库)的feature-D分支为来源，在本地仓库中创建feature-D分支。  </p><h3 id="向本地的feature-D分支提交更改"><a href="#向本地的feature-D分支提交更改" class="headerlink" title="向本地的feature-D分支提交更改"></a>向本地的feature-D分支提交更改</h3><p>在REAMDME.md文件中作出修改。<br>查看修改  </p><pre><code>$ git diffdiff --git a/README.md b/README.mdindex 1bcb252..fee7bb3 100644--- a/README.md+++ b/README.md@@ -1,2 +1,3 @@ # This is a test application - write something+- Add one</code></pre><p>提交  </p><pre><code>$ git commit -am &quot;Add feature-D&quot;[feature-D 3a2efad] Add feature-D 1 file changed, 1 insertion(+)</code></pre><h3 id="推送-push-feature-D分支"><a href="#推送-push-feature-D分支" class="headerlink" title="推送(push)feature-D分支"></a>推送(push)feature-D分支</h3><pre><code>$ git pushEnumerating objects: 5, done.Counting objects: 100% (5/5), done.Delta compression using up to 16 threadsCompressing objects: 100% (3/3), done.Writing objects: 100% (3/3), 328 bytes | 328.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0To github.com:Clov614/git-tutorial.git   26e891f..3a2efad  feature-D -&gt; feature-D</code></pre><h2 id="git-pull-—-获取最新的远程仓库分支"><a href="#git-pull-—-获取最新的远程仓库分支" class="headerlink" title="git pull — 获取最新的远程仓库分支"></a>git pull — 获取最新的远程仓库分支</h2><p>现在我们放下刚刚操作的目录，回到原先的那个目录。<br>我们可以通过git pull 命令来拉取刚刚推送的提交。<br>将本地的feature-D分支更新到最新状态。  </p><pre><code>$ git pull origin feature-Dremote: Enumerating objects: 5, done.remote: Counting objects: 100% (5/5), done.remote: Compressing objects: 100% (3/3), done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), 308 bytes | 5.00 KiB/s, done.From github.com:Clov614/git-tutorial * branch            feature-D  -&gt; FETCH_HEAD   26e891f..3a2efad  feature-D  -&gt; origin/feature-DUpdating 26e891f..3a2efadFast-forward README.md | 1 + 1 file changed, 1 insertion(+)</code></pre><p>这样子本地的仓库也同步了最新的远程仓库状态<br>通过不断的push和pull就能和其他的开发者同时在同一个分支中进行作业，不断给feature-D增加新功能。<br>如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一分支中进行作业时，为减少冲突情况的发生，建议频繁地进行push和pull操作。  </p><h1 id="至此Git的基础就到此结束"><a href="#至此Git的基础就到此结束" class="headerlink" title="至此Git的基础就到此结束"></a><strong>至此Git的基础就到此结束</strong></h1>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Notes </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/posts/51855.html"/>
      <url>/posts/51855.html</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h3 id="编程实现背包问题的求解，首先定义5件物品的重量分别是1、2、3、4、5，对应收益分别是3、10、6、3、5，总重量限制为10。要求输出："><a href="#编程实现背包问题的求解，首先定义5件物品的重量分别是1、2、3、4、5，对应收益分别是3、10、6、3、5，总重量限制为10。要求输出：" class="headerlink" title="编程实现背包问题的求解，首先定义5件物品的重量分别是1、2、3、4、5，对应收益分别是3、10、6、3、5，总重量限制为10。要求输出："></a>编程实现背包问题的求解，首先定义5件物品的重量分别是1、2、3、4、5，对应收益分别是3、10、6、3、5，总重量限制为10。要求输出：</h3><ul><li><p>（1）背包的最大收益；  </p></li><li><p>（2）最大收益情况下各种物品放入背包的对应比例；Xi。</p></li></ul><hr><h2 id="GO实现"><a href="#GO实现" class="headerlink" title="GO实现"></a>GO实现</h2><h3 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h3><p>algor01&#x2F;  </p><p>&amp;emsp;├── greedyknapsack&#x2F;<br>&amp;emsp;∣    &amp;emsp;  &amp;emsp; &amp;emsp; &amp;emsp; &amp;emsp;└── greedyknapsack.go<br>&amp;emsp;└──main&#x2F;<br>&amp;emsp;&amp;emsp; &amp;emsp;└── main.go    </p><p> greedyknapsack.go</p><pre class=" language-Go"><code class="language-Go">package greedyknapsackvar Capacity int   // 背包容量var profit float64 // 物品收益// var xi map[int]float64 //最大收益情况下各种物品放入背包的对应比例// 初始化对象type knapsack struct &#123;    index  int    weight int    value  int    profit float64&#125;type Ks []*knapsack// type greedyknapsacker interface &#123;// &#125;func InitKS(int_weight, int_value []int) *Ks &#123;    ks := make(Ks, 5)    for i := 0; i < 5; i++ &#123;        // ks[i].weight = int_weight[i]        // ks[i].value = int_value[i]        // ks[i].profit = 0        ks[i] = &knapsack&#123;index: i + 1, weight: int_weight[i], value: int_value[i], profit: 0&#125;    &#125;    return &ks&#125;// func (ks ks) initgk(int_weight, int_value []int) &#123;// for i := 0; i < len(int_weight); i++ &#123;// ks[i].weight = int_weight[i]// ks[i].value = int_value[i]// ks[i].profit = 0// &#125;// &#125;func (ks *Ks) ComputeRatio() &#123;    r := *ks    for i := 0; i < 5; i++ &#123;        w := (r[i]).weight        v := (r[i]).value        index := (r[i]).index        var p float64 = float64(v) / float64(w)        r[i] = &knapsack&#123;index: index, weight: w, value: v, profit: p&#125;    &#125;&#125;// 根据单位重量的收益值比大小，对物品进行排序func (ks *Ks) SortRatio() &#123;    r := *ks    for i := 0; i < 5; i++ &#123;        for j := i + 1; j < 5; j++ &#123;            if (r[j]).profit > (r[i]).profit &#123;                temp := r[i]                r[i] = r[j]                r[j] = temp            &#125;        &#125;    &#125;&#125;// 按背包物品index排序// 计算背包问题的最优解和所放物品的最大收益func (ks *Ks) ComputeProfit() (float64, map[int]float64) &#123;    var temp int = 0    var i int = 0    r := *ks    xi := make(map[int]float64, 5)    for &#123;        if !(temp <= Capacity) &#123;            break        &#125;        if i == 5 &#123;            break        &#125; else &#123;            if (r[i].weight + temp) <= Capacity &#123;                profit += (float64)(r[i].value)                temp += r[i].weight                xi[r[i].index] = float64(r[i].weight) / float64(Capacity)            &#125; else &#123;                var _weight int = Capacity - temp                profit += (float64)(_weight) / (float64)(r[i].profit)                temp += _weight                xi[r[i].index] = float64(_weight) / float64(Capacity)            &#125;        &#125;        i++    &#125;    return profit, xi&#125;</code></pre><p>main.go  </p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    gk <span class="token string">"GoMyself/algor01/GreedyKnapsack"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    gk<span class="token punctuation">.</span>Capacity <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> w <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> v <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ks <span class="token operator">*</span>gk<span class="token punctuation">.</span>Ks <span class="token operator">=</span> gk<span class="token punctuation">.</span><span class="token function">InitKS</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    ks<span class="token punctuation">.</span><span class="token function">ComputeRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ks<span class="token punctuation">.</span><span class="token function">SortRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    profit<span class="token punctuation">,</span> xi <span class="token operator">:=</span> ks<span class="token punctuation">.</span><span class="token function">ComputeProfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"背包的最大收益:"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>profit<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"最大收益情况下各种物品放入背包的对应比例:([物品]比例)"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xi<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：<br><img src="https://iaimi.cn/images/2022/04/12/2022-04-12-114324.png">   </p><h3 id="GoSrc-源文件下载"><a href="#GoSrc-源文件下载" class="headerlink" title="GoSrc(源文件下载) "></a><a href="https://nas.iaimi.cn/s/roT2tcqfdyqMDxt">GoSrc(源文件下载) </a></h3><hr><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><h3 id="文件结构：-1"><a href="#文件结构：-1" class="headerlink" title="文件结构："></a>文件结构：</h3><p>Algor01&#x2F;<br>&amp;emsp; &amp;emsp;├── Greedyknapsack.java<br>&amp;emsp; &amp;emsp;└── TestMain.java   </p><p>Greedyknapsack.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Algor01<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>KeySpec<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Greedyknapsack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    定义属性、对象和方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span>  Capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> Profit<span class="token punctuation">;</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> Xi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> knapsack<span class="token punctuation">[</span><span class="token punctuation">]</span> Ks<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化对象</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">knapsack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">int</span> weight<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">double</span> profit<span class="token punctuation">;</span>        <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            weight <span class="token operator">=</span> w<span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>            profit <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Greedyknapsack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Greedyknapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> C<span class="token punctuation">,</span><span class="token keyword">double</span> P<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Capacity <span class="token operator">=</span> C<span class="token punctuation">;</span>        Profit <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化物品们</span>    <span class="token keyword">public</span> knapsack<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">InitKs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Ks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">knapsack</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            knapsack k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">knapsack</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Ks<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算出单个物品的profit</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ComputeRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>profit <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据单位重量的收益值比大小，对物品进行排序SortRatio</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SortRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        knapsack temp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>profit <span class="token operator">></span> Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>profit<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Ks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    Ks<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算背包问题的最优解和所放物品的最大收益</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">ComputeProfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> Capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> temp<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Capacity <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Profit <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">+=</span> Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                    Xi<span class="token punctuation">[</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"物品:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 对应比例:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> _weight <span class="token operator">=</span> Capacity <span class="token operator">-</span> temp<span class="token punctuation">;</span>                    Profit <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_weight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>profit<span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">+=</span> _weight<span class="token punctuation">;</span>                    Xi<span class="token punctuation">[</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"物品:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 对应比例:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_weight <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Profit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>TestMain.java   </p><pre class=" language-Java"><code class="language-Java">package Algor01;import java.util.Arrays;public class TestMain &#123;    public static void main(String[] args) &#123;        Greedyknapsack gk = new Greedyknapsack(10,0);        int[] weight = &#123;1,2,3,4,5&#125;;        int[] value = &#123;3, 10, 6, 3, 5&#125;;        gk.InitKs(weight,value);        gk.ComputeRatio();        gk.SortRatio();        double profit = gk.ComputeProfit();        System.out.println("背包的最大收益:"+profit);        System.out.println(Arrays.toString(gk.Xi));    &#125;&#125;</code></pre><p>输出结果：<br><img src="https://iaimi.cn/images/2022/04/12/2022-04-12-115224.png">  </p><h3 id="JavaSrc-源文件下载"><a href="#JavaSrc-源文件下载" class="headerlink" title="JavaSrc(源文件下载)"></a><a href="https://nas.iaimi.cn/s/3558kCmoYqPnRgJ">JavaSrc(源文件下载)</a></h3><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Go </tag>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序设计综合实践课堂笔记</title>
      <link href="/posts/34549.html"/>
      <url>/posts/34549.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、指针的概念及其定义"><a href="#一、指针的概念及其定义" class="headerlink" title="一、指针的概念及其定义"></a>一、指针的概念及其定义</h1><ul><li>1 指针和地址：指针就是地址，地址指的是内存地址的的编号，指针是用于存放地址的变量。</li><li>2 指针变量，专门用于存地址的变量。</li><li>3 指针的定义方式：<br>数据类型  *  指针变量名  &#x2F;&#x2F;此处的*表示该变量是指针变量  </li><li>4  &amp;：取地址运算符  </li><li>5  *：取内容运算符，  </li><li>6  <code>指针变量存了谁的地址，那么它就指向谁！！！</code></li></ul><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示取整型变量a的地址存入到指针变量pa中；</span><span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d<span class="token punctuation">,</span><span class="token operator">%</span>d”<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token operator">*</span>pa<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//输出结果均为100</span></code></pre><p>*pa：表示指针变量pa所指向的变量（a） 等价于  a<br>pa 等价于 &amp;a  </p><h1 id="二、指针的应用"><a href="#二、指针的应用" class="headerlink" title="二、指针的应用"></a>二、指针的应用</h1><ul><li>1 指针变量的类型必须与其操作的数据类型一致，否则将出错。</li></ul><h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">514</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span>pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>pc<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>输出结果为：5142     --大家考虑为什么是这个结果？？？      -- pa为int类型的指针变量        pa的地址为 00000010 | 00000010      而pc为char类型的指针变量pc只有一个字节(也就是高位无了)       pc的地址为 00000010</code></pre><p><code>以上结论：什么类型数据就必须用什么类型的指针变量来对其进行引用！！！</code>  </p><h1 id="三、指针的移动"><a href="#三、指针的移动" class="headerlink" title="三、指针的移动"></a>三、指针的移动</h1><p>C语言规定指针是可以移动的，如何移动呢？<br>可以采用对指针变量的加和减的运算来实现指针在内存当中的移动。<code>注意：指针变量不存在乘除运算。</code>  </p><h3 id="如"><a href="#如" class="headerlink" title="如:"></a>如:</h3><pre class=" language-C"><code class="language-C">int *p;  p=p+1（相当于p++）;</code></pre><p>表示<code>指针变量p往高地址移动一个数据单元，具体移动多少个字节取决于指针的类型。若p的类型是char *，那么往高地址移动一个数据单元，就是往地址移动1个字节；若p的类型是int *，那么往高地址移动一个数据单元，就是往高地址移动2个字节；以此类推。</code>  </p><h1 id="四、指针与数组"><a href="#四、指针与数组" class="headerlink" title="四、指针与数组"></a>四、指针与数组</h1><p><strong>数组的数组名表示数组的首地址，且是一个常量，在程序运行过程当中，其值是不能被改变的。数组元素在内存中是连续分布。</strong>  </p><pre class=" language-C"><code class="language-C">int a[5]=&#123;10,20,30,40,50&#125;;    int *p;    int i;    p=a;        for(i=0;i<=4;i++)    &#123;        printf("%d ",*(p++));&#125;</code></pre><p>输出结果：10 20 30 40 50<br>注意（本部分内容，有同学们自己根据上课的讲解自行补充！）：<br><em>p++等价于</em>(p++):<br>(*p)++:<br>*++p:<br>++*p  </p><h1 id="五、指针与函数"><a href="#五、指针与函数" class="headerlink" title="五、指针与函数"></a>五、指针与函数</h1><ul><li>1 指针变量作为函数参数在函数中进行传递</li></ul><p>例：调用函数，对主函数中的两个变量的值进行互换操作，对照两种互换函数的区别  </p><pre class=" language-C"><code class="language-C">#include "stdio.h"void change1(int x,int y)&#123;    int t;    t=x;    x=y;    y=t;    return;&#125;void change2(int *x,int *y)&#123;    int t;    t=*x;    *x=*y;    *y=t;    return;&#125;void main()&#123;    int a=100,b=200;    change2(&a,&b);    printf("%d,%d\n",a,b);&#125;</code></pre><ul><li>2  函数名作为函数参数在函数中进行传递</li></ul><pre class=" language-C"><code class="language-C">#include "stdio.h"fun(int *p)&#123;int i;    for(i=0;i<=4;i++)    &#123;p[i]=p[i]*10;&#125;&#125;fun2(int p[])&#123;int i;    for(i=0;i<=4;i++)    &#123;p[i]=p[i]*10;&#125;&#125;void main()&#123;   int a[5]=&#123;10,20,30,40,50&#125;;    int i;    fun2(a);    for(i=0;i<=4;i++)    &#123;    printf("%d ",a[i]);    &#125;&#125;</code></pre><ul><li>3 返回值类型为指针的函数（本部分内容将结合链表内容一起讲解）</li></ul><h1 id="六、-宏定义相关"><a href="#六、-宏定义相关" class="headerlink" title="六、 宏定义相关"></a>六、 宏定义相关</h1><h2 id="一、编译预处理"><a href="#一、编译预处理" class="headerlink" title="一、编译预处理"></a>一、编译预处理</h2><ul><li>1  概念：在<strong>对程序进行编译之前</strong>，必须对程序中的这些特殊命令进行“预处理”操作，即对预处理命令进行相对的处理。在进行处理后，再由C编译程序将处理后的程序代码进行编译处理，得到目标代码。（编辑-&gt;<code>编译</code>-&gt;连接-&gt;运行）</li><li>2  预处理命令分类：宏定义、文件包含、条件编译，这些命令均以“#”开头。</li><li>3  <code>注意：编译预处理命令是一条“命令”，而不是“语句”，因此命令的结束不能添加分号！！</code></li></ul><h2 id="二、宏定义define"><a href="#二、宏定义define" class="headerlink" title="二、宏定义define"></a>二、宏定义define</h2><p><strong>宏定义中的宏名仅简单地进行宏替换操作，具体替换之后在程序中起什么作用，则由具体的程序代码决定，宏定义并不检查语义是否正确！！</strong>  </p><ul><li>1  不带参宏定义<br>定义格式：#define 标识符  字符串</li></ul><p>如：  </p><pre><code>#define N 1000   //用标识符N代表字符串1000#define BEGIN main()&#123;//用标识符BEGIN代表字符串main()&#123;#define END  &#125;  //用标识符END代表字符串 &#125;</code></pre><p>程序举例：  </p><pre class=" language-C"><code class="language-C">#define BEGIN main()&#123;#define END &#125;#define GS "%d\n"BEGINint a=100;printf(GS,a);END//程序输出结果为：100</code></pre><ul><li>2  带参宏定义<br>定义格式：#define  标记符（形参表）  字符串<br>带参宏在进行宏替换时，需要对将实参替换原来宏当中的形参。<br>如：</li></ul><pre class=" language-C"><code class="language-C">#define PI 3.14#define S(r)  PI*r*r  </code></pre><p>那么在程序中若使用S(7)，则在宏替换后，其表达式为：<br>S(7)&#x3D;3.14<em>7</em>7<br>带参宏程序举例：  </p><pre class=" language-C"><code class="language-C">#include "stdio.h"#define PI 3.14#define S(r) PI*r*rvoid main()&#123;    double area;    area=S(7);/*在编译之前必须将S(7)替换为3.14*7*7*/    printf("%lf\n",area);&#125;    //运行结果: 153.860000  </code></pre><pre class=" language-C"><code class="language-C">#include "stdio.h"#define S(a) a/avoid main()&#123;    int i;    i=S(4+4);/*在编译之前S(4+4)将被替换为：4+4/4+4*/    printf("%d",i);&#125;    //运行结果: 9</code></pre><h2 id="三、文件包含"><a href="#三、文件包含" class="headerlink" title="三、文件包含"></a>三、文件包含</h2><ul><li>1  文件包含的方式有两种：<br><em>方式一</em>：#include“被包含文件名”&#x2F;&#x2F;编译器首先到当前目录下查找是否存在“被包含文件”，若不存在，则接着到tc编译器目录下的“include”文件路径中查找；<br> <em>方式二</em>：#include&lt;被包含文件名&gt; &#x2F;&#x2F;编译器会到系统路径下查找头文件，若采用“tc”,在到tc编译器目录下的“include”文件路径中查找；</li><li>2  两个方法比较后结论：</li></ul><p>使用双引号比使用尖括号多了一个查找路径，它的功能更为强大！！建议同学们在做文件包含操作时，采用“双引号”的方式进行。</p><h1 id="七、-用户自定义数据类型"><a href="#七、-用户自定义数据类型" class="headerlink" title="七、 用户自定义数据类型"></a>七、 用户自定义数据类型</h1><p><strong>整数类型（4种）：int short  unsigned  long</strong><br><strong>浮点型(2种):float   double</strong><br><strong>字符串(1种):char</strong>  </p><h2 id="四、结构体"><a href="#四、结构体" class="headerlink" title="四、结构体"></a>四、结构体</h2><ul><li>1  结构体类型的定义<br>格式如下：</li></ul><pre class=" language-C"><code class="language-C">struct  结构体类型名&#123;  类型名1   结构体成员名1;   类型名2   结构体成员名2;……类型名n    结构体成员名n;&#125;;</code></pre><p>例如：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//占用12个字节</span>    <span class="token keyword">int</span>  age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//占用2个字节</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//占用1个字节</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*person数据类型定义完成，属于构造数据类型*/</span></code></pre><p><code>person数据类型定义完成，属于构造数据类型</code><br>person是结构体类型名，它紧跟在关键字struct之后。通过一对花括号将内部成员(属性)括起，内部成员之间用分号间隔。其中：成员变量name、age、sex的数据类型不同。要注意花括号后的分号不能忽略。  </p><ul><li>2  结构体变量的定义<br>第一种方式：通过已构造好的结构体类型来定义结构体变量，其形式如下：<br><code>struct  结构体类型名  结构体变量名;</code><br>结构体变量名应是一个合法的标识符。利用前一节所定义好的结构体类型person来定义结构体变量：<br> struct  person  p1;<br> 定义p1为person结构体类型的变量，<code>变量p1占用15个字节的内存单元</code>。注意：在这里<strong>struct关键字不能缺省</strong>。<br> 第二种方式：在构造结构体类型的同时定义结构体变量，其形式如下：</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  结构体类型名<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 结构体成员列表<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结构体变量名<span class="token number">1</span><span class="token punctuation">,</span>……<span class="token punctuation">,</span>结构体变量名n<span class="token punctuation">;</span></code></pre><p>结构体变量名在花括号后直接给出，多个变量之间用逗号隔开，最后一个变量名后要用分号结束。例如：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  age<span class="token punctuation">;</span>   <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义了p2和p3为person结构体类型的变量。</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  person  p1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>或：<span class="token keyword">struct</span>  person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  age<span class="token punctuation">;</span>   <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>p2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"lili"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p><code>注意：初始化时，值的类型要与结构体的成员类型对应一致。</code>  </p><ul><li>3  结构体成员的引用<br>使用结构体成员之前，必须定义结构体变量。通过成员运算符“.”引用结构体成员。引用结构体成员的基本形式为：   <center><font color=red size=4>结构体变量名.结构体成员名</font></center>  &#160; 成员运算符“.”在所有运算符中的优先级最高，应将这种引用形式看作一个整体，其性质与其它的普通变量完全相同。比如，用引用结构体变量p1成员age格式为：p1.age，p1.age 应被看一个成整体，p1.age++是对p1.age自增，而不是对age自增，age是整型，所以p1.age在使用中与普通的整型变量使用方法一样。</li></ul><p>&amp;#160; 程序举例：对张三和李四的数据信息进行输出操作。  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>p2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> person p1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">,</span>p1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 程序运行结果：  </span><span class="token comment" spellcheck="true">// zhangsan,20,m</span><span class="token comment" spellcheck="true">// lisi,21,f</span></code></pre><ul><li>4  结构体数组的定义<br>定义结构体数组与定义结构体变量相类似，其格式如下：<br>struct  结构体类型名  结构体数组名[长度];<br>结构体数组名应是一个合法的标识符。例如：  <center><font color=black size=5>struct  person  p[10];</font></center>  &#160; 表示p为person类型的结构体数组，其有10个数组元素，每个元素都是struct  person类型变量。</li></ul><p>&amp;#160;例如：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">char</span> sex<span class="token punctuation">;</span>  <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> person p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"sunlin"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">"beijing"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"xiaohua"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">"shanghai"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"yanglan"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">"fujian"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>5  结构体数组对结构体成员的引用<br>&amp;#160; 对结构体数组的访问和对普通数组的一样，也是用：数组名[下标]来确定结构体数组元素。结构体数组元素即为结构体类型变量，所以引用结构体数组元素的成员时，也要使用成员运算符“.”。其一般格式是：  <center><font color=black size=5> 数组名[下标].成员名</font></center>  &#160;如在上节例中：p[1].age表示是结构体数组p中的第二个数组元素中的成员age，它的值为20。</li></ul><p>也可以对引用的数据进行修改，比如修改此处的年龄，<strong>可以用p[1].age&#x3D;23，那么此时小华的年龄被更改为23岁</strong>。</p><h2 id="五、结构体和指针"><a href="#五、结构体和指针" class="headerlink" title="五、结构体和指针"></a>五、结构体和指针</h2><ul><li>1  结构体指针变量的定义及其引用<br>结构体指针用于指向结构体变量，即指向结构体变量在存储区域的起始地址，它是一个指针变量。其定义格式是：  <center><font color=red size=5> struct  结构体类型名  *指针变量名</font></center>    例如：</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  person  <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">struct</span> person p1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“zhangsan”<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>’m’<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>           p <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span></code></pre><p>&amp;#160; 通过结构体类型struct  person 定义一个指针变量p，并把结构体变量p1的首地址赋值给p,此时，指针变量p也就指向了结构体变量p1的首地址。以后便可以通过指针变量p引用结构体变量p1的成员了。一个指针变量引用结构体变量的成员格式有以下两种：  </p><center><font color=black size=4>格式一：（*指针变量名）.结构体成员名</font></center>  <center><font color=red size=4>格式二： 指针变量名->结构体成员名</font></center>   &#160; 注意：格式一的圆括号不能省略，因为成员运算符“.”的优先级别比指针运算符“*”高。（*指针变量名）表示该指针变量所指向的结构体变量。   <p>例如,通过指针变量p来引用结构体成员age，可用形如: </p><pre><code>(*p).age 或者：p-&gt;age</code></pre><p>&amp;#160; 以上两种形式都是利用指针变量p引用结构体中的成员age，结果都等价于p1.age。  </p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">struct</span> person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> person p1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> person p2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> person <span class="token operator">*</span>q<span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>q<span class="token operator">-></span>name<span class="token punctuation">,</span>q<span class="token operator">-></span>age<span class="token punctuation">,</span>q<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">,</span>p1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span>p2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>q<span class="token operator">-></span>name<span class="token punctuation">,</span>q<span class="token operator">-></span>age<span class="token punctuation">,</span>q<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="六、typedef定义类型别名"><a href="#六、typedef定义类型别名" class="headerlink" title="六、typedef定义类型别名"></a>六、typedef定义类型别名</h2><p>C语言中，用关键字typedef定义类型的别名。用户运用typedef便可以将之前的类型名用一个新的名称来代替，其作用在<strong>简化程序的同时也增强了程序的可读性</strong>。  </p><ul><li>1  用typedef定义类型别名的格式：<br><font color=red>typedef  原类型名   新类型名;</font><br>typedef  int  INTEGER; &#x2F;<em>定义INTEGER为int的类型别名</em>&#x2F;<br>INTEGER  i;  等价于：  int  i;</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">,</span><span class="token operator">*</span>PERSON<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Person p1<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*等价于 strcut person p1*/</span>    Person p2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    PERSON q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等价于Person *q */</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>q<span class="token operator">-></span>name<span class="token punctuation">,</span>q<span class="token operator">-></span>age<span class="token punctuation">,</span>q<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span>p2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%c\n"</span><span class="token punctuation">,</span>q<span class="token operator">-></span>name<span class="token punctuation">,</span>q<span class="token operator">-></span>age<span class="token punctuation">,</span>q<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="七、链表的定义"><a href="#七、链表的定义" class="headerlink" title="七、链表的定义"></a>七、链表的定义</h2><p>链表是程序设计中经常使用到的一种重要的数据结构。链表由若干个被称为结点（如下图表示一个结点）的元素组成。每个结点包含两部分信息：一是数据部分（域），存放任何类型的需要处理的数据，二是指针部分（域），存放指向下一个结点的地址。在C语言中“结点”通常用结构体来表示。<br><img src="https://iaimi.info/images/2022/04/05/Node01.png"><br>运用结构体可方便的定义结点，具体定义格式如下：  </p><pre class=" language-c"><code class="language-c"> <span class="token keyword">struct</span>  结构体类型名        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 数据成员类表　　　　　<span class="token keyword">struct</span> 结构体类型名 <span class="token operator">*</span>  指针变量名 <span class="token punctuation">;</span>　　　　<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>其中两个结构体类型名相同，指针变量名用“struct &lt;结构体类型名&gt; *”定义，表示该指针变量指向同一种结构体类型的数据。依据该格式来创建一个结点如下：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span>  node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> node  <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>其中：结构体类型struct node为所定义的结点类型，data表示该结点中存储的数据，为整型； next被定义成struct node类型的指针变量，它指向类型为struct node结构体的结点。<br>例：创建一张如下图的简单链表，并依次输出结点的数据。<br><img src="https://iaimi.info/images/2022/04/05/Node02.png"><br>程序代码：  </p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Node<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">;</span>    Node <span class="token operator">*</span>q<span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token number">10121</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>score<span class="token operator">=</span><span class="token number">85</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token number">10133</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span>score<span class="token operator">=</span><span class="token number">87.5</span><span class="token punctuation">;</span>    p3<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token number">10137</span><span class="token punctuation">;</span>    p3<span class="token punctuation">.</span>score<span class="token operator">=</span><span class="token number">91</span><span class="token punctuation">;</span>        q<span class="token operator">=</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token operator">&amp;</span>p2<span class="token punctuation">;</span>    p2<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token operator">&amp;</span>p3<span class="token punctuation">;</span>    p3<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%.2lf\n"</span><span class="token punctuation">,</span>q<span class="token operator">-></span>num<span class="token punctuation">,</span>q<span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 程序运行结果：  </span><span class="token comment" spellcheck="true">/*10121,85.0010133,87.5010137,91.00*/</span></code></pre><h2 id="八、链表结点空间的申请与释放"><a href="#八、链表结点空间的申请与释放" class="headerlink" title="八、链表结点空间的申请与释放"></a>八、链表结点空间的申请与释放</h2><ul><li>1  结点空间的分配<br>在创建链表中的结点时，必须为结点申请分配内存空间，用于存放结点中的数据。为结点申请分配内存空间由库函数malloc(&lt;长度&gt;)来完成，该函数原型如下：  <center><font color=black size=4>void * malloc(unsigned int size);</font></center></li></ul><p>其作用是在内存的动态存储区域分配一个长度为size的连续空间，函数的返回值是一个指向分配域起始地址的指针，若分配不成功，则返回空指针NULL。形参size表示申请的空间长度，为整型常量，<strong>其值等于结点中各个成员字节数的总和</strong>。  </p><center><font color=red size=4>void*是基类型指针（原始指针，无类型指针）</font></center>   <font color=red size=3>注意：1.malloc中的参数size不要直接使用具体的数值来表示，而应该采用sizeof来求得所需要的结点内存空间的大小；<p>2.malloc函数的返回值类型是void*，在使用时，必须将其强制转换成所需要的结点指针类型方可正常赋值；</p><p>3.使用malloc函数需要导入头文件stdlib.h,实际上free函数也在这个头文件中。</font>  </p><ul><li>2  结点空间的释放<br>如果一个结点没有存在的价值，要从链表中删除它，则应该释放其所占用的内存空间。释放结点空间由函数free(&lt;指针变量&gt;)完成，该函数的原型如下：  <center><font color=black size=3>void free(void * p);</font></center>    其作用是释放由指针变量p指向的内存空间，被释放的内存空间又可以被其他的变量使用。free函数无返回值。</li></ul><h2 id="九、链表的基本操作"><a href="#九、链表的基本操作" class="headerlink" title="九、链表的基本操作"></a>九、链表的基本操作</h2><ul><li><p>1.链表结点的定义操作  </p></li><li><p>2.链表的初始化操作  </p></li><li><p>3.链表的创建  </p></li><li><p>4.链表结点的输出操作  </p></li><li><p>5.求链表的长度  </p></li><li><p>6.链表结点的插入操作  </p></li><li><p>7.链表结点的删除操作（按位置删除或按值删除）</p></li></ul><hr><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Node<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*InitList初始化链表的操作，初始化成功须返回头结点的地址*/</span>LinkList <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>head<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*创建具有n个结点的单链表*/</span><span class="token keyword">void</span> <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>                r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>        r<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*单链表数据的输出操作*/</span><span class="token keyword">void</span> <span class="token function">PrintList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表中的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>r<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*求单链表的长度*/</span><span class="token keyword">int</span> <span class="token function">LengthList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">int</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*单链表的插入操作*/</span>Status <span class="token function">InsertList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>        s<span class="token operator">-></span>next<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*先连接后面，再连接前面，才能保证第i个位置的指针不丢失*/</span>    r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*单链表的删除操作*/</span>Status <span class="token function">DeleteList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*让r指向链表中的第i-1个位置*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*删除第i个位置的结点*/</span>    s<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*释放所删除的结点*/</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       LinkList L<span class="token punctuation">;</span>       L<span class="token operator">=</span><span class="token function">InitList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">CreateList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*PrintList(L);       printf("当前链表的长度是:%d\n",LengthList(L));       */</span>       <span class="token function">InsertList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前链表的长度是:%d\n"</span><span class="token punctuation">,</span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">DeleteList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">DeleteList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前链表的长度是:%d\n"</span><span class="token punctuation">,</span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：<br><img src="https://iaimi.info/images/2022/04/05/2022-04-05-171938.png">  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Docs </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表的实现C语言</title>
      <link href="/posts/40445.html"/>
      <url>/posts/40445.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言单链表的实现"><a href="#C语言单链表的实现" class="headerlink" title="C语言单链表的实现"></a>C语言单链表的实现</h1><h2 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h2><ul><li><h3 id="1-链表结点的定义操作"><a href="#1-链表结点的定义操作" class="headerlink" title="1 链表结点的定义操作"></a>1 链表结点的定义操作</h3></li><li><h3 id="2-链表的初始化操作"><a href="#2-链表的初始化操作" class="headerlink" title="2 链表的初始化操作"></a>2 链表的初始化操作</h3></li><li><h3 id="3-链表的创建"><a href="#3-链表的创建" class="headerlink" title="3.链表的创建"></a>3.链表的创建</h3></li><li><h3 id="4-链表结点的输出操作"><a href="#4-链表结点的输出操作" class="headerlink" title="4.链表结点的输出操作"></a>4.链表结点的输出操作</h3></li><li><h3 id="5-求链表的长度"><a href="#5-求链表的长度" class="headerlink" title="5.求链表的长度"></a>5.求链表的长度</h3></li><li><h3 id="6-链表结点的插入操作"><a href="#6-链表结点的插入操作" class="headerlink" title="6.链表结点的插入操作"></a>6.链表结点的插入操作</h3></li><li><h3 id="7-链表结点的删除操作（按位置删除）"><a href="#7-链表结点的删除操作（按位置删除）" class="headerlink" title="7.链表结点的删除操作（按位置删除）"></a>7.链表结点的删除操作（按位置删除）</h3></li><li><h3 id="8-单链表的查找-实现单链表的查找操作，查找后返回这个值"><a href="#8-单链表的查找-实现单链表的查找操作，查找后返回这个值" class="headerlink" title="8 单链表的查找(实现单链表的查找操作，查找后返回这个值)"></a>8 单链表的查找(实现单链表的查找操作，查找后返回这个值)</h3></li><li><h3 id="9-单链表的查找-实现单链表的查找操作，查找后返回这个值"><a href="#9-单链表的查找-实现单链表的查找操作，查找后返回这个值" class="headerlink" title="9 单链表的查找(实现单链表的查找操作，查找后返回这个值)"></a>9 单链表的查找(实现单链表的查找操作，查找后返回这个值)</h3></li><li><h3 id="10-链表结点的删除操作-按值删除"><a href="#10-链表结点的删除操作-按值删除" class="headerlink" title="10 链表结点的删除操作(按值删除)"></a>10 链表结点的删除操作(按值删除)</h3></li><li><h3 id="11-销毁单链表"><a href="#11-销毁单链表" class="headerlink" title="11 销毁单链表"></a>11 销毁单链表</h3></li><li><h3 id="12-清空单链表"><a href="#12-清空单链表" class="headerlink" title="12 清空单链表"></a>12 清空单链表</h3></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Node<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表的初始化InitList</span>LinkList <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>head<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表的创建</span><span class="token keyword">void</span> <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出单链表</span><span class="token keyword">void</span> <span class="token function">PrintList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表中的数据是: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>r<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表的长度</span><span class="token keyword">int</span> <span class="token function">LengthList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表的插入</span>Status <span class="token function">InsertList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断 i不小于 1 不大于 链表长度 +1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span> <span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把r指针移到i-1位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化插入的node 赋给 s</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 插入s</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将i后面的node(i+1) 接到s(i)后</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将s接到r(i-1)后</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除单链表的结点DeleteList 按索引值删除</span>Status <span class="token function">DeleteList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span> <span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 r 移到 i-1 的位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除第%d个结点成功,删除的值为%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按索引取单链表中的值</span>ElemType <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span> <span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将r指针移到i位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据值e删除</span>Status <span class="token function">DelList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>            r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除%d成功\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// r指针向后移动</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除单链表的尾结点</span><span class="token keyword">void</span> <span class="token function">DeleteEnd</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    s<span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将指针r挪到链表末尾</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将指针s挪到r的前面一个结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">!=</span>r <span class="token operator">&amp;&amp;</span> s<span class="token operator">-></span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除头结点</span><span class="token keyword">void</span> <span class="token function">DelHead</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    s<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将指针r挪到链表末尾</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-></span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将指针s挪到r的前面一个结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">!=</span>r <span class="token operator">&amp;&amp;</span> s<span class="token operator">-></span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将单链表L销毁 DestroyList</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">DeleteEnd</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">DelHead</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将单链表L清空</span><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">DeleteEnd</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    LinkList L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 插入数据</span>    <span class="token function">InsertList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据索引(i)删除</span>    <span class="token function">DeleteList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DeleteList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据索引(i)获取值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取到的值为:%d\n"</span><span class="token punctuation">,</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据值删除</span>    <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DelList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    DestroyList(L);</span>    <span class="token function">ClearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h2><p><img src="https://iaimi.cn/images/2022/04/05/2022-04-05-210551.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吃掉小猫猫_键型自定义配置食用方式</title>
      <link href="/posts/60966.html"/>
      <url>/posts/60966.html</url>
      
        <content type="html"><![CDATA[<h1 id="吃掉小猫猫-键型自定义配置食用方式"><a href="#吃掉小猫猫-键型自定义配置食用方式" class="headerlink" title="吃掉小猫猫 键型自定义配置食用方式~"></a>吃掉小猫猫 键型自定义配置食用方式~</h1><p><a href="https://taiga.icu/eatcat/"><strong>游戏地址:</strong></a><code>https://taiga.icu/eatcat/</code>  </p><pre class=" language-bash"><code class="language-bash">https://taiga.icu/eatcat/</code></pre><p>在默认设置下，我们可以看到此处这填入了一个 !，这也就代表着正常的随机生成按键<br><img src="https://iaimi.cn/images/2022/04/05/eatcat.png">   </p><h3 id="接下来，我将为大家详细解释具体的设置方法！"><a href="#接下来，我将为大家详细解释具体的设置方法！" class="headerlink" title="接下来，我将为大家详细解释具体的设置方法！"></a>接下来，我将为大家详细解释具体的设置方法！</h3><p>首先，<code>一共可以输入 1到9 九个数字 和 @ # ! &amp; + - % * 八个特殊字符（输入其他字符或数字大于设置的键数会被自动过滤掉）</code><br>其中 <code>1~9 分别对应着在9个轨道生成按键</code>   </p><p><code>! 代表随机在轨道中的某一个生成按键</code><br><code>@ 代表在轨道中生成与他下面相邻的按键位置不同的随机按键（与 ! 明显的区别就是只输 ! 会生成纵连，而只输入 @ 不会有纵连）</code>   </p><p><code>\# 代表重复在上次生成按键的位置上生成按键(如上次如果生成在3轨道，这次还会生成3轨道)</code>  </p><p><code>&amp; 代表着在与上次按键对称的位置上生成按键(如果上一次生成在1轨道，这次会生成在4轨道，如果上次生成在2轨道，这次将会生成在3轨道，以此类推)</code>  </p><p><code>\+ 后面一定要只跟着一个1~9的数(其他数会被过滤，导致莫名其妙的bug)，它的作用是在上一次按键的位置右移x位后的位置生成按键 (如（在4k下）输入1+2,则第一次会在1轨道生成按键，第二次会在3轨道生成按键。您也可以试试%+2。特别的，如果上次的位置加上这个数以后超过了设置的键数，如3+2，这时将会自动重新开始从1轨道计算，第二次会生成在1轨道的位置)</code>  </p><p><code>\- 基本与+同理，只不过右移换为左移 % 后面要跟着两个1~9的数，它的作用是在这两个数对应的轨道之间随机一个位置生成按键。如 （在4k下）%13 将会在1~3轨道随机生成一个按键。特别的，如果第一个数大于第二个数，如%41，这时将会自动在4或1轨道随机生成一个按键。同理，%31会在3或4或1轨道中随机生成一个按键</code>  </p><p><code>\* 后面跟着的第一个数n表示后面要另外跟着n个数，之后要再跟着n个数（数都要在1~9内）。它的作用是在给出的几个数中随机在其中一个数对应的轨道内生成按键。如 *213 会在1或3轨道中生成按键。(这里2代表后面要输入两个数，1和3就是要随机生成的位置)。特别的，您可以合理使用*来增加某个位置生成的概率。如*43331 将会大大增加3生成的概率。 游戏将会循环按您给出的键位生成按键哦~</code>  </p><h3 id="举几个具体的例子："><a href="#举几个具体的例子：" class="headerlink" title="举几个具体的例子："></a>举几个具体的例子：</h3><p>如果您输入了123，则会在123三个轨道循环生成按键<br><img src="https://iaimi.cn/images/2022/04/05/eatcat01.md.png">  </p><p>如果您输入23，则会循环在23轨道生成按键，即交互<br><img src="https://iaimi.cn/images/2022/04/05/eatcat02.png">  </p><p>如果您只输入了一个 @，则会生成没有纵连的按键（即所有按键不会连续在同一个轨道多次生成）<br><img src="https://iaimi.cn/images/2022/04/05/eatcat03.png">  </p><p>如果您输入了123432，则会生成楼梯~<br><img src="https://iaimi.cn/images/2022/04/05/eatcat04.png">  </p><p>如果您只输入了一个1，则会在1轨道生成无尽的纵连<br><img src="https://iaimi.cn/images/2022/04/05/eatcat05.png">  </p><p>如果你输入@#，则可以练习短纵<br><img src="https://iaimi.cn/images/2022/04/05/eatcat06.png">  </p><p>同理，若输入@##，则可以练习三纵<br>若输入 1@4@，则会生成如下的按键（由于@是随机的，所以每次生成的键型不一定一致）<br><img src="https://iaimi.cn/images/2022/04/05/eatcat07.png">  </p><p>例子就举这么多，大家可以根据自己的需要写出自己的谱面，从而可以在自己的薄弱处反复练习，取得更好的成绩！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docs </tag>
            
            <tag> Eatcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建公益性图床:iaimiclub</title>
      <link href="/posts/36842.html"/>
      <url>/posts/36842.html</url>
      
        <content type="html"><![CDATA[<h3 id="公益性图床iaimiImgHost："><a href="#公益性图床iaimiImgHost：" class="headerlink" title="公益性图床iaimiImgHost："></a>公益性图床iaimiImgHost：</h3><p><img src="https://iaimi.cn/images/2021/07/04/2021-07-04-232313.png">    </p><p>地址：  </p><p><code>https://iaimi.cn/  </code><br>或者  </p><ul><li>https :</li></ul><p><code>https://iaimi.cn/</code>   </p><p><code>目前来说套上了腾讯云的CDN</code><a href="https://iaimi.cn/">跳转链接</a>  </p><p>说明（主流使用）：本图床提供图片直连供建站以及博客使用，使用chevereto开源图床引擎。<br><img src="http://nas.iaimi.club/images/2021/07/04/2021-07-04-232328.png">  </p><p><code>tips：</code>图片由于存在直接访问链接，所以设置私密后仍然不是绝对无法访问。在这里建议不要用来储存重要内容！！！  </p><h4 id="一些废话："><a href="#一些废话：" class="headerlink" title="一些废话："></a>一些废话：</h4><p>-图床是自家宅基地自己的nas上搭建的，24小时运转，带宽也是自家非商用带宽。速度上会比较不足（但是搭建的初衷就是小团体使用）完全用爱发电，欢迎注册使用。<br>其实也非常希望能得到推广（bushi）  </p><ul><li><code>Update</code> 2021.7.09</li></ul><p>图床支持强制https跳转以及https链接  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KirinoNetDisk</title>
      <link href="/posts/64543.html"/>
      <url>/posts/64543.html</url>
      
        <content type="html"><![CDATA[<h1 id="自建nextcloud网盘分享"><a href="#自建nextcloud网盘分享" class="headerlink" title="自建nextcloud网盘分享"></a>自建nextcloud网盘分享</h1><p>相当于一个跨平台的webdav  </p><p><strong>网盘地址：</strong> <strong><a href="https://nas.iaimi.cn/"><code>https://nas.iaimi.cn/</code></a></strong>  </p><pre class=" language-bash"><code class="language-bash">https://nas.iaimi.cn/</code></pre><h2 id="实现的功能："><a href="#实现的功能：" class="headerlink" title="实现的功能："></a>实现的功能：</h2><ul><li><p>(1) 开放注册功能<br><img src="https://iaimi.cn/images/2022/04/02/2022-04-02-145732.md.png" alt="2022-04-02-145732.md.png"> </p></li><li><p>(2) 拖拽上传<br>受限于nas主机性能的不足(<code>猜测</code>)or内网穿透服务器带宽限制and内容分发网络(<code>cdn不是很支持post请求</code>)导致上传不是很连贯，并且上传带宽不高(<code>大概两三兆</code>)<br><img src="https://iaimi.cn/images/2022/04/02/2022-04-02-15-27-08.gif"><br><code>也算是占满了学校的上传带宽了</code>  </p></li><li><p>(3) 直链分享</p></li></ul><p><img src="https://iaimi.cn/images/2022/04/02/2022-04-02-15-27-08_1.gif">  </p><p><code>直接支持url下载</code>下载的速度也差不多是二三兆  </p><ul><li>(4) 多平台支持<br>nextcloud不仅仅只有web端，它还<code>支持ios、Android App</code><br><code>甚至还不允许屏幕截图</code>，只能拍照了</li></ul><p>Android:</p><p><a href="https://iaimi.cn/image/GPvC"><img src="https://iaimi.cn/images/2022/04/02/072CF8E9-C8C0-4D53-B4AF-EE2ED22738DF.md.jpg" alt="072CF8E9-C8C0-4D53-B4AF-EE2ED22738DF.md.jpg"></a>   </p><p>ios:<br><a href="https://iaimi.cn/image/GVar"><img src="https://iaimi.cn/images/2022/04/02/IMG_20220402_154940.md.jpg" alt="IMG_20220402_154940.md.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 网盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> docker </tag>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steam 版 Threshold Miku 皮肤</title>
      <link href="/posts/1785.html"/>
      <url>/posts/1785.html</url>
      
        <content type="html"><![CDATA[<h1 id="为-SteamUI-引入-Threshold-Miku-Light"><a href="#为-SteamUI-引入-Threshold-Miku-Light" class="headerlink" title="为 SteamUI 引入 Threshold Miku Light"></a>为 SteamUI 引入 Threshold Miku Light</h1><p><a href="https://iaimi.cn/image/Ea4I"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-202031.png" alt="2022-04-01-202031.png"></a><br><a href="https://github.com/Jack-Myth/Threshold-Miku">github原文链接</a>:</p><pre class=" language-bash"><code class="language-bash">https://github.com/Jack-Myth/Threshold-Miku</code></pre><h2 id="1-安装Threshold-Miku-Light"><a href="#1-安装Threshold-Miku-Light" class="headerlink" title="1.安装Threshold Miku Light"></a>1.安装Threshold Miku Light</h2><ul><li><p>1.<strong>首先找到Steam根目录</strong><br><a href="https://iaimi.cn/image/EzP4"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-185949.png" alt="2022-04-01-185949.png"></a><br><a href="https://iaimi.cn/image/E9FW"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-191020.png" alt="2022-04-01-191020.png"></a></p></li><li><p>2.<strong>找到根目录下的skins文件夹</strong>如何目录中没有此文件夹就创建一个skins文件夹<br><a href="https://iaimi.cn/image/EOvK"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-191109.png" alt="2022-04-01-191109.png"></a>   </p></li><li><ol start="3"><li><a href="https://github.com/Jack-Myth/Threshold-Miku/releases"><strong>下载Threshold.Miku.Light</strong></a>并解压缩至skins文件夹中<br>如果网络环境不行也可以试下<a href="https://nas.iaimi.cn/s/RGCZtqqQgqrs95P">备用下载地址</a>(自建的网盘):</li></ol></li></ul><pre class=" language-bash"><code class="language-bash">https://nas.iaimi.cn/s/RGCZtqqQgqrs95P</code></pre><p><a href="https://iaimi.cn/image/E6ab"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-191835.png" alt="2022-04-01-191835.png"></a>  </p><ul><li>4.<strong>之后打开.exe可执行文件后配置相应分辨率的图片应用即可</strong><br><a href="https://iaimi.cn/image/ECwq"><img src="https://iaimi.cn/images/2022/04/01/2022-04-01-192049.png" alt="2022-04-01-192049.png"></a></li></ul><h2 id="2-在Steam中启用Threshold-Miku-Light-皮肤"><a href="#2-在Steam中启用Threshold-Miku-Light-皮肤" class="headerlink" title="2.在Steam中启用Threshold Miku Light 皮肤"></a>2.在Steam中启用<strong>Threshold Miku Light</strong> 皮肤</h2><ul><li><ol><li>设置内打开界面选择Threshold Miku Light<br><img src="https://iaimi.cn/images/2022/04/02/2022-04-02-143736.png" alt="2022-04-02-143736.png"></li></ol></li><li><ol start="2"><li>设置内打开账户选择参加Steam Beta Update(可选选项建议打开)<br><img src="https://iaimi.cn/images/2022/04/02/2022-04-02-143803.png" alt="2022-04-02-143803.png"></li></ol></li><li><ol start="3"><li>重启Steam生效</li></ol></li></ul><h3 id="拓展：-Photoshop裁剪分辨率技巧"><a href="#拓展：-Photoshop裁剪分辨率技巧" class="headerlink" title="拓展： Photoshop裁剪分辨率技巧"></a>拓展： Photoshop裁剪分辨率技巧</h3><p>例如我们需要裁剪图片至400 * 600 的分辨率<br>我们可以通过缩放以及剪切蒙版来实现  </p><pre><code>ctrl + T 缩放按住shift 可以进行非等比缩放</code></pre><p><a href="https://iaimi.cn/image/ET65"><img src="https://iaimi.cn/images/2022/04/01/blog01.gif" alt="blog01.gif"></a><br>这边录制问题导致<strong>编辑图像调整画布大小</strong>没有录到<br>具体步骤:</p><ol><li>矩形工具画个矩形 ，调整矩形为指定分辨率</li><li>将原图尽量缩放至矩形内  </li><li>将原图调整至矩形图层上层，应用剪切蒙版  </li><li>调整画布大小导出</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> skins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析Go实现</title>
      <link href="/posts/28837.html"/>
      <url>/posts/28837.html</url>
      
        <content type="html"><![CDATA[<h1 id="Go实现的三个算法实例"><a href="#Go实现的三个算法实例" class="headerlink" title="Go实现的三个算法实例:"></a>Go实现的三个算法实例:</h1><ul><li><h2 id="1-汉诺塔问题-递归方法"><a href="#1-汉诺塔问题-递归方法" class="headerlink" title="(1)汉诺塔问题(递归方法)"></a>(1)汉诺塔问题(递归方法)</h2><ul><li><h3 id="此算法是由递归的思想实现的-个人理解仅供参考，如有错误欢迎指出-："><a href="#此算法是由递归的思想实现的-个人理解仅供参考，如有错误欢迎指出-：" class="headerlink" title="此算法是由递归的思想实现的(个人理解仅供参考，如有错误欢迎指出)："></a>此算法是由递归的思想实现的(个人理解仅供参考，如有错误欢迎指出)：</h3></li></ul><p>简单来说就是两层的递归，每一层输出一个然后再两层的递归深入，到最底层输出。</p><ul><li>先看下汉诺塔问题的数学思路:<br><a href="https://iaimi.cn/image/dF6I"><img src="https://iaimi.cn/images/2022/03/11/9E687E2A-15DD-4AD2-B944-A37A3F636F2B.jpg" alt="9E687E2A-15DD-4AD2-B944-A37A3F636F2B.jpg"></a><br><img src="https://iaimi.cn/images/2022/03/11/3FFCCD28-05A0-4B6F-9195-7735E44AE96F.jpg" alt="3FFCCD28-05A0-4B6F-9195-7735E44AE96F.jpg"></li></ul></li><li><h4 id="代码剖解："><a href="#代码剖解：" class="headerlink" title="代码剖解："></a>代码剖解：</h4></li></ul><p><a href="https://iaimi.cn/image/dwXK"><img src="https://iaimi.cn/images/2022/03/11/AA00BC40-4C18-4291-B992-7057FFC3EBDE.jpg" alt="AA00BC40-4C18-4291-B992-7057FFC3EBDE.jpg"></a>   </p><p><a href="https://iaimi.cn/image/dku5"><img src="https://iaimi.cn/images/2022/03/11/8F6C3418-4A4E-4AE9-868C-1396C0B5D5C3.jpg" alt="8F6C3418-4A4E-4AE9-868C-1396C0B5D5C3.jpg"></a>   </p><ul><li><h4 id="原件-gt-lt"><a href="#原件-gt-lt" class="headerlink" title="原件:  &gt;.&lt;!!"></a>原件:  &gt;.&lt;!!</h4></li></ul><p><a href="https://iaimi.cn/image/diDg"><img src="https://iaimi.cn/images/2022/03/11/IMG_20220311_115816.jpg" alt="IMG_20220311_115816.jpg"></a>   </p><p><a href="https://iaimi.cn/image/d1da"><img src="https://iaimi.cn/images/2022/03/11/IMG_20220311_115806.jpg" alt="IMG_20220311_115806.jpg"></a></p><h4 id="汉诺塔问题具体代码如下"><a href="#汉诺塔问题具体代码如下" class="headerlink" title="汉诺塔问题具体代码如下:"></a>汉诺塔问题具体代码如下:</h4><pre class=" language-bash"><code class="language-bash">package main<span class="token function">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span>func hannuota<span class="token punctuation">(</span>n int, A, B, C string<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> 1 <span class="token operator">||</span> n <span class="token operator">></span> 20 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> 1 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        fmt.Printf<span class="token punctuation">(</span><span class="token string">"盘子%d从%s柱子移动到%s柱子\n"</span>, n, A, C<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        hannuota<span class="token punctuation">(</span>n-1, A, C, B<span class="token punctuation">)</span>        fmt.Printf<span class="token punctuation">(</span><span class="token string">"盘子%d从%s柱子移动到%s柱子\n"</span>, n, A, C<span class="token punctuation">)</span>        hannuota<span class="token punctuation">(</span>n-1, B, A, C<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>func main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    a, b, c :<span class="token operator">=</span> <span class="token string">"A"</span>, <span class="token string">"B"</span>, <span class="token string">"C"</span>    var val int    fmt.Println<span class="token punctuation">(</span><span class="token string">"请输入要移动的盘子数（1-20之间）：N="</span><span class="token punctuation">)</span>    fmt.Scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>val<span class="token punctuation">)</span>    hannuota<span class="token punctuation">(</span>val, a, b, c<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><a href="https://iaimi.cn/image/K0jA"><img src="https://iaimi.cn/images/2022/03/10/2022-03-10-211341.png" alt="2022-03-10-211341.png"></a>  </p><ul><li><h2 id="2-斐波那契问题"><a href="#2-斐波那契问题" class="headerlink" title="(2) 斐波那契问题"></a>(2) 斐波那契问题</h2></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        c <span class="token operator">&lt;-</span> x        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> v <span class="token builtin">int</span>    <span class="token keyword">var</span> fib <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fib <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fib<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d项是%v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> fib<span class="token punctuation">[</span>v<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> sum <span class="token builtin">int</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> fib<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"前%d项和是%d\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://iaimi.cn/image/KKTT"><img src="https://iaimi.cn/images/2022/03/10/2022-03-10-211629.png" alt="2022-03-10-211629.png"></a>  </p><ul><li><h2 id="3-八皇后问题处理程序"><a href="#3-八皇后问题处理程序" class="headerlink" title="(3) 八皇后问题处理程序"></a>(3) 八皇后问题处理程序</h2></li></ul><pre class=" language-bash"><code class="language-bash">package main<span class="token function">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span>//八皇后问题//记录打印总次数var count int <span class="token operator">=</span> 0//使用一维数组表示棋盘 第i个元素表示第i个皇后，第i行，值表示该皇后在第几列var data <span class="token punctuation">[</span><span class="token punctuation">]</span>int <span class="token operator">=</span> make<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>int, 8<span class="token punctuation">)</span>func main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        put<span class="token punctuation">(</span>0<span class="token punctuation">)</span>    fmt.Println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//思路： 首先，需要有一个放置皇后的方法func put<span class="token punctuation">(</span>n int<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    //当放置的n为8时，即为第9个皇后  因为数组从0开始    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> 8<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        // fmt.Println<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        fmt.Printf<span class="token punctuation">(</span><span class="token string">"方案%d:"</span>,count+1<span class="token punctuation">)</span>        <span class="token keyword">for</span> i:<span class="token operator">=</span>0 <span class="token punctuation">;</span> i <span class="token operator">&lt;</span>8<span class="token punctuation">;</span> i++<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            fmt.Printf<span class="token punctuation">(</span><span class="token string">" %d行%d列 "</span>,i+1,data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+1<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        fmt.Println<span class="token punctuation">(</span><span class="token punctuation">)</span>        count++        <span class="token keyword">return</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    //如果不是第9个皇后，那么就遍历来放置第1到8个皇后    <span class="token keyword">for</span> i :<span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 8<span class="token punctuation">;</span> i ++<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        //先把当前的子n 放在i这个位置上        data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i        //判断该点是否可以进行落子        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">(</span>n<span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            put<span class="token punctuation">(</span>n + 1<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//检查皇后是否在同一列或者在同一斜线func check<span class="token punctuation">(</span>n int<span class="token punctuation">)</span> bool<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">for</span> i :<span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        //第一个 data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">[</span>n<span class="token punctuation">]</span>  我们此处用下标代表第几行  用数值代表第几列  那么当第i行的皇后与第n行的皇后在同一列        //就不符合题意了        //第二个  abs<span class="token punctuation">(</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> - data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> abs<span class="token punctuation">(</span>i - n<span class="token punctuation">)</span>   n 和 i代表皇后的横坐标  data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>代表皇后的纵坐标  那么两个皇后横坐标相减  纵坐标相减相同时        //其两个皇后构成了一个与棋盘45°的夹角，棋盘是正方形，所以 此时两个皇后处在同一斜线上        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span> abs<span class="token punctuation">(</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> - data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> abs<span class="token punctuation">(</span>i - n<span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//goLang没有整数的取绝对值方法  自己写一个func abs<span class="token punctuation">(</span>n int<span class="token punctuation">)</span> int<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> 0<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> -n    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> n<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><a href="https://iaimi.cn/image/KG96"><img src="https://iaimi.cn/images/2022/03/10/2022-03-10-211723.png" alt="2022-03-10-211723.png"></a><br><a href="https://iaimi.cn/image/KErf"><img src="https://iaimi.cn/images/2022/03/10/2022-03-10-211737.png" alt="2022-03-10-211737.png"></a><br><a href="https://iaimi.cn/image/KrnG"><img src="https://iaimi.cn/images/2022/03/10/2022-03-10-211816.png" alt="2022-03-10-211816.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习之路</title>
      <link href="/posts/39007.html"/>
      <url>/posts/39007.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft自建服务器</title>
      <link href="/posts/46539.html"/>
      <url>/posts/46539.html</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="更新2022-3-28"><a href="#更新2022-3-28" class="headerlink" title="更新2022.3.28"></a>更新2022.3.28</h3></li></ul><h4 id="由于使用的是境外的主机，延迟太高体验太差，服务器目前暂时停止运行"><a href="#由于使用的是境外的主机，延迟太高体验太差，服务器目前暂时停止运行" class="headerlink" title="由于使用的是境外的主机，延迟太高体验太差，服务器目前暂时停止运行"></a><strong>由于使用的是境外的主机，延迟太高体验太差，服务器目前暂时停止运行</strong></h4><ul><li><h3 id="更新2022-2-12"><a href="#更新2022-2-12" class="headerlink" title="更新2022.2.12"></a>更新2022.2.12</h3></li></ul><p><del>服务器地址<code>152.69.199.34</code></del><br>改成了搬瓦工的vps真的稳<br>这家pacificrack已经加入黑名单，虽然便宜一年才10$，但是存在严重的超开现象（真正能跑到的带宽很小而且很不稳定）<br><del><a href="https://pacificrack.com/">https://pacificrack.com/</a></del><br>推荐使用搬瓦工，虽然比较贵但是稳定不少<br><a href="https://bwh81.net/cart.php?a=confproduct&i=0">https://bwh81.net/cart.php?a=confproduct&amp;i=0</a><br>实测下来的延迟以及丢包情况<br><img src="https://iaimi.cn/images/2022/02/12/2022-02-12-143405.png"><br>还能接受，实际用起来也足够<br>一年46$有点小贵<br><a href="https://iaimi.cn/image/F9F5"><img src="https://iaimi.cn/images/2022/02/12/IMG_20220212_143628.jpg" alt="IMG_20220212_143628.jpg"></a></p><hr><h2 id="自建MC-JAVA服务端以供hxd开黑使用"><a href="#自建MC-JAVA服务端以供hxd开黑使用" class="headerlink" title="自建MC JAVA服务端以供hxd开黑使用"></a>自建MC JAVA服务端以供hxd开黑使用</h2><h3 id="服务端我选择的是java版的1-16-3"><a href="#服务端我选择的是java版的1-16-3" class="headerlink" title="服务端我选择的是java版的1.16.3"></a>服务端我选择的是java版的1.16.3</h3><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li><h4 id="1、由于搭建的服务端为java版，所以推荐使用pc端的PCL2来作为客户端游玩"><a href="#1、由于搭建的服务端为java版，所以推荐使用pc端的PCL2来作为客户端游玩" class="headerlink" title="1、由于搭建的服务端为java版，所以推荐使用pc端的PCL2来作为客户端游玩"></a>1、由于搭建的服务端为java版，所以推荐使用pc端的PCL2来作为客户端游玩</h4></li></ul><p>PCL2下载链接： </p><pre class=" language-bash"><code class="language-bash">https://wwi.lanzoup.com/ii9Ppzrlled</code></pre><p>下载PCL2后安装1.16.3版本的Minecraft如需光影勾选相应版本的OptiFine即可<br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-194543.png"><br>进入游戏后选择多人游戏，填入服务器地址即可<br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-182621.png"><br><img src="https://iaimi.cn/images/2022/02/12/2022-02-12-142347.png"></p><ul><li><h4 id="2、服务器的地址：120-48-41-231"><a href="#2、服务器的地址：120-48-41-231" class="headerlink" title="2、服务器的地址：120.48.41.231"></a>2、服务器的地址：<code>120.48.41.231</code></h4></li></ul><pre class=" language-shell"><code class="language-shell">120.48.41.231</code></pre><h2 id="安卓游玩java版也不是不行"><a href="#安卓游玩java版也不是不行" class="headerlink" title="安卓游玩java版也不是不行"></a>安卓游玩java版也不是不行</h2><p>这个项目解决了安卓游玩MCjava的问题，但是肯定性能会不太行<br><code>https://github.com/PojavLauncherTeam/PojavLauncher</code>  </p><h2 id="IOS游玩java版Mc解决-需要越狱"><a href="#IOS游玩java版Mc解决-需要越狱" class="headerlink" title="IOS游玩java版Mc解决(需要越狱)"></a>IOS游玩java版Mc解决(需要越狱)</h2><p><code>https://github.com/PojavLauncherTeam/PojavLauncher_iOS</code></p><h3 id="关于光影"><a href="#关于光影" class="headerlink" title="关于光影"></a>关于光影</h3><p>我自己目前使用的两个光影<br>下载地址：<code>https://wwi.lanzoup.com/b00vba9re</code> 密码:hd9z    </p><pre class=" language-bash"><code class="language-bash">https://wwi.lanzoup.com/b00vba9re</code></pre><p><code>不用解压</code>放到这个目录:<code>..\MC\.minecraft\versions\1.16.3-OptiFine_G5\shaderpacks</code><br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-195549.png"><br>也可以直接在游戏中打开此目录<br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-195714.png" alt="2022-02-08-195714.png"><br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-195739.png" alt="2022-02-08-195739.png">  </p><p>之后在游戏选项中的光影选项中将其框选即可启用<br><img src="https://iaimi.cn/images/2022/02/08/2022-02-08-195714.png" alt="2022-02-08-195714.png"><br>侧边的选项卡以及光影设置可以用来调节  </p>]]></content>
      
      
      
        <tags>
            
            <tag> MC </tag>
            
            <tag> 自建服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跑TM的跑</title>
      <link href="/posts/30674.html"/>
      <url>/posts/30674.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ipad pro 开箱</title>
      <link href="/posts/7930.html"/>
      <url>/posts/7930.html</url>
      
        <content type="html"><![CDATA[<h2 id="8月22日"><a href="#8月22日" class="headerlink" title="- 8月22日"></a>- 8月22日</h2><ul><li><h3 id="期待已久（两天）的pad终于到货了-（多图警告）"><a href="#期待已久（两天）的pad终于到货了-（多图警告）" class="headerlink" title="期待已久（两天）的pad终于到货了 （多图警告）"></a>期待已久（两天）的pad终于到货了 （多图警告）</h3></li></ul><p>检查外包装没有问题<br><img src="https://iaimi.cn/images/2021/08/23/mmexport1629600294988.jpg"><br>接下来拆开外层纸盒<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_103755.jpg"><br>首先映入眼帘的独特的包装<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_103918.jpg"><br>利用塑料膜的张力固定这保护方式还是头一次见<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_103939.jpg"><br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_103954.jpg"><br>小心翼翼地撕开‘保鲜膜’<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_105001.jpg">  </p><p><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_105047.jpg"><br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_105123.jpg"><br>pro是真的薄<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210822_105113.jpg"><br>等壳到货了一起弄，暂时先放进骨灰盒里了（买了个祖宗）<br><img src="https://iaimi.cn/images/2021/08/23/IMG_20210823_092240.jpg"><br>未完待续…<br><img src="https://iaimi.cn/images/2021/08/13/55550732_p0.jpg"><br><img src="/"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixiv排行榜抓取</title>
      <link href="/posts/44706.html"/>
      <url>/posts/44706.html</url>
      
        <content type="html"><![CDATA[<h2 id="Pixiv图片爬取（python实现）"><a href="#Pixiv图片爬取（python实现）" class="headerlink" title="Pixiv图片爬取（python实现）"></a>Pixiv图片爬取（python实现）</h2><p>源码的下载如下： </p><p><a href="https://github.com/OneSidePass/Pixiv_get">github仓库地址</a><br><a href="https://wwa.lanzous.com/ivPwZkwctjc">压缩包下载</a></p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>里面有三个文件，分别是：<br><strong>#1.爬虫程序</strong><br>Pixiv_get.py<br><strong>#2.自建代理ip池</strong><br>ip_pool_foreign.txt<br><strong>#3.爬取某网站国外ip</strong><br>ip_pool_foreign.py  </p><p>这边展开爬虫程序代码方便查阅：  </p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> re<span class="token function">import</span> requestsfrom fake_useragent <span class="token function">import</span> UserAgent<span class="token function">import</span> random<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span>from itertools <span class="token function">import</span> productheaders <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'authority'</span><span class="token keyword">:</span> <span class="token string">'www.pixiv.net'</span>,            <span class="token string">'sec-ch-ua'</span><span class="token keyword">:</span> <span class="token string">'"Google Chrome";v="87", " Not;A Brand";v="99", "Chromium";v="87"'</span>,            <span class="token string">'accept'</span><span class="token keyword">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span>,            <span class="token string">'x-requested-with'</span><span class="token keyword">:</span> <span class="token string">'XMLHttpRequest'</span>,            <span class="token string">'sec-ch-ua-mobile'</span><span class="token keyword">:</span> <span class="token string">'?0'</span>,            <span class="token string">'user-agent'</span><span class="token keyword">:</span> UserAgent<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span>False<span class="token punctuation">)</span>.random,            <span class="token string">'sec-fetch-site'</span><span class="token keyword">:</span> <span class="token string">'same-origin'</span>,            <span class="token string">'sec-fetch-mode'</span><span class="token keyword">:</span> <span class="token string">'cors'</span>,            <span class="token string">'sec-fetch-dest'</span><span class="token keyword">:</span> <span class="token string">'empty'</span>,            <span class="token string">'referer'</span><span class="token keyword">:</span> <span class="token string">'https://www.pixiv.net/ranking.php?mode=daily&amp;content=illust'</span>,  <span class="token comment" spellcheck="true"># 防盗链</span>            <span class="token string">'accept-language'</span><span class="token keyword">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span>,            <span class="token comment" spellcheck="true"># 'referer':'https://www.pixiv.net/artworks/87255676',  # 防盗链</span>            <span class="token string">'cookie'</span><span class="token keyword">:</span> <span class="token string">'first_visit_datetime_pc=2021-01-25+17%3A52%3A04; p_ab_id=2; p_ab_id_2=7; p_ab_d_id=1222487481; yuid_b=GCWEdSA; __cfduid=d4e70456039de82435bf2d68ec263371a1611638726; __utmz=235335808.1611638731.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); _ga=GA1.2.592285702.1611638731; _gid=GA1.2.1754984064.1611638789; device_token=073c94a0dec1fe7a566be55ad2ff83ab; c_type=19; a_type=0; b_type=1; ki_r=; login_ever=yes; __utmc=235335808; ki_s=; __utma=235335808.592285702.1611638731.1611657616.1611664200.4; PHPSESSID=49568357_wQL7nOLgxtsC5sKbz0oVTLarRNmNLqIN; privacy_policy_agreement=2; __utmv=235335808.|2=login%20ever=yes=1^3=plan=normal=1^5=gender=male=1^6=user_id=49568357=1^9=p_ab_id=2=1^10=p_ab_id_2=7=1^11=lang=zh=1; tag_view_ranking=OT4SuGenFI~kP7msdIeEU~18NCcMsHl5~jaqkarpwly~bXMh6mBhl8~n87ZpuRDS3~HY55MqmzzQ~lH5YZxnbfC~reR7DUAWuG~kGYw4gQ11Z~gpglyfLkWs~HLWLeyYOUF~azESOjmQSV~RTJMXD26Ak~Lt-oEicbBr~oYAm9klH0r~PTyxATIsK0~tK1rVKwWT5~y489EcSQ8H~fq5m22wNFl~jH0uD88V6F~2bq8SNVWly~j7DYHEocqe~SY1hWzTBSP~SVRsxOS1dp~tO5Om4-52p~rsKgvIMw_U~JdNgKFcAjN~eErTeDrRV4~Js5EBY4gOW~PRLZzOBnry~tr4jG_N1yz~gUIg7nrQgl~RcahSSzeRf~sFPxX8lk4q~aKhT3n4RHZ~D0nMcn6oGk~-StjcwdYwv~jk9IzfjZ6n~92z8RZmGQ6; ki_t=1611638990330%3B1611638990330%3B1611670576819%3B1%3B19; tags_sended=1; categorized_tags=CADCYLsad0~IVwLyT8B6k~RcahSSzeRf~RsIQe1tAR0~bXMh6mBhl8~kP7msdIeEU~mt-cXqHhAM; __utmt=1; __cf_bm=be3692187df7cf718e1bfbf11a7d31dc0bf00119-1611678056-1800-AZLiFR3QWIpm9kfIjrOFBX3QG0ssT9659X5pB2xMSU4rl9EHln8qreQAsZ2AP3dRcGQxXsk/iMiOsWhUo4icbqymA3a+doquASmZ15aASNA4bQjiOg5Yqwsl609jbxlT9Y8DBPKulySuu9qjIGlTP6ciriwisEducqbMO9OPFeDC; __utmb=235335808.77.9.1611678055106'</span>,            <span class="token comment" spellcheck="true"># 此处需替换成真实的，换成你自己的cookie</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>class Pixiv_DownLoad<span class="token punctuation">(</span><span class="token punctuation">)</span>:    def get_proxy<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 读取代理池ip并随机返回一个</span>        with open<span class="token punctuation">(</span><span class="token string">'ip_pool_foreign.txt'</span>, <span class="token string">'r'</span><span class="token punctuation">)</span> as f:            <span class="token keyword">for</span> line <span class="token keyword">in</span> f:                result.append<span class="token punctuation">(</span>line.strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">))</span>        ips <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>None, result<span class="token punctuation">))</span>        proxies <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'http': random.choice(ips)&amp;#125;</span>        <span class="token keyword">return</span> proxies    def illust_id<span class="token punctuation">(</span>self,p<span class="token punctuation">)</span>:        global headers        params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'mode'</span><span class="token keyword">:</span> <span class="token string">'daily'</span>,            <span class="token string">'content'</span><span class="token keyword">:</span> <span class="token string">'illust'</span>,            <span class="token string">'p'</span><span class="token keyword">:</span> p,            <span class="token string">'format'</span><span class="token keyword">:</span> <span class="token string">'json'</span>,        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        url <span class="token operator">=</span> <span class="token string">'https://www.pixiv.net/ranking.php'</span>  <span class="token comment" spellcheck="true"># pixiv插画排行榜url</span>        totals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        headers<span class="token punctuation">[</span><span class="token string">'referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'https://www.pixiv.net/ranking.php?mode=daily&amp;content=illust'</span>        try:            response <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>url,headers<span class="token operator">=</span>headers,params<span class="token operator">=</span>params,proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>50<span class="token punctuation">)</span>:                try:                    target <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'contents'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                    ex <span class="token operator">=</span> <span class="token string">'https://i.pximg.net/c/240x480/img-master/img(.*?)_p0'</span>  <span class="token comment" spellcheck="true"># ex 皆为正则的格式</span>                    final <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>ex, target<span class="token punctuation">)</span>                    middle <span class="token operator">=</span> final<span class="token punctuation">[</span>0<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># middle 为中间变量随便取的</span>                    ex2 <span class="token operator">=</span> <span class="token string">'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</span>                    name <span class="token operator">=</span> re.search<span class="token punctuation">(</span>ex2, middle<span class="token punctuation">)</span>.group<span class="token punctuation">(</span>0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用正则提取出pixivID</span>                    final_url <span class="token operator">=</span> f<span class="token string">"https://i.pximg.net/img-master/img&amp;#123;final[0]&amp;#125;_p0_master1200.jpg"</span> # 拼接url                    m <span class="token operator">=</span> <span class="token punctuation">(</span>final_url,name<span class="token punctuation">)</span>                    totals.append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                except IndexError:                    print<span class="token punctuation">(</span><span class="token string">'爬取已完成'</span><span class="token punctuation">)</span>        except:            proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>            response <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>url, headers<span class="token operator">=</span>headers, params<span class="token operator">=</span>params, proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>50<span class="token punctuation">)</span>:                try:                    target <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'contents'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                    ex <span class="token operator">=</span> <span class="token string">'https://i.pximg.net/c/240x480/img-master/img(.*?)_p0'</span>  <span class="token comment" spellcheck="true"># ex 皆为正则的格式</span>                    final <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>ex, target<span class="token punctuation">)</span>                    middle <span class="token operator">=</span> final<span class="token punctuation">[</span>0<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># middle 为中间变量随便取的</span>                    ex2 <span class="token operator">=</span> <span class="token string">'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</span>                    name <span class="token operator">=</span> re.search<span class="token punctuation">(</span>ex2, middle<span class="token punctuation">)</span>.group<span class="token punctuation">(</span>0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用正则提取出pixivID</span>                    final_url <span class="token operator">=</span> f<span class="token string">"https://i.pximg.net/img-master/img&amp;#123;final[0]&amp;#125;_p0_master1200.jpg"</span>  # 拼接url                    m <span class="token operator">=</span> <span class="token punctuation">(</span>final_url, name<span class="token punctuation">)</span>                    totals.append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                except IndexError:                    print<span class="token punctuation">(</span><span class="token string">'爬取已完成'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> totals <span class="token comment" spellcheck="true">#返回最终图片url，以及pixivID</span>    def img_download<span class="token punctuation">(</span>self,target_url,name<span class="token punctuation">)</span>:        global headers        path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\pic_downloaded"</span><span class="token punctuation">)</span>:            os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\pic_downloaded"</span><span class="token punctuation">)</span>        file_path <span class="token operator">=</span> f<span class="token string">"&amp;#123;path&amp;#125;"</span> + f<span class="token string">"\\pic_downloaded\\&amp;#123;name&amp;#125;.jpg"</span>        with open<span class="token punctuation">(</span>file_path, <span class="token string">'wb+'</span><span class="token punctuation">)</span> as f:            try:                proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>                headers<span class="token punctuation">[</span><span class="token string">'referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">'https://www.pixiv.net/artworks/&amp;#123;name&amp;#125;'</span>                f.write<span class="token punctuation">(</span>requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>target_url,headers<span class="token operator">=</span>headers,proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.content<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># time.sleep(random.randint(2,5))</span>                print<span class="token punctuation">(</span><span class="token string">'成功下载图片：&amp;#123;&amp;#125;.jpg'</span>.format<span class="token punctuation">(</span>name<span class="token punctuation">))</span>            except Exception:                print<span class="token punctuation">(</span><span class="token string">'成功下载图片：&amp;#123;&amp;#125;.jpg'</span>.format<span class="token punctuation">(</span>name<span class="token punctuation">))</span>download <span class="token operator">=</span> Pixiv_DownLoad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span>1, 12<span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true"># 可以修改这里 p 的循环范围（每50张一个p）</span>    try:        total <span class="token operator">=</span> download.illust_id<span class="token punctuation">(</span>p<span class="token operator">=</span>p<span class="token punctuation">)</span>        time.sleep<span class="token punctuation">(</span>random.randint<span class="token punctuation">(</span>10, 20<span class="token punctuation">))</span>  <span class="token comment" spellcheck="true"># 随机等待时间</span>        <span class="token keyword">for</span> target_url,name <span class="token keyword">in</span> total:            download.img_download<span class="token punctuation">(</span>target_url,name<span class="token punctuation">)</span>    except IndexError:        print<span class="token punctuation">(</span><span class="token string">'所有图片已爬取完成'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>f<span class="token string">'循环到第&amp;#123;p&amp;#125;页了哦！'</span><span class="token punctuation">)</span>   # p为页码位置，如中途中断可自行修改for循环中的p的范围（左闭右开）</code></pre><hr><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li><p>这边需要注意的是因为P站需要登录才能访问，所以<strong>需要手动修改<code>headers</code>里的<code>cookie</code>值</strong><br>cookie值从网站中获取，F12进入控制台<br><img src="http://fp1.fghrsh.net/2021/01/27/bf8073df62839c26d10055390097bd5f.png"><br><img src="http://fp1.fghrsh.net/2021/01/27/e6fd8ca58715c5ae4b1f9e67c209641e.png">  </p></li><li><p>tips: 复制cookie冒号后面的内容至headers里cookie的相对应键值（注意单引号）（复制进单引号内）   </p></li><li><p>如果爬取中断可尝试更改代码末尾for循环内的p的范围实现断点续爬  </p></li><li><p><strong>还有一点是需要挂代理来爬取的（VPN）</strong>，没尝试过反代来访问，可自行尝试</p></li><li><p>还有就是代理ip池的.txt文件需要同爬虫程序处于相同目录<br>目前只支持在win环境下使用</p></li></ul><h3 id="Finally（目标-："><a href="#Finally（目标-：" class="headerlink" title="Finally（目标)："></a>Finally（目标)：</h3><ul><li>后面会尝试实现多线程（异步线程之类的）来提高爬取速度</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Pixiv </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sayobot</title>
      <link href="/posts/41831.html"/>
      <url>/posts/41831.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sayobot："><a href="#Sayobot：" class="headerlink" title="Sayobot："></a>Sayobot：</h1><h2 id="基于python实现前端go-cqhttp实现后端的聊天机器人"><a href="#基于python实现前端go-cqhttp实现后端的聊天机器人" class="headerlink" title="基于python实现前端go-cqhttp实现后端的聊天机器人"></a>基于<code>python</code>实现前端<code>go-cqhttp</code>实现后端的聊天机器人</h2><hr><h2 id="使用-NoneBot-和-go-cqhttp-搭建-QQ-群聊机器人"><a href="#使用-NoneBot-和-go-cqhttp-搭建-QQ-群聊机器人" class="headerlink" title="使用 NoneBot 和 go-cqhttp 搭建 QQ 群聊机器人"></a>使用 <code>NoneBot</code> 和 <code>go-cqhttp</code> 搭建 QQ 群聊机器人</h2><p>原先 NoneBot 的文档过于老旧，有些内容可能没有参考价值。例如官方 README 中节选：</p><p>NoneBot 是一个基于 酷Q 的 Python 异步 QQ 机器人框架，它会对 QQ 机器人收到的消息进行解析和处理，并以插件化的形式，分发给消息所对应的命令处理器和自然语言处理器，来完成具体的功能。<br>除了起到解析消息的作用，NoneBot 还为插件提供了大量实用的预设操作和权限控制机制，尤其对于命令处理器，它更是提供了完善且易用的会话机制和内部调用机制，以分别适应命令的连续交互和插件内部功能复用等需求。<br>这里的 酷Q 早就在八月就凉了。新手看到后可能会觉得一头雾水。于是本文的目的即是演示从零搭建一个 QQ 机器人，读完后或许可以消除新人的疑惑。  </p><hr><ul><li><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2></li></ul><p>前提：本人使用的<code>IDE</code>为<code>pycharm</code>，这里推荐一个万用的代码编辑器<code>VSCode</code>，可以先<a href="https://wwa.lanzous.com/iDUX4kors6f">下载</a>下来使用</p><p>首先先搭建好python环境，这里可以从我的蓝奏云<a href="https://wwa.lanzous.com/iESSGkorroh">下载</a>3.9的python（注意这里的python是win_64bit版）MacOS可以自行到<a href="https://www.python.org/doc/">官网</a>下。<br>下载好后执行安装，注意勾选上下面的Add Path 这里很重要，自动帮你配置好环境变量<br><img src="https://s3.ax1x.com/2021/01/22/sI8PiQ.png"><br>无脑下一步安装即可，这里就不进行演示了  </p><ul><li>文件的大致结构如下：</li></ul><pre><code>sayobot/└── Sayo/    ├── bot.py         # bot.py 实例化bot    ├── bot_config.py  # bot_config.py bot配置    ├── services/      # services为插件提供支持和服务    ├── sources/       # sources暂时存放数据    └── bot_plugins/   # bot_plugins存放插件        ├── ping.py          ├── jrrp.py          └── weather.py</code></pre><h3 id="这里可以从我的github上download-Sayo-源文件"><a href="#这里可以从我的github上download-Sayo-源文件" class="headerlink" title="这里可以从我的github上download Sayo 源文件"></a><strong>这里可以从我的github上<a href="https://github.com/OneSidePass/Sayobot_2333">download</a> <code>Sayo</code> 源文件</strong></h3><p> 此时你只需要配置的是 Sayo&#x2F;bot_config.py 里的SUPERUSERS &#x3D; {xxxxxx}（这里就是机器人主人的QQ号）以及<strong>配置好go—cqhttp</strong>就完成了第一步的配置<br> 这里配置go—cqhttp我另外写了一篇文章：<a href="https://osp2333.xyz/posts/24122.html">https://osp2333.xyz/posts/24122.html</a>  </p><hr><ul><li><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2></li></ul><p>需要安装的模块： (在命令行中安装python包)<br><img src="https://s3.ax1x.com/2021/01/22/sINFKA.png"><br>首先使用 <code>pip</code> 安装 <code>nonebot</code> （截至此稿完成最新版本为 1.8.0）：  </p><pre><code>$ pip install nonebot  </code></pre><p>因为要获取天气，我们要请求 API，所以需要合适的库来提我们做 HTTP 请求。在开始之前，先引入如下 pip 包：</p><pre><code>$ pip install httpx aiocache </code></pre><p>还有很多：  </p><pre><code>$ pip install jieba$ pip install requests$ pip install bs4$ pip install datetime$ pip install pytz</code></pre><p>安装完这些支持包后就可以运行机器人的前端了<br>打开cmd命令cd 到目标目录后执行：<code>python bot.py</code> 回车  </p><pre><code> $ cd Sayo &amp;&amp; python bot.pyujson module not found, using jsonmsgpack not installed, MsgPackSerializer unavailable[2020-11-11 02:47:36,123 nonebot] cn: Succeeded to import &quot;bot_plugins.ping&quot;[2020-11-11 02:47:36,124 nonebot] cn: Running on 127.0.0.1:8765Running on http://127.0.0.1:8765 (CTRL + C to quit)[2020-11-11 02:47:36,209] Running on http://127.0.0.1:8765 (CTRL + C to quit)</code></pre><p> 忽略报错，操作示例：<br> <img src="https://s3.ax1x.com/2021/01/22/sId1rd.png"><br> 这样同时运行前端sayobot以及后端go-cqhttp就完成了（通过同一个地址以及端口进行通信）<br> 验证：<br> <img src="https://s3.ax1x.com/2021/01/22/sI0Atx.png"></p><h4 id="·-最后还需要一台云主机用相同的流程部署到云端实现24小时运作"><a href="#·-最后还需要一台云主机用相同的流程部署到云端实现24小时运作" class="headerlink" title="· 最后还需要一台云主机用相同的流程部署到云端实现24小时运作"></a>· 最后还需要一台云主机用相同的流程部署到云端实现24小时运作</h4><h4 id="·-相关帮助文档："><a href="#·-相关帮助文档：" class="headerlink" title="· 相关帮助文档："></a>· 相关帮助文档：</h4><p><a href="https://docs.nonebot.dev/api.html#message-t"><code>1.NoneBot_API</code></a><br><a href="https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md"><code>2.onebot_api</code></a>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> QQ_bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-cqhttp</title>
      <link href="/posts/24122.html"/>
      <url>/posts/24122.html</url>
      
        <content type="html"><![CDATA[<h1 id="go-cqhttp-（非常强大的’虚拟’客户端）"><a href="#go-cqhttp-（非常强大的’虚拟’客户端）" class="headerlink" title="go-cqhttp （非常强大的’虚拟’客户端）"></a>go-cqhttp <strong>（非常强大的’虚拟’客户端）</strong></h1><h2 id="两种方法实现"><a href="#两种方法实现" class="headerlink" title="两种方法实现"></a>两种方法实现</h2><p>第一种方法需要在 Sayo 下创建 gocqhttp 文件夹，到其<a href="https://github.com/Mrs4s/go-cqhttp/releases"> <code>release</code> </a>页面里下载适合自己平台的可执行文件并且解压到到此文件夹中（至截稿版本为 v0.9.38-fix1 ，若因版本更新导致配置文件格式变化，请参照与其默认配置不同处）。在相同的目录下创建 <code>go-cqhttp</code> 的配置文件，如下：<br><code>Sayobot/gocqhttp/config.json</code>: (放置于 Sayo 同级目录即可)</p><pre class=" language-yaml"><code class="language-yaml">&amp;<span class="token comment" spellcheck="true">#123;</span>  <span class="token key atrule">"uin"</span><span class="token punctuation">:</span> <span class="token number">11111111</span><span class="token punctuation">,</span>  <span class="token key atrule">"password"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>  <span class="token key atrule">"encrypt_password"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>  <span class="token key atrule">"password_encrypted"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token key atrule">"enable_db"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>  <span class="token key atrule">"access_token"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token key atrule">"relogin"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>    <span class="token key atrule">"relogin_delay"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token key atrule">"max_relogin_times"</span><span class="token punctuation">:</span> <span class="token number">0</span>  &amp;<span class="token comment" spellcheck="true">#125;,</span>  <span class="token key atrule">"_rate_limit"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>    <span class="token key atrule">"frequency"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token key atrule">"bucket_size"</span><span class="token punctuation">:</span> <span class="token number">1</span>  &amp;<span class="token comment" spellcheck="true">#125;,</span>  <span class="token key atrule">"ignore_invalid_cqcode"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>  <span class="token key atrule">"force_fragmented"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>  <span class="token key atrule">"heartbeat_interval"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token key atrule">"http_config"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>    <span class="token key atrule">"host"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token key atrule">"port"</span><span class="token punctuation">:</span> <span class="token number">5700</span><span class="token punctuation">,</span>    <span class="token key atrule">"timeout"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token key atrule">"post_urls"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;&amp;#125;</span>  &amp;<span class="token comment" spellcheck="true">#125;,</span>  <span class="token key atrule">"ws_config"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>    <span class="token key atrule">"host"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token key atrule">"port"</span><span class="token punctuation">:</span> <span class="token number">6700</span>  &amp;<span class="token comment" spellcheck="true">#125;,</span>  <span class="token key atrule">"ws_reverse_servers"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    &amp;<span class="token comment" spellcheck="true">#123;</span>      <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>      <span class="token key atrule">"reverse_url"</span><span class="token punctuation">:</span> <span class="token string">"ws://127.0.0.1:8765/ws"</span><span class="token punctuation">,</span>      <span class="token key atrule">"reverse_api_url"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token key atrule">"reverse_event_url"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token key atrule">"reverse_reconnect_interval"</span><span class="token punctuation">:</span> <span class="token number">3000</span>    &amp;<span class="token comment" spellcheck="true">#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token key atrule">"post_message_format"</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>  <span class="token key atrule">"debug"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>  <span class="token key atrule">"log_level"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token key atrule">"web_ui"</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;</span>    <span class="token key atrule">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>    <span class="token key atrule">"host"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token key atrule">"web_ui_port"</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">,</span>    <span class="token key atrule">"web_input"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  &amp;<span class="token comment" spellcheck="true">#125;</span>&amp;<span class="token comment" spellcheck="true">#125;</span></code></pre><p>在这里前两个配置（”uin”, “password”）是机器人登录 QQ 号和密码。  </p><p><strong>由于 nonebot 只通过开启 websocket 服务器来和后端沟通，所以在这里的配置文件中我们关闭 http 和正向 ws，只保留反向 ws （即 “ws_reverse_servers”）。请保证 “reverse_url” 的配置与 Sayobot&#x2F;Sayo&#x2F;bot_config.py 中的 IP 和端口一致。</strong></p><p>第二种方法就是直接到蓝奏云下载go-cqhttp，放于bot前端文件同级目录（即与 Sayo 同级目录），同样的配置好机器人登录 QQ 号和密码。</p><p>1.<a href="https://github.com/Mrs4s/go-cqhttp/releases">releases</a>  </p><p>2.<a href="https://wwa.lanzous.com/i5lBJkoqogf">或者直接下载我上传与蓝奏云的压缩包</a>    </p><hr><h3 id="不用读系列"><a href="#不用读系列" class="headerlink" title="不用读系列"></a>不用读系列</h3><p><code>NoneBot</code> 过去是基于 酷Q 和 CQHttp 插件的机器人框架。<strong>可以将go-cqhttp看作机器人的‘后端’</strong>，用于处理通信和协议，而Nonebot作为前端负责机器人的逻辑，如发送天气等。随着八月初各大“后端”框架的扑街，两者一度被废弃至今。</p><hr><h3 id="注意！！：-配置完成后就可以通过双击-exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后-F12-打开控制台后完成滑块验证后在network中的-response-里抓取到-token-复制回go-cqhttp（tips：实在找不到可用ctrl-F搜索）"><a href="#注意！！：-配置完成后就可以通过双击-exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后-F12-打开控制台后完成滑块验证后在network中的-response-里抓取到-token-复制回go-cqhttp（tips：实在找不到可用ctrl-F搜索）" class="headerlink" title="**  注意！！： ** 配置完成后就可以通过双击.exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后 F12 打开控制台后完成滑块验证后在network中的 response 里抓取到 token 复制回go-cqhttp（tips：实在找不到可用ctrl+F搜索）"></a>**  注意！！： ** 配置完成后就可以通过双击.exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后 F12 打开控制台后完成滑块验证后在network中的 response 里抓取到 token 复制回go-cqhttp（tips：实在找不到可用ctrl+F搜索）</h3><p><img src="https://s3.ax1x.com/2021/01/22/sI37Ie.png">  </p>]]></content>
      
      
      
        <tags>
            
            <tag> QQ_bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>format_change_v1.0.0</title>
      <link href="/posts/22261.html"/>
      <url>/posts/22261.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于ffmpeg集成的转码工具"><a href="#基于ffmpeg集成的转码工具" class="headerlink" title="基于ffmpeg集成的转码工具"></a>基于ffmpeg集成的转码工具</h1><h3 id="有兴趣可以翻阅-ffmpeg官网"><a href="#有兴趣可以翻阅-ffmpeg官网" class="headerlink" title="有兴趣可以翻阅 (ffmpeg官网)"></a>有兴趣可以翻阅 <a href="http://ffmpeg.org/">(ffmpeg官网)</a></h3><ul><li><h3 id="2020-x2F-1213-更新：download"><a href="#2020-x2F-1213-更新：download" class="headerlink" title="2020&#x2F;1213 更新：download"></a>2020&#x2F;1213 更新：<a href="https://wwa.lanzous.com/iGjtajaqjod">download</a></h3></li></ul><p><img src="http://fp1.fghrsh.net/2020/12/14/ed729b48e9b3d05bbf0b8f4f57bbbcfd.md.png">  </p><p>1.将程序封装成安装程序，自动将ffmpeg环境配置好  </p><p>2.修复了部分bug（重置按钮无法重置）  </p><p>3.可以使用系统卸载工具将本程序卸载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> tkinter<span class="token comment" spellcheck="true"># from tkinter import *</span>from PIL <span class="token function">import</span> Image,ImageTk<span class="token function">import</span> re<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> base64<span class="token function">import</span> sysfrom img2 <span class="token function">import</span> imgimg_data <span class="token operator">=</span> base64.b64decode<span class="token punctuation">(</span>img<span class="token punctuation">)</span>with open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span>, <span class="token string">'wb'</span><span class="token punctuation">)</span> as f:    f.write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>    f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tkinter.Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成主窗口</span>root.title<span class="token punctuation">(</span><span class="token string">"format_change_beta"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 窗体名称</span>root.geometry<span class="token punctuation">(</span><span class="token string">"500x300"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 指定窗体大小</span>e1 <span class="token operator">=</span>tkinter.Entry<span class="token punctuation">(</span><span class="token punctuation">)</span>fm2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>l1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">"点击选择模式"</span>,font<span class="token operator">=</span><span class="token punctuation">(</span>12<span class="token punctuation">)</span>,width<span class="token operator">=</span>23,height<span class="token operator">=</span>1,bg<span class="token operator">=</span><span class="token string">"pink"</span><span class="token punctuation">)</span>l1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>count <span class="token operator">=</span> 0                <span class="token comment" spellcheck="true"># 计算纠错条件判断计数</span>news<span class="token operator">=</span>tkinter.StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># news用于实时文本显示</span>fm1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>fm1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>fm2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">'N'</span><span class="token punctuation">)</span>load <span class="token operator">=</span> Image.open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span>render <span class="token operator">=</span> ImageTk.PhotoImage<span class="token punctuation">(</span>load<span class="token punctuation">)</span>img <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm1,image<span class="token operator">=</span>render<span class="token punctuation">)</span>img.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>laber1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"版本号：V1.0.1"</span><span class="token punctuation">)</span>laber1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>3<span class="token punctuation">)</span>def f_inspect<span class="token punctuation">(</span>e1_get,fps_get,image_name_get<span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#检验输入规则mod</span>    global count    e1_get <span class="token operator">=</span> e1_get    fps_get <span class="token operator">=</span>fps_get    image_name_get <span class="token operator">=</span> image_name_get    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e1_get<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name_get<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps_get.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e1_get <span class="token operator">==</span> <span class="token string">""</span> or image_name_get <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+e1_get+<span class="token string">" -r "</span>+fps_get+<span class="token string">" -f image2 "</span>+f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name_get<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -i "+e1_get+" -r "+fps_get+" -f image2 "+f"&amp;#123;path&amp;#125;"+"\\\\output\\\\"+image_name_get)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect2<span class="token punctuation">(</span>e2,fps2,image_name2<span class="token punctuation">)</span>:    global count    e2 <span class="token operator">=</span> e2    fps2 <span class="token operator">=</span> fps2    image_name2 <span class="token operator">=</span> image_name2    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e2<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name2<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps2.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e2 <span class="token operator">==</span> <span class="token string">""</span> or image_name2 <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span> + image_name2 + <span class="token string">" -vcodec libx264"</span> + <span class="token string">" -r "</span> + fps2 + f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span> + e2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -f image2 -i " + image_name2 + " -vcodec libx264" + " -r " + fps2 + f" &amp;#123;path&amp;#125;" + "\\\\output\\\\" + e2)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect3<span class="token punctuation">(</span>old_e,new_e<span class="token punctuation">)</span>:    global count    old_e <span class="token operator">=</span>old_e    new_e <span class="token operator">=</span> new_e    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>old_e<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>new_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span>  old_e <span class="token operator">==</span> <span class="token string">''</span> or new_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span> + old_e + f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span> + new_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i " + old_e + f" &amp;#123;path&amp;#125;" + "\\\\output\\\\" + new_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect4<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:    global count    now_file_e <span class="token operator">=</span>now_file_e    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([\w\_]+.)(\w+)$'</span><span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    m <span class="token operator">=</span> path_pattern.findall<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>    out_e <span class="token operator">=</span> <span class="token string">"."</span>+m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#输出后缀名</span>    out_e1 <span class="token operator">=</span> m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> now_file_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:   <span class="token comment" spellcheck="true">#执行</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+now_file_e+<span class="token string">" -c:v libx264 -qp 40"</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i"</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span>+<span class="token string">" -r 1 -f image2 "</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+out_e1+<span class="token string">"_output"</span>+out_e<span class="token punctuation">)</span>        time.sleep<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        try:            os.remove<span class="token punctuation">(</span>path + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        except FileNotFoundError:            print<span class="token punctuation">(</span><span class="token string">'FileNotFoundError'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i "+now_file_e+" -c:v libx264 -qp 40"+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+"output.mkv")</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i"+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+"output.mkv"+" -r 1 -f image2 "+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+out_e1+"_output"+out_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#计数器</span>    global news,count    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        news.set<span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">&lt;</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"格式错误"</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> 0    else:        news.set<span class="token punctuation">(</span><span class="token string">"已经执行了\n不要再按了!!!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空Entry模块</span>def clear<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span> 0    restart <span class="token operator">=</span> 0    global e1,image_name,fps    image_name.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear2<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span> 0    restart <span class="token operator">=</span> 0    global e2, fps2, image_name2    e2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear3<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span>0    restart <span class="token operator">=</span> 0    global old_e,new_e    old_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    new_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear4<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count,restart    count<span class="token operator">=</span>0    restart <span class="token operator">=</span> 0    global now_file_e,out_e    now_file_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def fuc_1<span class="token punctuation">(</span><span class="token punctuation">)</span>:     <span class="token comment" spellcheck="true">#-----视频转图片-----</span>    global e1_get,fps_get,image_name_get,e1,image_name,fps,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart <span class="token operator">==</span> 0<span class="token punctuation">)</span>:        t1 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t1.title<span class="token punctuation">(</span><span class="token string">"视频转图片"</span><span class="token punctuation">)</span>        t1.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        labe_1<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>        labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>        labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        e1 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 文件名 e1</span>        e1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">#组 1 位置</span>        labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>        labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        fps <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 帧数 fps</span>        fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>        image_name <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出文件规则 image_name</span>        labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        image_name.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2,text<span class="token operator">=</span><span class="token string">"执行"</span>,width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command <span class="token operator">=</span>lambda: f_inspect<span class="token punctuation">(</span>e1.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,fps.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,image_name.get<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"重置"</span>,width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 4,command <span class="token operator">=</span>lambda: clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"W"</span><span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#组2 位置</span>        <span class="token comment" spellcheck="true"># f1.bind("&lt;Return>",button_c)</span>        restart+<span class="token operator">=</span>1def fuc_2<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true"># -----图片转视频-----</span>    global e2,fps2,image_name2,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart <span class="token operator">==</span>0<span class="token punctuation">)</span>:        t2 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t2.title<span class="token punctuation">(</span><span class="token string">"图片转视频"</span><span class="token punctuation">)</span>        t2.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>        labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        e2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 文件名 e2</span>        e2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组 1 位置</span>        labe_1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50, <span class="token string">"-"</span><span class="token punctuation">))</span>        labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>        labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        fps2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#帧数 fps2</span>        fps2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片的命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>        image_name2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 图片规则 image_name2</span>        labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        image_name2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect2<span class="token punctuation">(</span>e2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, fps2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, image_name2.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear2<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>        restart+<span class="token operator">=</span>1def fuc_3<span class="token punctuation">(</span><span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true">#  change_format 音视频图片格式转换</span>    global old_e,new_e,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart<span class="token operator">==</span>0<span class="token punctuation">)</span>:        t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>        t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>        impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>        old_file<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>        old_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>        old_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#old file name : old_e</span>        old_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        new_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>        new_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        new_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>        new_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect3<span class="token punctuation">(</span>old_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, new_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear3<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>        restart +<span class="token operator">=</span> 1def fuc_4<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#图片压缩   fuc 都是布局方法引用在inspect</span>    global now_file_e,out_e,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart<span class="token operator">==</span>0<span class="token punctuation">)</span>:        t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>        t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>        impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>        now_file_label<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>        now_file_label.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>        now_file_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># old file name : now_file_e</span>        now_file_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect4<span class="token punctuation">(</span>now_file_e.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear4<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>        restart+<span class="token operator">=</span>1button1<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----视频转图片-----'</span>,command<span class="token operator">=</span>fuc_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成button1</span>button2<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----图片转视频-----'</span>,command<span class="token operator">=</span>fuc_2<span class="token punctuation">)</span>button3<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'音视频图片格式转换'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_3<span class="token punctuation">)</span>button1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button3.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button4 <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>fm2,width<span class="token operator">=</span>15, height<span class="token operator">=</span>1,text<span class="token operator">=</span><span class="token string">'图片压缩'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_4<span class="token punctuation">)</span>button4.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>def caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>:    menu<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    submenu1<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>menu,tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'happy day'</span>,menu<span class="token operator">=</span>submenu1<span class="token punctuation">)</span>    submenu2 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'gookluck'</span><span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'allright'</span><span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'checkthis'</span>,menu<span class="token operator">=</span>submenu2<span class="token punctuation">)</span>    submenu3 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'格式帮助'</span>,menu<span class="token operator">=</span>submenu3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># menu.add_checkbutton(label="格式帮助",menu=submenu3)</span>    <span class="token comment" spellcheck="true"># submenu3.bind("&lt;Button-1>",fuc_1)</span>    root.config<span class="token punctuation">(</span>menu<span class="token operator">=</span>menu<span class="token punctuation">)</span>caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root.mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#进入消息循环（必需组件）</span>os.remove<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#清除临时图片</span></code></pre><ul><li><h3 id="V1-0-1更新："><a href="#V1-0-1更新：" class="headerlink" title="V1.0.1更新："></a>V1.0.1更新：</h3></li></ul><p> 1.通过python自带的tkinter实现了gui可视化  </p><p> 2 新增图片压缩模块<br><img src="http://fp1.fghrsh.net/2020/12/10/dd7613e40d7e4a1fc1bc5237780299a9.md.png"></p><h3 id="v1-0-1下载download"><a href="#v1-0-1下载download" class="headerlink" title="v1.0.1下载download"></a>v1.0.1下载<a href="https://wwa.lanzous.com/iHGrzh80lab">download</a></h3><p>此次更新可视化源码如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> tkinter<span class="token comment" spellcheck="true"># from tkinter import *</span>from PIL <span class="token function">import</span> Image,ImageTk<span class="token function">import</span> re<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> base64<span class="token function">import</span> sysfrom img2 <span class="token function">import</span> imgimg_data <span class="token operator">=</span> base64.b64decode<span class="token punctuation">(</span>img<span class="token punctuation">)</span>with open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span>, <span class="token string">'wb'</span><span class="token punctuation">)</span> as f:    f.write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>    f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tkinter.Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成主窗口</span>root.title<span class="token punctuation">(</span><span class="token string">"format_change_beta"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 窗体名称</span>root.geometry<span class="token punctuation">(</span><span class="token string">"500x300"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 指定窗体大小</span>e1 <span class="token operator">=</span>tkinter.Entry<span class="token punctuation">(</span><span class="token punctuation">)</span>fm2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>l1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">"点击选择模式"</span>,font<span class="token operator">=</span><span class="token punctuation">(</span>12<span class="token punctuation">)</span>,width<span class="token operator">=</span>23,height<span class="token operator">=</span>1,bg<span class="token operator">=</span><span class="token string">"pink"</span><span class="token punctuation">)</span>l1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>count <span class="token operator">=</span> 0                <span class="token comment" spellcheck="true"># 计算纠错条件判断计数</span>news<span class="token operator">=</span>tkinter.StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># news用于实时文本显示</span>fm1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>fm1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>fm2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">'N'</span><span class="token punctuation">)</span>load <span class="token operator">=</span> Image.open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span>render <span class="token operator">=</span> ImageTk.PhotoImage<span class="token punctuation">(</span>load<span class="token punctuation">)</span>img <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm1,image<span class="token operator">=</span>render<span class="token punctuation">)</span>img.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>laber1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"版本号：V1.0.1"</span><span class="token punctuation">)</span>laber1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>3<span class="token punctuation">)</span>def f_inspect<span class="token punctuation">(</span>e1_get,fps_get,image_name_get<span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#检验输入规则mod</span>    global count    e1_get <span class="token operator">=</span> e1_get    fps_get <span class="token operator">=</span>fps_get    image_name_get <span class="token operator">=</span> image_name_get    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e1_get<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name_get<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps_get.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e1_get <span class="token operator">==</span> <span class="token string">""</span> or image_name_get <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+e1_get+<span class="token string">" -r "</span>+fps_get+<span class="token string">" -f image2 "</span>+f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name_get<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -i "+e1_get+" -r "+fps_get+" -f image2 "+f"&amp;#123;path&amp;#125;"+"\\\\output\\\\"+image_name_get)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect2<span class="token punctuation">(</span>e2,fps2,image_name2<span class="token punctuation">)</span>:    global count    e2 <span class="token operator">=</span> e2    fps2 <span class="token operator">=</span> fps2    image_name2 <span class="token operator">=</span> image_name2    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e2<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name2<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps2.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e2 <span class="token operator">==</span> <span class="token string">""</span> or image_name2 <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span> + image_name2 + <span class="token string">" -vcodec libx264"</span> + <span class="token string">" -r "</span> + fps2 + f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span> + e2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -f image2 -i " + image_name2 + " -vcodec libx264" + " -r " + fps2 + f" &amp;#123;path&amp;#125;" + "\\\\output\\\\" + e2)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect3<span class="token punctuation">(</span>old_e,new_e<span class="token punctuation">)</span>:    global count    old_e <span class="token operator">=</span>old_e    new_e <span class="token operator">=</span> new_e    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>old_e<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>new_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span>  old_e <span class="token operator">==</span> <span class="token string">''</span> or new_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span> + old_e + f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span> + new_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i " + old_e + f" &amp;#123;path&amp;#125;" + "\\\\output\\\\" + new_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect4<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:    global count    now_file_e <span class="token operator">=</span>now_file_e    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([\w\_]+.)(\w+)$'</span><span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    m <span class="token operator">=</span> path_pattern.findall<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>    out_e <span class="token operator">=</span> <span class="token string">"."</span>+m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#输出后缀名</span>    out_e1 <span class="token operator">=</span> m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> now_file_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:   <span class="token comment" spellcheck="true">#执行</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+now_file_e+<span class="token string">" -c:v libx264 -qp 40"</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i"</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span>+<span class="token string">" -r 1 -f image2 "</span>+f<span class="token string">" &amp;#123;path&amp;#125;"</span> + <span class="token string">"\\\\output\\\\"</span>+out_e1+<span class="token string">"_output"</span>+out_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i "+now_file_e+" -c:v libx264 -qp 40"+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+"output.mkv")</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i"+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+"output.mkv"+" -r 1 -f image2 "+f" &amp;#123;path&amp;#125;" + "\\\\output\\\\"+out_e1+"_output"+out_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#计数器</span>    global news,count    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        news.set<span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">&lt;</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"格式错误"</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> 0    else:        news.set<span class="token punctuation">(</span><span class="token string">"已经执行了\n不要再按了!!!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空Entry模块</span>def clear<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span> 0    global e1,image_name,fps    e1.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear2<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span> 0    global e2, fps2, image_name2    e2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear3<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span>0    global old_e,new_e    old_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    new_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear4<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count<span class="token operator">=</span>0    global now_file_e,out_e    now_file_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def fuc_1<span class="token punctuation">(</span><span class="token punctuation">)</span>:     <span class="token comment" spellcheck="true">#-----视频转图片-----</span>    global e1_get,fps_get,image_name_get,e1,image_name,fps    t1 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t1.title<span class="token punctuation">(</span><span class="token string">"视频转图片"</span><span class="token punctuation">)</span>    t1.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    labe_1<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>    labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    e1 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 文件名 e1</span>    e1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">#组 1 位置</span>    labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    fps <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 帧数 fps</span>    fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出文件规则 image_name</span>    labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    image_name.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2,text<span class="token operator">=</span><span class="token string">"执行"</span>,width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command <span class="token operator">=</span>lambda: f_inspect<span class="token punctuation">(</span>e1.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,fps.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,image_name.get<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"重置"</span>,width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 4,command <span class="token operator">=</span>lambda: clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"W"</span><span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#组2 位置</span>    <span class="token comment" spellcheck="true"># f1.bind("&lt;Return>",button_c)</span>def fuc_2<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true"># -----图片转视频-----</span>    global e2,fps2,image_name2    t2 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t2.title<span class="token punctuation">(</span><span class="token string">"图片转视频"</span><span class="token punctuation">)</span>    t2.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>    labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    e2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 文件名 e2</span>    e2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组 1 位置</span>    labe_1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50, <span class="token string">"-"</span><span class="token punctuation">))</span>    labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    fps2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#帧数 fps2</span>    fps2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片的命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    image_name2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 图片规则 image_name2</span>    labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    image_name2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect2<span class="token punctuation">(</span>e2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, fps2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, image_name2.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear2<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>def fuc_3<span class="token punctuation">(</span><span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true">#  change_format 音视频图片格式转换</span>    global old_e,new_e    t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>    t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>    impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>    old_file<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>    old_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>    old_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#old file name : old_e</span>    old_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    new_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>    new_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    new_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>    new_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect3<span class="token punctuation">(</span>old_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, new_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear3<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>def fuc_4<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#图片压缩   fuc 都是布局方法引用在inspect</span>    global now_file_e,out_e    t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>    t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>    impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>    now_file_label<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>    now_file_label.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>    now_file_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># old file name : now_file_e</span>    now_file_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect4<span class="token punctuation">(</span>now_file_e.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear4<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>button1<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----视频转图片-----'</span>,command<span class="token operator">=</span>fuc_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成button1</span>button2<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----图片转视频-----'</span>,command<span class="token operator">=</span>fuc_2<span class="token punctuation">)</span>button3<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'音视频图片格式转换'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_3<span class="token punctuation">)</span>button1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button3.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button4 <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>fm2,width<span class="token operator">=</span>15, height<span class="token operator">=</span>1,text<span class="token operator">=</span><span class="token string">'图片压缩'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_4<span class="token punctuation">)</span>button4.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>def caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>:    menu<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    submenu1<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>menu,tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'happy day'</span>,menu<span class="token operator">=</span>submenu1<span class="token punctuation">)</span>    submenu2 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'gookluck'</span><span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'allright'</span><span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'checkthis'</span>,menu<span class="token operator">=</span>submenu2<span class="token punctuation">)</span>    submenu3 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'格式帮助'</span>,menu<span class="token operator">=</span>submenu3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># menu.add_checkbutton(label="格式帮助",menu=submenu3)</span>    <span class="token comment" spellcheck="true"># submenu3.bind("&lt;Button-1>",fuc_1)</span>    root.config<span class="token punctuation">(</span>menu<span class="token operator">=</span>menu<span class="token punctuation">)</span>caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root.mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#进入消息循环（必需组件）</span>os.remove<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#清除临时图片</span></code></pre><ul><li><h3 id="V1-0-0"><a href="#V1-0-0" class="headerlink" title="V1.0.0"></a>V1.0.0</h3></li></ul><h3 id="可实现的功能-（基于ffmpeg进行的）-ffmpeg官网"><a href="#可实现的功能-（基于ffmpeg进行的）-ffmpeg官网" class="headerlink" title="* 可实现的功能*  （基于ffmpeg进行的） (ffmpeg官网)"></a>* 可实现的功能*  （基于ffmpeg进行的） <a href="http://ffmpeg.org/">(ffmpeg官网)</a></h3><ul><li><h4 id="1-将视频提取设定帧转为N张图片"><a href="#1-将视频提取设定帧转为N张图片" class="headerlink" title="1.将视频提取设定帧转为N张图片"></a>1.将视频提取设定帧转为N张图片</h4></li><li><h4 id="2-将N张图片封装为视频格式（可设置帧数）"><a href="#2-将N张图片封装为视频格式（可设置帧数）" class="headerlink" title="2.将N张图片封装为视频格式（可设置帧数）"></a>2.将N张图片封装为视频格式（可设置帧数）</h4></li><li><h4 id="3-音视频格式的简单转换"><a href="#3-音视频格式的简单转换" class="headerlink" title="3.音视频格式的简单转换"></a>3.音视频格式的简单转换</h4></li></ul><h3 id="下载download"><a href="#下载download" class="headerlink" title="下载download"></a>下载<a href="https://wwa.lanzous.com/itD4oh6pivc">download</a></h3><p>源码如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token function">import</span> re<span class="token function">import</span> osprint<span class="token punctuation">(</span><span class="token string">"format_change_v1.0.0"</span>.center<span class="token punctuation">(</span>50,<span class="token string">'-'</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span><span class="token string">"注意需要将程序放置于被执行的文件目录"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">''</span><span class="token string">'    视频转图片请输入： i    图片转视频请输入： o    音视频格式转换： c    格式帮助列表： help'</span><span class="token string">''</span><span class="token punctuation">)</span>def en_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#规定输入规则</span>    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([a-zA-Z]:)(\\\\\w+)*$'</span><span class="token punctuation">)</span>    fps_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>    file_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^(\w+)\.(\w+)'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"ffmpeg将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入视频路经(例如D:\\\\filedir)(注意：不包括文件名)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not path_pattern.search<span class="token punctuation">(</span>path<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入视频路经(例如D:\\\\filedir)(注意：不包括文件名)："</span><span class="token punctuation">)</span>    <span class="token function">file</span> <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not fps_pat.search<span class="token punctuation">(</span>fps<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("cd "+path[0]+path[1])</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("cd "+path)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span>+path<span class="token punctuation">)</span>    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+file+<span class="token string">" -r "</span>+fps+<span class="token string">" -f image2 "</span>+f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("ffmpeg -i "+f"&amp;#123;path&amp;#125;\\\\"+file+" -r "+fps+" -f image2 "+f"&amp;#123;path&amp;#125;"+"\\\\output\\\\"+image_name)</span>def de_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#规定输入规则</span>    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([a-zA-Z]:)(\\\\\w+)*$'</span><span class="token punctuation">)</span>    fps_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>    file_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^(\w+)\.(\w+)'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"ffmpeg将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入图片文件路经(例如D:\\\\filedir)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not path_pattern.search<span class="token punctuation">(</span>path<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入图片文件路经(例如D:\\\\filedir)："</span><span class="token punctuation">)</span>    fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not fps_pat.search<span class="token punctuation">(</span>fps<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    new_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入输出视频名：（例：out.mp4）"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span>+image_name+<span class="token string">" -vcodec libx264"</span>+<span class="token string">" -r "</span>+fps+f<span class="token string">" &amp;#123;path&amp;#125;"</span>+<span class="token string">"\\\\output\\\\"</span>+new_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("ffmpeg -f image2 -i "+image_name+" -vcodec libx264"+" -r "+fps+f" &amp;#123;path&amp;#125;"+"\\\\output\\\\"+new_name)</span>def change_format<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span><span class="token string">"音视频格式转换"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    print<span class="token punctuation">(</span><span class="token string">"注意：需将程序放置于同目录。。。"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># path_pattern = re.compile(r'^([a-zA-Z]:)(\\\\\w+)*$')</span>    path1 <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path1<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+path1<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span>+path1<span class="token punctuation">)</span>    old_file <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>    new_file <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4)"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+old_file+<span class="token string">" "</span>+new_file<span class="token punctuation">)</span>def format_help<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span><span class="token string">''</span><span class="token string">'    音频格式：------------有损格式------------mp3: 最常见的有损压缩格式，在高频部分有较明显损失wma:已经不大流行的音频压缩格式，由微软开发，在比特率相同时比mp3音质好些，微软后期又开发了wma lossless，可达到无损压缩，但wma一直没有mp3普及aac:比mp3压缩效果和音质更好的格式，著名的itunes store提供的音乐就是itunes plus aac（文件后缀为.m4a），并且都加载了歌曲详细信息和专辑封面，因而成为现今移动设备上替代mp3的理想格式其他格式：ogg , mpc等------------无损格式------------flac:如今十分流行的无损格式，如今已获得许多软件、操作系统、和硬件的支持，压缩效果比ape略差，但解码速度要比ape高。现今许多mp3、mp4都已支持flac与ape，安卓系统也有许多播放器支持这两种格式。ape:与flac同样流行的无损压缩格式。wv:另一种压缩格式，最大特点是既可以无损，也可以有损，但没有前两者流行。apple lossless:由苹果开发的无损格式，可由Ipod及Iphone直接播放，可以添加专辑封面。wav:可以直接存储cd中音频信息的格式，但由于没有压缩，所以体积大，由微软开发。aiff:与wav相似的格式，但是由苹果公司开发，可以在文件内添加专辑封面（而wav不能）。-----------------------------------------------------------------------------------------------    视频格式：MPEGavi:音频视频交错(Audio Video Interleaved)的英文缩写。AVI这个由微软公司发表的视频格式在视频领域已经存在好几个年头了。AVI格式调用方便、图像质量好，但缺点就是文件体积过于庞大，压缩标准不统一。mov:wmv:flv:mp4: 最常用       '</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">while</span> True:    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入模式："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"i"</span><span class="token keyword">:</span>        en_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"o"</span><span class="token keyword">:</span>        de_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"c"</span><span class="token keyword">:</span>        change_format<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"help"</span><span class="token keyword">:</span>        format_help<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        print<span class="token punctuation">(</span><span class="token string">"输入错误,请重试。。。"</span><span class="token punctuation">)</span></code></pre><h2 id="自己封装的一些文件操作脚本：-下载地址download"><a href="#自己封装的一些文件操作脚本：-下载地址download" class="headerlink" title="自己封装的一些文件操作脚本： 下载地址download"></a>自己封装的一些文件操作脚本： 下载地址<a href="https://wwa.lanzous.com/iN2Zgh6028d">download</a></h2>]]></content>
      
      
      <categories>
          
          <category> python项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ascii_art</title>
      <link href="/posts/55427.html"/>
      <url>/posts/55427.html</url>
      
        <content type="html"><![CDATA[<h3 id="ascii字符画"><a href="#ascii字符画" class="headerlink" title="ascii字符画"></a>ascii字符画</h3><pre class=" language-Python"><code class="language-Python">from PIL import Image, ImageDraw, ImageFontimport argparseimport numpy as npsample_rate = 0.4def ascii_art(file):    im = Image.open(file)    # Compute letter aspect ratio    font = ImageFont.load_default()    # font = ImageFont.truetype("SourceCodePro-Bold.ttf", size=12)    aspect_ratio = font.getsize("x")[0] / font.getsize("x")[1]    new_im_size = np.array(        [im.size[0] * sample_rate, im.size[1] * sample_rate * aspect_ratio]    ).astype(int)    # Downsample the image    im = im.resize(new_im_size)    # Keep a copy of image for color sampling    im_color = np.array(im)    # Convert to gray scale image    im = im.convert("L")    # Convert to numpy array for image manipulation    im = np.array(im)    # Defines all the symbols in ascending order that will form the final ascii    symbols = np.array(list(" .-vM"))    # Normalize minimum and maximum to [0, max_symbol_index)    im = (im - im.min()) / (im.max() - im.min()) * (symbols.size - 1)    # Generate the ascii art    ascii = symbols[im.astype(int)]    # Create an output image for drawing ascii text    letter_size = font.getsize("x")    im_out_size = new_im_size * letter_size    bg_color = "black"    im_out = Image.new("RGB", tuple(im_out_size), bg_color)    draw = ImageDraw.Draw(im_out)    # Draw text    y = 0    for i, line in enumerate(ascii):        for j, ch in enumerate(line):            color = tuple(im_color[i, j])  # sample color from original image            draw.text((letter_size[0] * j, y), ch[0], fill=color, font=font)        y += letter_size[1]  # increase y by letter height    # Save image file    im_out.save(file + ".ascii.png")if __name__ == "__main__":    parser = argparse.ArgumentParser(description="Convert any image to ascii art.")    parser.add_argument(        "file", type=str, help="input image file",    )    args = parser.parse_args()    ascii_art(args.file)# for i in range(1,6571):#     while len(str(i)) != 5:#         i = "0"+ str(i)#     v = "badapple/",f"foo-0&#123;i&#125;",".jpeg"</code></pre>]]></content>
      
      
      <categories>
          
          <category> py_ascii_art </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pypi国内镜像源</title>
      <link href="/posts/3513.html"/>
      <url>/posts/3513.html</url>
      
        <content type="html"><![CDATA[<h3 id="pypi的国内镜像源："><a href="#pypi的国内镜像源：" class="headerlink" title="pypi的国内镜像源："></a>pypi的国内镜像源：</h3><ul><li><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a>  </p></li><li><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p></li><li><p>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a>  </p></li><li><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a>  </p></li><li><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p></li></ul><p><img src="http://fp1.fghrsh.net/2020/10/01/0a7918b986f595b4c55b66262223c1aa.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则零宽断言</title>
      <link href="/posts/22595.html"/>
      <url>/posts/22595.html</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式之零宽断言"><a href="#正则表达式之零宽断言" class="headerlink" title="正则表达式之零宽断言"></a>正则表达式之零宽断言</h3><p>零宽断言是正则表达式的一种方法，用于查找在某些内容（但并不包括这些内容）之前或者之后的东西，也就是说他们像\b（匹配一个单词边界，也就是单词和空格间的位置，正则表达式的匹配有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置，例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”），^（匹配输入字行首），$（匹配输入字行尾）那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为零宽断言。断言用来声明一个应该为真的事实，正则表达式中只有当断言为真时才会继续进行匹配。</p><p>零宽断言一共分为四种</p><p>1．零宽度正预测先行断言 (?&#x3D;exp)匹配exp前面的位置</p><p>例：\b\w+(?&#x3D;ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p><p>2．零宽度正回顾后发断言 (?&lt;exp)匹配exp后面的位置</p><p>例：比如(?&lt;&#x3D;\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p><p>3．零宽度负预测先行断言 (?!exp)匹配后面跟的不是exp的位置</p><p>例：例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>4．零宽度负回顾后发断言 (?&lt;!exp)匹配前面不是exp的位置</p><p>例：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 零宽断言</span><span class="token function">import</span> res <span class="token operator">=</span> r<span class="token string">'eating apple seeing paper watching movie'</span>m1 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(\b\w+?)ing'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#['eat', 'see', 'watch']</span>m2 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?=ing)'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['eat', 'ing apple see', 'ing paper watch']</span>m3 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?&lt;=ing)'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['eating', ' apple seeing', ' paper watching']</span>s <span class="token operator">=</span> <span class="token string">'unite one unethical ethics use untie ultimate'</span>m4 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'\b(?!un)\w+\b'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['one', 'ethics', 'use', 'ultimate']</span>m5 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(?&lt;![a-z])\d&amp;#123;3,&amp;#125;'</span>,<span class="token string">'abc123,123,4567'</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>m5<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['123', '4567']</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零之使魔</title>
      <link href="/posts/15960.html"/>
      <url>/posts/15960.html</url>
      
        <content type="html"><![CDATA[<h2 id="零之使魔22卷漫画epub格式下载："><a href="#零之使魔22卷漫画epub格式下载：" class="headerlink" title="零之使魔22卷漫画epub格式下载："></a>零之使魔22卷漫画epub格式下载：</h2><h3 id="下载地址-访问码-rv3a"><a href="#下载地址-访问码-rv3a" class="headerlink" title="下载地址  (访问码:rv3a)"></a><a href="https://cloud.189.cn/t/3MFjAzu2MF7f">下载地址</a>  (访问码:rv3a)</h3><p><img src="http://fp1.fghrsh.net/2020/08/31/e419ad07119bf23cbbef7342f92e0361.th.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 追番 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/posts/51872.html"/>
      <url>/posts/51872.html</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>first code:  </p><pre class=" language-bash"><code class="language-bash">print<span class="token punctuation">(</span><span class="token string">"hellow world"</span><span class="token punctuation">)</span></code></pre><p>first day:  </p><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please input yourname:"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(name)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A = "2"</span><span class="token comment" spellcheck="true"># print(A *10)</span><span class="token comment" spellcheck="true"># Name = input("please input your name:") </span><span class="token comment" spellcheck="true"># Age = input("please input your age:")</span><span class="token comment" spellcheck="true"># job = input("please input your job:")</span><span class="token comment" spellcheck="true"># hobbie = input("please input your hobbie:")</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># msg = f'''                                #多行字符串格式</span><span class="token comment" spellcheck="true"># ------------ cn of &amp;#123;Name&amp;#125; ------------</span><span class="token comment" spellcheck="true"># Name   : &amp;#123;Name&amp;#125;</span><span class="token comment" spellcheck="true"># Age    : &amp;#123;Age&amp;#125;</span><span class="token comment" spellcheck="true"># job    : &amp;#123;job&amp;#125;</span><span class="token comment" spellcheck="true"># hobbie : &amp;#123;hobbie&amp;#125;</span><span class="token comment" spellcheck="true"># ------------------ end ------------------</span><span class="token comment" spellcheck="true"># '''</span><span class="token comment" spellcheck="true"># print(msg)</span><span class="token comment" spellcheck="true"># salary = int(input("salary:"))</span><span class="token comment" spellcheck="true"># if salary &lt;= int(10000):</span><span class="token comment" spellcheck="true">#     print("you too low ,pls go to learn more knowledge")</span><span class="token comment" spellcheck="true"># else:</span><span class="token comment" spellcheck="true">#     print("you are very good")</span><span class="token comment" spellcheck="true"># print("hhhhhhhhh")</span><span class="token comment" spellcheck="true"># salary = int(input("输入你的工资："))</span><span class="token comment" spellcheck="true"># if salary &lt;= 1000:</span><span class="token comment" spellcheck="true">#     print("老板我是你爹")</span><span class="token comment" spellcheck="true"># elif salary >= 1000 and salary &lt;= 2000:</span><span class="token comment" spellcheck="true">#     print("老板，wqnmlgbxxxx")</span><span class="token comment" spellcheck="true"># elif salary >= 2000 and salary &lt;= 5000:</span><span class="token comment" spellcheck="true">#     print("老板脑子有坑，背后说坏话")</span><span class="token comment" spellcheck="true"># elif salary >= 5000 and salary &lt;= 10000:</span><span class="token comment" spellcheck="true">#     print("老板说的有点问题，但我不说话")</span><span class="token comment" spellcheck="true"># elif salary >= 10000 and salary &lt;= 20000:</span><span class="token comment" spellcheck="true">#     print("老板说啥就是啥吧")</span><span class="token comment" spellcheck="true"># elif salary >= 20000 and salary &lt;= 30000:</span><span class="token comment" spellcheck="true">#     print("老板说什么都是对的，如果有人错了，那一定是我")</span><span class="token comment" spellcheck="true"># elif salary >= 30000 and salary &lt;= 50000:</span><span class="token comment" spellcheck="true">#     print("996就像呼吸一样自然")</span><span class="token comment" spellcheck="true"># else:</span><span class="token comment" spellcheck="true">#     print("公司就是我家")</span>Mark <span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"成绩："</span><span class="token punctuation">))</span><span class="token keyword">if</span> Mark <span class="token operator">></span> 90  <span class="token keyword">:</span>    print<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 80:    print<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 60:    print<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 40:    print<span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">>=</span> 0:    print<span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span>else:    print<span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span></code></pre><ul><li><h2 id="数字类型（int）"><a href="#数字类型（int）" class="headerlink" title="数字类型（int）"></a>数字类型（int）</h2></li><li><h2 id="字符串方法-str"><a href="#字符串方法-str" class="headerlink" title="字符串方法(str)"></a>字符串方法(str)</h2></li></ul><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token string">"Onesidepass"</span>print<span class="token punctuation">(</span>a.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>      <span class="token comment" spellcheck="true">#输出：-------------------Onesidepass--------------------</span>print<span class="token punctuation">(</span>a.count<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>          <span class="token comment" spellcheck="true">#输出：字符串中“s”出现的次数   output：3</span>print<span class="token punctuation">(</span>a.count<span class="token punctuation">(</span><span class="token string">"s"</span>,0,4<span class="token punctuation">))</span>      <span class="token comment" spellcheck="true">#局部搜索，顾头不顾尾</span><span class="token comment" spellcheck="true">#encode</span>print<span class="token punctuation">(</span>a.endswith<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#判断结尾是否为 s 结尾 output：true</span>print<span class="token punctuation">(</span>a.startswith<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>     <span class="token comment" spellcheck="true">#判断开头</span>print<span class="token punctuation">(</span>a.find<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">))</span>           <span class="token comment" spellcheck="true">#查找，找不到返回-1 找到返回索引值</span>print<span class="token punctuation">(</span>a.isdigit<span class="token punctuation">(</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span><span class="token string">"22"</span>.isdigit<span class="token punctuation">(</span><span class="token punctuation">))</span>        <span class="token comment" spellcheck="true">#判断是否为整数</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"OSP"</span>,<span class="token string">"UMR"</span>,<span class="token string">"STF"</span><span class="token punctuation">]</span>print<span class="token punctuation">(</span><span class="token string">"-"</span>.join<span class="token punctuation">(</span>l<span class="token punctuation">))</span>          <span class="token comment" spellcheck="true">#拼接字符串 OSP-UMR-STF</span>print<span class="token punctuation">(</span>a.replace<span class="token punctuation">(</span><span class="token string">"s"</span>,<span class="token string">"d"</span>,2<span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#print(a.replace(old,new,count))  字符串替换</span>b <span class="token operator">=</span> <span class="token string">"OSP UMR STF"</span>print<span class="token punctuation">(</span>b.split<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token comment" spellcheck="true">#字符串转成列表，默认用空格来分   ['OSP', 'UMR', 'STF']</span>print<span class="token punctuation">(</span>b.split<span class="token punctuation">(</span><span class="token string">"P"</span>,1<span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#按什么来分，分几次 ['OS', ' UMR STF']</span></code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">-------------------Onesidepass--------------------31TrueFalse1FalseTrueOSP-UMR-STFOnedidepads<span class="token punctuation">[</span><span class="token string">'OSP'</span>, <span class="token string">'UMR'</span>, <span class="token string">'STF'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'OS'</span>, <span class="token string">' UMR STF'</span><span class="token punctuation">]</span></code></pre><ul><li><h3 id="公司员工抽奖小程序"><a href="#公司员工抽奖小程序" class="headerlink" title="公司员工抽奖小程序"></a>公司员工抽奖小程序</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> random<span class="token function">import</span> stringstaffs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                       <span class="token comment" spellcheck="true">#空列表用于存储员工</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,301<span class="token punctuation">)</span>:            <span class="token comment" spellcheck="true">#1-300 （for循环）</span>    staffs.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#将1-300分别存入空列表</span>c <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,30<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#c为三等奖随机抽取的变量</span>print<span class="token punctuation">(</span>f<span class="token string">"三等奖获奖的员工分别为：&amp;#123;c&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> c <span class="token keyword">in</span> staffs:    staffs.remove<span class="token punctuation">(</span>c<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#remove 删除了三等奖的员工，剩下的是未获奖的员工</span>b <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,6<span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">'二等奖获奖的员工分别为：&amp;#123;b&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">if</span> b <span class="token keyword">in</span> staffs:    staffs.remove<span class="token punctuation">(</span>b<span class="token punctuation">)</span>a <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,3<span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">'一等奖获奖的员工分别为：&amp;#123;a&amp;#125;'</span><span class="token punctuation">)</span></code></pre><ul><li>output：</li></ul><pre class=" language-bash"><code class="language-bash">三等奖获奖的员工分别为：<span class="token punctuation">[</span>270, 252, 263, 219, 171, 180, 140, 106, 6, 241, 163, 118, 192, 88, 123, 44, 255, 207, 300, 226, 268, 11, 147, 187, 111, 202, 119, 165, 190, 4<span class="token punctuation">]</span>二等奖获奖的员工分别为：<span class="token punctuation">[</span>254, 184, 282, 236, 92, 109<span class="token punctuation">]</span>一等奖获奖的员工分别为：<span class="token punctuation">[</span>166, 77, 233<span class="token punctuation">]</span></code></pre><ul><li><h3 id="奇偶数"><a href="#奇偶数" class="headerlink" title="奇偶数"></a>奇偶数</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>100<span class="token punctuation">)</span>:    <span class="token keyword">if</span> i % 2 <span class="token operator">==</span> 0:        print<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;i&amp;#125;is 偶数"</span><span class="token punctuation">)</span>    else:        print<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;i&amp;#125;is 奇数"</span><span class="token punctuation">)</span></code></pre><ul><li><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,10<span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#print(f"&amp;#123;i&amp;#125;x1=&amp;#123;i&amp;#125;")</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,i+1<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;i&amp;#125;x&amp;#123;j&amp;#125;=&amp;#123;i*j&amp;#125;"</span>,end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">1x1<span class="token operator">=</span>1  2x1<span class="token operator">=</span>2  2x2<span class="token operator">=</span>4  3x1<span class="token operator">=</span>3  3x2<span class="token operator">=</span>6  3x3<span class="token operator">=</span>9  4x1<span class="token operator">=</span>4  4x2<span class="token operator">=</span>8  4x3<span class="token operator">=</span>12  4x4<span class="token operator">=</span>16  5x1<span class="token operator">=</span>5  5x2<span class="token operator">=</span>10  5x3<span class="token operator">=</span>15  5x4<span class="token operator">=</span>20  5x5<span class="token operator">=</span>25  6x1<span class="token operator">=</span>6  6x2<span class="token operator">=</span>12  6x3<span class="token operator">=</span>18  6x4<span class="token operator">=</span>24  6x5<span class="token operator">=</span>30  6x6<span class="token operator">=</span>36  7x1<span class="token operator">=</span>7  7x2<span class="token operator">=</span>14  7x3<span class="token operator">=</span>21  7x4<span class="token operator">=</span>28  7x5<span class="token operator">=</span>35  7x6<span class="token operator">=</span>42  7x7<span class="token operator">=</span>49  8x1<span class="token operator">=</span>8  8x2<span class="token operator">=</span>16  8x3<span class="token operator">=</span>24  8x4<span class="token operator">=</span>32  8x5<span class="token operator">=</span>40  8x6<span class="token operator">=</span>48  8x7<span class="token operator">=</span>56  8x8<span class="token operator">=</span>64  9x1<span class="token operator">=</span>9  9x2<span class="token operator">=</span>18  9x3<span class="token operator">=</span>27  9x4<span class="token operator">=</span>36  9x5<span class="token operator">=</span>45  9x6<span class="token operator">=</span>54  9x7<span class="token operator">=</span>63  9x8<span class="token operator">=</span>72  9x9<span class="token operator">=</span>81 </code></pre><ul><li><h3 id="京牌摇号"><a href="#京牌摇号" class="headerlink" title="京牌摇号"></a>京牌摇号</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> string<span class="token function">import</span> randomcount <span class="token operator">=</span> 0              <span class="token comment" spellcheck="true">#计数器</span>car_nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">#空集合存数据</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> 4:    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>20<span class="token punctuation">)</span>:        n1 <span class="token operator">=</span> random.choice<span class="token punctuation">(</span>string.ascii_uppercase<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机选取里面的任意一个对象</span>        n2 <span class="token operator">=</span> <span class="token string">""</span>.join<span class="token punctuation">(</span>random.sample<span class="token punctuation">(</span>string.ascii_uppercase + string.digits, 5<span class="token punctuation">))</span>        c_num <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token string">"京&amp;#123;n1&amp;#125;-&amp;#123;n2&amp;#125;"</span><span class="token punctuation">)</span>        car_nums.append<span class="token punctuation">(</span>c_num<span class="token punctuation">)</span>        print<span class="token punctuation">(</span>c_num,end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> 4 or i <span class="token operator">==</span> 9 or i <span class="token operator">==</span> 14  <span class="token keyword">:</span>    <span class="token comment" spellcheck="true">#换行模块</span>            print<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">#换行模块</span>    print<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">#换行模块</span>    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你选择的车牌,如不满意请输入no:"</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#strip 方法去掉头尾空格及特殊字符</span>    <span class="token keyword">if</span> choice <span class="token keyword">in</span> car_nums:        print<span class="token punctuation">(</span>f<span class="token string">"恭喜您喜提新车牌：&amp;#123;choice&amp;#125;"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        <span class="token keyword">if</span> count <span class="token operator">&lt;</span> 3:            print<span class="token punctuation">(</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token string">"-------------------抱歉请重试-------------------"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token punctuation">)</span>    count +<span class="token operator">=</span> count + 1                         <span class="token comment" spellcheck="true">#计数器</span>choice2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> choice2 not <span class="token keyword">in</span> car_nums:                 <span class="token comment" spellcheck="true">#死循环</span>    choice2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"三次选择结束请选择车牌："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"恭喜您喜提新车牌： &amp;#123;choice2&amp;#125;！！！"</span><span class="token punctuation">)</span></code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">京L-L45OI 京I-KQAW4 京A-0K54N 京D-JROTH 京Z-L08YE 京H-KUDF9 京N-B93G4 京B-FIY7C 京E-7LTNH 京M-FHBEM 京H-UCYFI 京D-MDYXV 京E-031IO 京S-H3I7E 京X-F2IU1 京Z-WRG7Y 京U-V0TC3 京U-NR83I 京I-2YB4V 京U-M54GU 请输入你选择的车牌,如不满意请输入no:no-------------------抱歉请重试-------------------京Q-PV85K 京G-59SLJ 京X-C3Z0R 京P-EGOUV 京R-RI2L8 京C-62XPO 京X-48E7C 京L-K75JZ 京I-ZJ68Q 京L-NCRQP 京T-5NMXU 京N-XHMVK 京J-6X7D0 京Q-8O1CW 京D-QHLTS 京Q-9BNH4 京R-PAJ3T 京H-LWUPY 京A-UYPOW 京W-3PLG2 请输入你选择的车牌,如不满意请输入no:ajd<span class="token punctuation">;</span>flasd-------------------抱歉请重试-------------------京G-FB54N 京J-OGATN 京M-SE7KZ 京N-P5RQA 京L-FKN02 京X-KG0UD 京O-TC3PA 京U-FR7EG 京E-L6WZA 京S-01KWE 京P-JTMG7 京S-M7PLN 京K-E14CX 京O-02MBE 京I-YUP83 京W-GVSXB 京B-DR1C5 京T-6POX3 京A-MSKX9 京G-KB3TQ 请输入你选择的车牌,如不满意请输入no:adsfjal<span class="token punctuation">;</span>fd三次选择结束请选择车牌：<span class="token punctuation">;</span>d<span class="token punctuation">;</span>asfjdka三次选择结束请选择车牌：    j   三次选择结束请选择车牌： 京L-FKN02 恭喜您喜提新车牌： 京L-FKN02！！！</code></pre><ul><li><h3 id="列表分类"><a href="#列表分类" class="headerlink" title="列表分类"></a>列表分类</h3></li></ul><pre class=" language-bash"><code class="language-bash">tu_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'hk'</span>,80<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'hy'</span>,79<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'kx'</span>,55<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'jc'</span>,89<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'fl'</span>,22<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'ks'</span>,44<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'nb'</span>,99<span class="token punctuation">]</span><span class="token punctuation">]</span>new_stu_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#100 - 90</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#89  - 80</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#79 - 70</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#69 - 60</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#59 - 0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stu_list:    <span class="token keyword">if</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">>=</span> 90:        new_stu_list<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 80:        new_stu_list<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 70:        new_stu_list<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 60:        new_stu_list<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    else:        new_stu_list<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>print<span class="token punctuation">(</span>new_stu_list<span class="token punctuation">)</span></code></pre><ul><li>效果：</li></ul><pre><code>[[[&#39;nb&#39;, 99]], [[&#39;hk&#39;, 80], [&#39;jc&#39;, 89]], [[&#39;hy&#39;, 79]], [], [[&#39;kx&#39;, 55], [&#39;fl&#39;, 22], [&#39;ks&#39;, 44]]]  </code></pre><ul><li><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3></li></ul><pre class=" language-bash"><code class="language-bash">nam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'osp'</span>,<span class="token string">'stf'</span>,<span class="token string">'umr'</span>,<span class="token string">'xhk'</span>,<span class="token string">'yzs'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#顾头不顾尾</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>1:3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#倒切</span>nam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'osp'</span>,<span class="token string">'stf'</span>,<span class="token string">'umr'</span>,<span class="token string">'xhk'</span>,<span class="token string">'yzs'</span><span class="token punctuation">]</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-4:-3<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-3:-1<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-3:<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#步长（跳着切）name[start:end:step]#step 默认为1</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>0:-1:2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#stf 没了 跳过了  </span></code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'stf'</span>, <span class="token string">'umr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'stf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'umr'</span>, <span class="token string">'xhk'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'umr'</span>, <span class="token string">'xhk'</span>, <span class="token string">'yzs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'osp'</span>, <span class="token string">'umr'</span><span class="token punctuation">]</span>  </code></pre><ul><li><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3></li></ul><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;                              #字典</span>    <span class="token string">"osp"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>22,<span class="token string">'student'</span>,1500<span class="token punctuation">]</span>,    <span class="token string">"佩奇"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>14,<span class="token string">"student"</span>,0<span class="token punctuation">]</span>,    <span class="token string">"umr"</span>  <span class="token keyword">:</span> <span class="token string">"好吃懒做"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#取值</span>print<span class="token punctuation">(</span><span class="token string">'字典  ： '</span>,name<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'取值（依据key取出value） ：     '</span>,name<span class="token punctuation">[</span><span class="token string">"umr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#增加</span>name<span class="token punctuation">[</span><span class="token string">"tsf"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"活泼可爱"</span>print<span class="token punctuation">(</span><span class="token string">'增加 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改</span>name<span class="token punctuation">[</span><span class="token string">"osp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"帅气动人"</span>name<span class="token punctuation">[</span><span class="token string">"佩奇"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"古灵精怪"</span>print<span class="token punctuation">(</span><span class="token string">'修改 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除</span>del name<span class="token punctuation">[</span><span class="token string">"佩奇"</span><span class="token punctuation">]</span>name.pop<span class="token punctuation">(</span><span class="token string">"tsf"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'删除 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空</span>name.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'清空 ：  '</span>,name<span class="token punctuation">)</span>  </code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">字典  ：  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做'&amp;#125;</span>取值（依据key取出value） ：      好吃懒做增加 ：   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做', 'tsf': '活泼可爱'&amp;#125;</span>修改 ：   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'osp': '帅气动人', '佩奇': '古灵精怪', 'umr': '好吃懒做', 'tsf': '活泼可爱'&amp;#125;</span>删除 ：   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'osp': '帅气动人', 'umr': '好吃懒做'&amp;#125;</span>清空 ：   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span></code></pre><h3 id="字典详细操作"><a href="#字典详细操作" class="headerlink" title="字典详细操作"></a>字典详细操作</h3><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;                              #字典</span>    <span class="token string">"osp"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>22,<span class="token string">'student'</span>,1500<span class="token punctuation">]</span>,    <span class="token string">"佩奇"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>14,<span class="token string">"student"</span>,0<span class="token punctuation">]</span>,    <span class="token string">"umr"</span>  <span class="token keyword">:</span> <span class="token string">"好吃懒做"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>name.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#列表形式列出key</span>print<span class="token punctuation">(</span>name.keys<span class="token punctuation">(</span><span class="token punctuation">))</span>name.values<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#列出value</span>print<span class="token punctuation">(</span>name.values<span class="token punctuation">(</span><span class="token punctuation">))</span>name.items<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#以元组的形式列出key：value</span>print<span class="token punctuation">(</span>name.items<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token keyword">for</span> k,v <span class="token keyword">in</span> name.items<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span>k,v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出：</span><span class="token comment" spellcheck="true"># osp [22, 'student', 1500]</span><span class="token comment" spellcheck="true"># 佩奇 [14, 'student', 0]</span><span class="token comment" spellcheck="true"># umr 好吃懒做</span><span class="token keyword">for</span> i <span class="token keyword">in</span> name:    print<span class="token punctuation">(</span>i,name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># osp [22, 'student', 1500]</span><span class="token comment" spellcheck="true"># 佩奇 [14, 'student', 0]</span><span class="token comment" spellcheck="true"># umr 好吃懒做</span>print<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&amp;#123;'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做'&amp;#125;</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#求长度</span>print<span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">))</span>  <span class="token comment" spellcheck="true">#3</span><span class="token comment" spellcheck="true">#len 方法是全局的，也可判断列表，字符串的长度 数字不行  解释器自带函数</span>len<span class="token punctuation">(</span><span class="token string">"osp"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">"osp"</span><span class="token punctuation">))</span> <span class="token comment" spellcheck="true">#3</span>name<span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'salary': 2000,'age': 21 &amp;#125;  #字典增加 嵌套</span>print<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&amp;#123;'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做', 'jack': &amp;#123;'salary': 2000, 'age': 21&amp;#125;&amp;#125;</span><span class="token comment" spellcheck="true">#嵌套字典取值</span>print<span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2000</span></code></pre><h2 id="dict-类型-复制-copy-方法使用注意事项"><a href="#dict-类型-复制-copy-方法使用注意事项" class="headerlink" title="dict 类型 复制.copy()方法使用注意事项"></a>dict 类型 复制.copy()方法使用注意事项</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>english1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"we"</span><span class="token keyword">:</span><span class="token string">"我们"</span>,    <span class="token string">"world"</span><span class="token keyword">:</span><span class="token string">"世界"</span>,    <span class="token string">"company"</span><span class="token keyword">:</span> <span class="token string">"公司"</span>,<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>english2 <span class="token operator">=</span> english1english3 <span class="token operator">=</span> english1.copy<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"change english2"</span><span class="token punctuation">)</span>english2<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"城市"</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"change english3"</span><span class="token punctuation">)</span>english3<span class="token punctuation">[</span><span class="token string">"school"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"学校"</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash">english1 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司'&amp;#125;</span>english2 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司'&amp;#125;</span>english3 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司'&amp;#125;</span>--------------------------change english2english1 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'&amp;#125;</span>english2 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'&amp;#125;</span>english3 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司'&amp;#125;</span>--------------------------change english3english1 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'&amp;#125;</span>english2 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'&amp;#125;</span>english3 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'we': '我们', 'world': '世界', 'company': '公司', 'school': '学校'&amp;#125;</span></code></pre><p>从例子的执行结果可以看出，使用copy方法对获取到的字典做修改，原始的字典不受影响。<br>使用copy方法就像重新写了一个新的字典，只是元素恰巧和原来的字典相同。<br>注意copy进行拷贝是浅拷贝，如果字典的元素值也是字典，那么copy方法只会影响<br>最外层的字典，元素内部还是引用。可以用 <em>深拷贝</em> 解决此类问题。<br>例子：</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>copy.copy<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist.append<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span><span class="token string">'cccc'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'cccc'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'cccc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#里面的子对象被改变了</span></code></pre><p>深拷贝，包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变  </p><pre class=" language-bash"><code class="language-bash"> d<span class="token operator">=</span>copy.deepcopy<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#始终没有改变</span><span class="token operator">>></span><span class="token operator">></span> alist.append<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#始终没有改变</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span><span class="token string">"ccccc"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'ccccc'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#始终没有改变</span></code></pre><p>浅拷贝与深拷贝的本质原因：重新开辟内存来存储<br>review:#字符串类型是不可变的<br>#list是可变的，</p><h3 id="浅拷贝："><a href="#浅拷贝：" class="headerlink" title="浅拷贝："></a>浅拷贝：</h3><pre class=" language-bash"><code class="language-bash">print<span class="token punctuation">(</span><span class="token string">"浅拷贝："</span><span class="token punctuation">)</span><span class="token function">import</span> copyb<span class="token operator">=</span><span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span>print<span class="token punctuation">(</span><span class="token string">"id b:"</span>,id<span class="token punctuation">(</span>b<span class="token punctuation">))</span>h<span class="token operator">=</span>copy.copy<span class="token punctuation">(</span>b<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"id h"</span>,id<span class="token punctuation">(</span>h<span class="token punctuation">))</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span>h.append<span class="token punctuation">(</span>6<span class="token punctuation">)</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"id h"</span>,id<span class="token punctuation">(</span>h<span class="token punctuation">))</span>print<span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#浅拷贝新的列表h改变了，原来的b没变。</span> b<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'n'</span>   <span class="token comment" spellcheck="true">#列表元素改变后，新的列表也没变</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span> 输出：浅拷贝：<span class="token punctuation">(</span><span class="token string">'id b:'</span>, 140165805110552<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'id h'</span>, 140165805110480<span class="token punctuation">)</span><span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'id h'</span>, 140165805110480<span class="token punctuation">)</span><span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span></code></pre><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span>3, 4, a<span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy.copy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 11 print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>输出：<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span>140624327425704140624326197400140624327425704140624326197400<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190523210140203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1ZmVuZ3pq,size_16,color_FFFFFF,t_70"><br>可以看出浅拷贝，相当于只拷贝了一层，到a那里，a变化了，其值也就变化了。<br>Python中有多种方式实现浅拷贝，copy模块的copy函数、对象的copy函数、工厂方法、切片等；大多数情况下，编写程序时都是使用浅拷贝，除非有特定的需求；浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高。  </p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝:"></a>深拷贝:</h3><p>区别于浅拷贝只拷贝顶层引用，深拷贝会逐层进行拷贝，直到拷贝的所有引用都是不可变引用为止<br><img src="https://img-blog.csdnimg.cn/20190523210602950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1ZmVuZ3pq,size_16,color_FFFFFF,t_70"></p><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span>3, 4, a<span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy.deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 11 print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span> 输出：<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span>140673014398488140672779715720140673014398488140672779715720<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span> </code></pre><p><em>为什么Python默认的拷贝方式是浅拷贝？</em></p><ul><li><p>时间角度：浅拷贝花费时间更少；</p></li><li><p>空间角度：浅拷贝花费内存更少；</p></li><li><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。</p></li></ul><h2 id="登录and注册小程序"><a href="#登录and注册小程序" class="headerlink" title="登录and注册小程序"></a>登录and注册小程序</h2><p> 实现效果：</p><ul><li>登录唯一用户</li><li>输错3次锁定账号</li><li>注册唯一用户，密码位数6-16位</li><li>密码校验两次</li></ul><p>account.db (作为用户数据库)</p><pre class=" language-bash"><code class="language-bash">osp,123456abc,0stf,qazwsx123,0umr,123123abab,0</code></pre><p>登录：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  -*- coding: utf-8  -*-</span><span class="token comment" spellcheck="true"># 1.先做一个字典存用户数据</span>accounts <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token comment" spellcheck="true"># 2.将文档用户数据写入字典</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"account.db"</span>,<span class="token string">"r"</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token keyword">:</span>    line <span class="token operator">=</span> line.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    accounts<span class="token punctuation">[</span>line<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token comment" spellcheck="true"># print(accounts)</span><span class="token comment" spellcheck="true"># 3.搞个 loop 要求用户输入信息去判断</span>print<span class="token punctuation">(</span><span class="token string">"-----用户登录-----"</span><span class="token punctuation">)</span><span class="token keyword">while</span> True:                              <span class="token comment" spellcheck="true">#判断用户名状态</span>    user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> user not <span class="token keyword">in</span> accounts:        print<span class="token punctuation">(</span><span class="token string">"用户名不存在，请重新输入。。。"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">elif</span>  accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token keyword">:</span>        print<span class="token punctuation">(</span>f<span class="token string">"&amp;#123;user&amp;#125;此账户已被锁定，请联系管理员。。。"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    count <span class="token operator">=</span> 0    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> 3:                      <span class="token comment" spellcheck="true">#控制密码（判断密码正确否，三次锁定）</span>        password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password <span class="token operator">==</span>  accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>:            print<span class="token punctuation">(</span>f<span class="token string">"welcome'&amp;#123;user&amp;#125;'...登入成功。。。"</span><span class="token punctuation">)</span>        else:            print<span class="token punctuation">(</span><span class="token string">"密码输入错误请重试。。。"</span><span class="token punctuation">)</span>        count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> count <span class="token operator">==</span> 3 and password <span class="token operator">!=</span> accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token keyword">:</span>   <span class="token comment" spellcheck="true">#小bug，就是输错两次，第三次正确也会锁号</span>        print<span class="token punctuation">(</span>f<span class="token string">"输错了&amp;#123;count&amp;#125;次密码，账号&amp;#123;user&amp;#125;已锁定。。。"</span><span class="token punctuation">)</span> #必须补充条件        <span class="token comment" spellcheck="true"># 1.先改在内存中dict 账号信息的用户状态</span>        <span class="token comment" spellcheck="true"># 2.把dict里的数据转成原account.db数据格式，并存回文件</span>        accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span>        f_new <span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"account.db"</span>,<span class="token string">"w"</span>,<span class="token punctuation">)</span>        <span class="token keyword">for</span> user,val <span class="token keyword">in</span> accounts.items<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token comment" spellcheck="true">#字典转列表</span>            line <span class="token operator">=</span> <span class="token string">","</span>.join<span class="token punctuation">(</span>val<span class="token punctuation">)</span> + <span class="token string">"\n"</span>  <span class="token comment" spellcheck="true">#把列表再转成字符</span>            f_new.write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        f_new.close<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        pass        exit<span class="token punctuation">(</span><span class="token string">"bye..."</span><span class="token punctuation">)</span></code></pre><p>注册：</p><pre class=" language-bash"><code class="language-bash">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"account.db"</span>, mode<span class="token operator">=</span><span class="token string">"a+"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a+ 模式光标默认放置在末尾，太艹了，卡了好久</span>f.seek<span class="token punctuation">(</span>0<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将光标移至开头</span>accounts <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; #空字典存数据</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token keyword">:</span>             <span class="token comment" spellcheck="true">#将数据从文件读到字典（也就是加载到内存）</span>    line <span class="token operator">=</span> line.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    accounts<span class="token punctuation">[</span>line<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token comment" spellcheck="true">#print(accounts)</span>print<span class="token punctuation">(</span><span class="token string">"------用户注册------"</span><span class="token punctuation">)</span>user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token keyword">while</span> f<span class="token string">"&amp;#123;user&amp;#125;"</span> <span class="token keyword">in</span> accounts.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>:  #比对用户名是否重复    print<span class="token punctuation">(</span><span class="token string">"用户名已存在请重试..."</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"用户名为：&amp;#123;user&amp;#125;"</span><span class="token punctuation">)</span>password <span class="token operator">=</span> Nonepassword2 <span class="token operator">=</span> <span class="token string">"None@!<span class="token variable">$@#@</span>$<span class="token variable">$##</span>%$%#"</span><span class="token keyword">while</span> password <span class="token operator">!=</span> password2:            <span class="token comment" spellcheck="true">#二次输入验证</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> 6 or len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">></span> 16:   <span class="token comment" spellcheck="true">#字数限制</span>        print<span class="token punctuation">(</span><span class="token string">"不符合密码规范请重新输入（6-16个字或拼音）"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    password2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请再次输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">!=</span> password2:        print<span class="token punctuation">(</span><span class="token string">"两次输入的密码不相同请重试。。。"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"恭喜您注册成功...用户名为：&amp;#123;user&amp;#125;"</span><span class="token punctuation">)</span>data_base <span class="token operator">=</span> f<span class="token string">"&amp;#123;user&amp;#125;,&amp;#123;password2&amp;#125;,0"</span>f.write<span class="token punctuation">(</span>f<span class="token string">"\n&amp;#123;data_base&amp;#125;"</span><span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><pre><code># 列表推导式  格式：[表达式 for 变量 in 旧列表] 或者 [表达式 for 变量 in 旧列表 if 条件]names = [&#39;tom&#39;,&#39;lili&#39;,&#39;abc&#39;,&#39;jack&#39;,&#39;steven&#39;,&#39;luise&#39;,&#39;bob&#39;,&#39;ha&#39;]result = [name for name in names if len(name) &gt; 3]        # 过滤掉长度小于或等于3的人名print(result)    # [&#39;lili&#39;, &#39;jack&#39;, &#39;steven&#39;, &#39;luise&#39;]result = [name.capitalize() for name in names if len(name) &gt; 3]   # .capitalize()方法 首字母大写 or .title()print(result)    # [&#39;Lili&#39;, &#39;Jack&#39;, &#39;Steven&#39;, &#39;Luise&#39;]# 底层实现&#39;&#39;&#39;def func(names):    newlist = []    for name in names :        name = name.title()        newlist.append(name)      return newlist&#39;&#39;&#39;# 将1-100之间能被3整除的组成一个新的列表newlist = [i for i in range(1,101) if i % 3 == 0 % 5 == 0 ]print(newlist)list = [[1,3,5],[2,4,6],[3,6,9]]newlist = [i[-1] for i in list]print(newlist)   #[5, 6, 9]&#39;&#39;&#39; 相当于:for i in list :    newlist.append(i[-1])&#39;&#39;&#39;# -------------------------------------------------------------------------------------# 列表套字典的实现：dict1 = &#123;&#39;name&#39;:&#39;tom&#39;,&#39;salary&#39;:5000&#125;dict2 = &#123;&#39;name&#39;:&#39;lucy&#39;,&#39;salary&#39;:8000&#125;dict3 = &#123;&#39;name&#39;:&#39;jack&#39;,&#39;salary&#39;:4500&#125;dict4 = &#123;&#39;name&#39;:&#39;lily&#39;,&#39;salary&#39;:3000&#125;list1 = [dict1,dict2,dict3,dict4]  # [ &#123;&#125; , &#123;&#125; , &#123;&#125; , &#123;&#125; ]# if 薪资大于5000加200 ，低于等于5000加500newlist = [employee[&#39;salary&#39;] + 200 if employee[&#39;salary&#39;] &gt; 5000 else employee[&#39;salary&#39;] + 200 for employee in list1]print(newlist)  # [5200, 8200, 4700, 3200]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧妙使用ffmpeg扒网络视频</title>
      <link href="/posts/36835.html"/>
      <url>/posts/36835.html</url>
      
        <content type="html"><![CDATA[<h1 id="巧妙使用ffmpeg扒网络视频"><a href="#巧妙使用ffmpeg扒网络视频" class="headerlink" title="巧妙使用ffmpeg扒网络视频"></a>巧妙使用ffmpeg扒网络视频</h1><ul><li><h2 id="1-首先当然需要idm-下载地址"><a href="#1-首先当然需要idm-下载地址" class="headerlink" title="1 首先当然需要idm 下载地址"></a>1 首先当然需要idm <a href="https://wwa.lanzous.com/iwna1ei5j7i">下载地址</a></h2><h3 id="压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件"><a href="#压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件" class="headerlink" title="压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件"></a>压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件</h3><p><img src="http://fp1.fghrsh.net/2020/07/11/ec10c137e1d02272899792a385e17416.png"></p><h3 id="如未完成插件安装也可手动到相应浏览器自行安装插件"><a href="#如未完成插件安装也可手动到相应浏览器自行安装插件" class="headerlink" title="如未完成插件安装也可手动到相应浏览器自行安装插件"></a>如未完成插件安装也可手动到相应浏览器自行安装插件</h3><h3 id="下面为win10自带浏览器以及Google浏览器示例："><a href="#下面为win10自带浏览器以及Google浏览器示例：" class="headerlink" title="下面为win10自带浏览器以及Google浏览器示例："></a>下面为win10自带浏览器以及Google浏览器示例：</h3><p> 右上角找到相应插件管理<br><img src="http://fp1.fghrsh.net/2020/07/11/51bc220924a2d7b6f6d1d66657506f6b.png"><br> 勾选启用，如无插件请微软商城自行下载<br><img src="http://fp1.fghrsh.net/2020/07/11/4a8481f27892077205930e2e3b053d40.png"><br>Google相同<br><img src="http://fp1.fghrsh.net/2020/07/11/39351bcf9732d32d9c85130fa48abb6f.png"><br><img src="http://fp1.fghrsh.net/2020/07/11/eeec30ea0a5451f9c3b5331dd7cdc14f.png"></p></li><li><h2 id="接着安装ffmpeg-下载地址"><a href="#接着安装ffmpeg-下载地址" class="headerlink" title="接着安装ffmpeg 下载地址"></a>接着安装ffmpeg <a href="https://wwa.lanzous.com/iHaEqei5l7a">下载地址</a></h2></li></ul><p>解压后将bin文件夹中三个.exe文件剪切至system32文件夹方便操作<br><img src="http://fp1.fghrsh.net/2020/07/11/5b2cbac2eff2b8c0380340552e1bfe19.png"><br><img src="http://fp1.fghrsh.net/2020/07/11/2eff8e9fda702f225a706e348e2f84d6.png"><br>最后再加上预览工具前期的准备工作就做好了 <a href="https://wwa.lanzous.com/ivYPDei6raf">potplayer下载链接</a></p><ul><li><h1 id="2-接下来以Google浏览器为例扒youku上的视频"><a href="#2-接下来以Google浏览器为例扒youku上的视频" class="headerlink" title="2. 接下来以Google浏览器为例扒youku上的视频"></a>2. 接下来以Google浏览器为例扒youku上的视频</h1></li></ul><h2 id="1，右键点击检查进入控制台"><a href="#1，右键点击检查进入控制台" class="headerlink" title="1，右键点击检查进入控制台"></a>1，右键点击检查进入控制台</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/0086304a3735a9c062cd341b1c5e132e.png"><br><img src="http://fp1.fghrsh.net/2020/07/11/6509a948076c896c7b32c4c21d18bb4d.png"> </p><h2 id="2，在network中搜索-appcn-（尝试刷新）抓取json包，复制响应数据"><a href="#2，在network中搜索-appcn-（尝试刷新）抓取json包，复制响应数据" class="headerlink" title="2，在network中搜索 appcn （尝试刷新）抓取json包，复制响应数据"></a>2，在network中搜索 appcn （尝试刷新）抓取json包，复制响应数据</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/ee7544c7f982556149ae9152bb03ebee.png"> </p><h2 id="3，-打开idm选择从剪贴板中批量下载"><a href="#3，-打开idm选择从剪贴板中批量下载" class="headerlink" title="3， 打开idm选择从剪贴板中批量下载"></a>3， 打开idm选择从剪贴板中批量下载</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/4244a703c3b8551ef09a4aed55f7770e.png"> </p><h2 id="4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址"><a href="#4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址" class="headerlink" title="4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址"></a>4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/ce433e104269e9fb34ad118fc7a10392.png"><br><img src="http://fp1.fghrsh.net/2020/07/11/7c469422a51c5af0b4ac3c0ee48f46d4.png"></p><h2 id="5，potplayer预览查看是否为自己需要的清晰度"><a href="#5，potplayer预览查看是否为自己需要的清晰度" class="headerlink" title="5，potplayer预览查看是否为自己需要的清晰度"></a>5，potplayer预览查看是否为自己需要的清晰度</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/532a6755d1f2f931d15147a1f8b5f620.png"><br><img src="http://fp1.fghrsh.net/2020/07/11/a6678aa8ca4755283158efa844a8e005.png"></p><h2 id="6-下载"><a href="#6-下载" class="headerlink" title="6,下载"></a>6,下载</h2><h2 id="win-R打开并运行cmd命令台调用ffmpeg下载视频"><a href="#win-R打开并运行cmd命令台调用ffmpeg下载视频" class="headerlink" title="win+R打开并运行cmd命令台调用ffmpeg下载视频"></a>win+R打开并运行cmd命令台调用ffmpeg下载视频</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/1cb6f2a6fece96da1282fb5ced6124c6.png"></p><p><img src="http://fp1.fghrsh.net/2020/07/11/2150dc3498a94bcb3c3b556f4f5c544b.png"></p><pre class=" language-bash"><code class="language-bash">$ ffmpeg -i <span class="token string">"地址” -c copy -f mp4 "</span>E:\test.mp4<span class="token string">" # 地址即为刚刚预览的M3U8链接，最后的为保存地址"</span>盘符:\文件名.mp4"</code></pre><p>回车运行下载<br>等待片刻<br><img src="http://fp1.fghrsh.net/2020/07/11/6e11536b4e791e2e9568bc40183256d5.png"></p><h3 id="停止后即可在保存位置查看下载好的视频"><a href="#停止后即可在保存位置查看下载好的视频" class="headerlink" title="停止后即可在保存位置查看下载好的视频"></a>停止后即可在保存位置查看下载好的视频</h3><p><img src="http://fp1.fghrsh.net/2020/07/11/d0c080645a70dce9ec16f188a95b2986.png"></p><h1 id="以上为全部内容，如有误欢迎在下方评论指出"><a href="#以上为全部内容，如有误欢迎在下方评论指出" class="headerlink" title="以上为全部内容，如有误欢迎在下方评论指出"></a>以上为全部内容，如有误欢迎在下方评论指出</h1><p><img src="http://fp1.fghrsh.net/2020/07/11/aca2264154a239670a109faacfad83e9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青春ブタ野郎(mayiwolaopo)</title>
      <link href="/posts/45015.html"/>
      <url>/posts/45015.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://fp1.fghrsh.net/2020/05/24/cd2bf5d1169b1b3e3205e10b2b3b088a.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/23b4159f8c3283dc609b48eb0d03bed7.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/100e1ed9d77c59ca78733d1f221ac0af.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/daf3330b565ceeac52d941ac850a95bd.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/7873e7b3a4c173715ba00a1cecd17b7b.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/dd217dac2a436bb4019bac1db2accb42.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/b50a3a7adc07fbb288a0348450196a8d.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/10258bab6c7fadfad4f4c2cb7b803d8d.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/a20be8f1f14db97804440252588d7643.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/68bb9b5e5d33958f579a9a6bc67a9106.jpg"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/d30370b3caf623d88d93695081bd45a5.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/fd52c0042ddd07618f1b857d956a42a9.png"></p><p><img src="http://fp1.fghrsh.net/2020/05/24/68621d67e45195659f08aee25ec82bb5.png"></p><p><img src="/"></p><p><img src="/"></p>]]></content>
      
      
      <categories>
          
          <category> “#樱岛麻衣#咲太#” </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.5.17 Pixiv每日排行榜精选</title>
      <link href="/posts/48781.html"/>
      <url>/posts/48781.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fp1.fghrsh.net/2020/05/17/a07a719bcdb5a7d8acf2480f2e699c0d.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/185e0e5659757fe0b872246a1f722a62.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/f5a1aa30660f8663afa3385a380cfe4c.jpg">   </p><p><img src="https://fp1.fghrsh.net/2020/05/17/09bc777a0f2c4ddab9a3b0ac95e9ee64.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/3a7268241b0d28b4e7b8f160e5c8704a.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/22b7a47a6d67c2a93d8d1051f4de1630.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/fe8cd91a8d95e266a94ea4f0952e5394.png">   </p><p><img src="https://fp1.fghrsh.net/2020/05/17/6413a22d2dd7317abfbf4d116988d3f6.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/4e2557a25f14ec29ff86b6d78308317e.jpg">  </p><p><img src="http://fp1.fghrsh.net/2020/05/17/1cf47dd312517ddeb9cbd7b440e82476.png"></p>]]></content>
      
      
      <categories>
          
          <category> p站美图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.5.16 Pixiv每日排行榜精选</title>
      <link href="/posts/24533.html"/>
      <url>/posts/24533.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fp1.fghrsh.net/2020/05/16/85770b5a5bf17abe8113725a95062fcf.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/a51b934215f580c1382cbb6fe6de0dae.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/9e0dab5942f6182845374a825e020860.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/c945b56285fdd959d6a5af63cbe3c255.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/9f776512a3c66cebac9ae752909a020a.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/e742ca127576d3b5e9329f4640f98868.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/c3f526fe0e9e36ec99ff51a4dbf73b26.jpg">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/8cbc6742ce3170d6813cafd852b82dcc.png">  </p><p><img src="https://fp1.fghrsh.net/2020/05/09/547b9e02dadde0ebc8265f99138ceb61.png">  </p>]]></content>
      
      
      <categories>
          
          <category> p站美图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请拒绝使用‘吸血雷’共建和谐P2P圈</title>
      <link href="/posts/49058.html"/>
      <url>/posts/49058.html</url>
      
        <content type="html"><![CDATA[<h1 id="推荐一款大佬配置好的BT下载器"><a href="#推荐一款大佬配置好的BT下载器" class="headerlink" title="推荐一款大佬配置好的BT下载器"></a>推荐一款大佬配置好的BT下载器</h1><ul><li><h2 id="正规BT客户端-qBittorrent使用教程原视频地址"><a href="#正规BT客户端-qBittorrent使用教程原视频地址" class="headerlink" title="正规BT客户端 qBittorrent使用教程原视频地址"></a>正规BT客户端 qBittorrent使用教程<a href="https://www.bilibili.com/video/BV1Qe411W7z5">原视频地址</a></h2></li></ul><h2 id="下载文件放在文章末尾，以下是粗略安装步骤："><a href="#下载文件放在文章末尾，以下是粗略安装步骤：" class="headerlink" title="下载文件放在文章末尾，以下是粗略安装步骤："></a>下载文件放在文章末尾，以下是粗略安装步骤：</h2><p><img src="https://preview.cloud.189.cn/image/imageAction?param=85D03BE33F0E13CD97F744BC98024E6E68C960911D49DB45D96C15BDE19ECD4309E448704C0C97C8BDD49E5D28F11D3B12240571EB0E104121FF5D31D6CD117D8E372766BB7BE111F288AD40B47CD5B8FA54653793D3EDCAE8E43AE7"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=66DCA23571FF7B1BA850C4A871060AB021C79DAB73FD14ABD3144A634CE22895D0A366AB4EFC0F96F8DA843E2CBB960729CE5F0ABD20F25F5DB06D9B53D253271EB6B73CA7FC3EFDEE44A8D9270F61149533258A426888A38B92547B"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=8A7C46961412C12C8264EC135D07021253FC55C36D2F0865D76FE695F4690F22C71F86E11D6843F6370F60271AD5EBD9259AB142CB70C66A79AC201CF2C3DB276B98E793F1E8FD04C156527944CEC841A4903312F744E99294189687"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=78093C9C37F4FF807950A00CB071CFBE8AAB1C0144A590A6F0444BF38B9F39E9DD1E3F8AB3F035B97DC809728DE0B4531255C8AE8691D2974FF4A26E51E025E940344E3D2F20414209C61697D95206CB21449C8C887EF964568E806A"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=D7ED04EDB296709960D7DD9F5C09D34D57514CBD2A30BC9A209DA35FA1D5EAC584B91B1637F5E918AEBCAADFBE50D980A9A86F112E2048F5E71D4A896B0C121BD166909FA789B676F8693F2E8F84212FC823F7C3B27C3D8E98F26CE2"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=A86DF544841E670DA56C730A63D82540A105C0CDB614CED9A3FB6675DD137FC710EA5B6A435E0473BF46E1CB39DA8E519AD4B92A3857119B967E06C6F935C0722A185C65DD469DB46A97C2372E739D318CDC21CFDE7C6AB59218384B"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=8BEC988C21B92C79A072918FFB8FD37C0D232BBFE7715E63D210401356AEE2B87CD22DB939208C3F1BCB14DB8C759F8D13D71C4979371DA3625974AAEEEE1E43A41C0DC513E8464510E645DCF802B553690A64CB14DF17E08FB50545"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=B2FA124BE94CE74DE81C4A6FE7A157C23CB90E106E4442823A0B592FB6613BBDBD38F9457603346378951883F0142D3DEF2E724CE79E84AA944F22196035156C4EF2C5370C78717D21BA6D09154323EA25DCE03E308CB2B8DC87C474"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=3F71FD5C961225C974E6BFF81E2425A22B559F1D89075C72CE2B43D6DFA11272FBC96814315C90F1027369FDB1DD862679EF1E0B5D2B53B7EB889639EF4C79A1CBA7FDAC0FED087E93E5CB5B794C00E86DE56745B64B3589C3D1C642"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=9D637FEC908CBFCFAA47EB82786FDB57206AD492AA10258C09E011F42CC001DEC1CB80003C98B4EC8CB60DE4F60EBC5E39D6BFC6A96672465451E5036FD233AF3E759DF7300B1A66FA40C379AF1D13EB149A5B98C6726E9B34B92CCE"><br><img src="https://preview.cloud.189.cn/image/imageAction?param=2E60E10D7CB82452F9FF81CE8C750EA0014F9DB0EB0B923FA0B7DF3B6FC99C15368F7BAE5BF2529FAD56EDA3207B954A0302DA8EFAB743F5B84F6E346205DFCBB426850F4AD5187547C1F2787897CB309FE365BC160B06DE2E167EFF">   </p><ul><li><h2 id="大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。"><a href="#大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。" class="headerlink" title="大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。"></a>大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。</h2><h2 id="一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。"><a href="#一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。" class="headerlink" title="一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。"></a>一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。</h2></li><li><h1 id="已经整合好放同一个文件夹了：下载链接"><a href="#已经整合好放同一个文件夹了：下载链接" class="headerlink" title="已经整合好放同一个文件夹了：下载链接"></a>已经整合好放同一个文件夹了：<a href="https://lanzous.com/ibuc6ti">下载链接</a></h1></li><li><h2 id="我自己弄好以后的下载情况："><a href="#我自己弄好以后的下载情况：" class="headerlink" title="我自己弄好以后的下载情况："></a>我自己弄好以后的下载情况：</h2></li></ul><p><img src="https://preview.cloud.189.cn/image/imageAction?param=96EC98EA8976BD02D2FC279CE73A146E170D4FFEC47A93F7872A71E152802E99D55CF6AF9803911002FAD76A92E6FD523C76FF02FD436DCD794137B3A35EA843272215AC90581116F778F6A09376D3A4FC69D1594AFAAE82093CF685">  </p><h2 id="下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m-x2F-S"><a href="#下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m-x2F-S" class="headerlink" title="下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m&#x2F;S"></a>下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m&#x2F;S</h2><h2 id="其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。"><a href="#其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。" class="headerlink" title="其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。"></a>其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请拒绝使用百度网盘（都5G时代了，拒绝梦回2G）</title>
      <link href="/posts/17834.html"/>
      <url>/posts/17834.html</url>
      
        <content type="html"><![CDATA[<h1 id="今天推荐一款百度网盘下载工具"><a href="#今天推荐一款百度网盘下载工具" class="headerlink" title="今天推荐一款百度网盘下载工具"></a>今天推荐一款百度网盘下载工具</h1><p>拒绝流氓从我做起  </p><ul><li><h2 id="然后是什么呢，老网盘driver应该很熟了"><a href="#然后是什么呢，老网盘driver应该很熟了" class="headerlink" title="然后是什么呢，老网盘driver应该很熟了"></a>然后是什么呢，老网盘driver应该很熟了</h2><h2 id="他就是pandownload"><a href="#他就是pandownload" class="headerlink" title="他就是pandownload"></a>他就是<a href="http://pandownload.com/">pandownload</a></h2></li><li><h2 id="不解释看图片："><a href="#不解释看图片：" class="headerlink" title="不解释看图片："></a>不解释看图片：<img src="https://github.com/OneSidePass/photos/blob/master/%E6%89%B9%E6%B3%A8%202020-04-23%20222957.png?raw=true"></h2><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://lanzous.com/ibucf7a">下载地址</a></h2><h3 id="用度盘并不是自己想用，而是网上的资源都是度盘。"><a href="#用度盘并不是自己想用，而是网上的资源都是度盘。" class="headerlink" title="用度盘并不是自己想用，而是网上的资源都是度盘。"></a>用度盘并不是自己想用，而是网上的资源都是度盘。</h3>  （能跑一半带宽就已经很满足了）<br>   不然天翼云就挺不错的没像某度直接梦回2G<br><img src="https://preview.cloud.189.cn/image/imageAction?param=B3FCCEB73AA1045D7A665A6939E1D51936051F9E6BBD0C55F3D8FF7619B712021BEF0A80AE84B91F35545256C306ECE730AEB3596125CAA678AE55FCAE5A83ADAFD8DB48CAEFFACA258D792064B38828B60DEE0440D4D58EF049A3C8"></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
